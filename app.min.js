var _0xbcfd = ['captureTime', 
'statisticsActiveUsers', 
'statisticsActiveDevices', 
'statisticsRequests', 'statisticsMessagesReceived', 'messagesStored', 'statisticsGeocoder', 'geocoderRequests', 'statisticsGeolocation', 'controller.deviceDistance', 'api/devices/', '/distance', 'deviceDistance', 'setButton', 'sharedSet', 'onSetClick', 'Traccar.view.dialog.CalendarController', 'controller.calendar', 'files', 'onload', 'dataField', 'target', 'onerror', 'error', 'fileInputEl', 'Traccar.view.dialog.Calendar', 'calendar', 'filefield', 'file', 'sharedFile', 'sharedSelectFile', 'onFileChange', 'Traccar.view.edit.CalendarsController', 'controller.calendars', 'Traccar.view.edit.Calendars', 'calendarsView', 'calendars', 'Traccar.view.dialog.SavedCommand', 'savedCommand', 'sharedSavedCommand', 'Traccar.view.edit.SavedCommandsController', 'controller.savedCommands', 'Traccar.view.edit.SavedCommands', 'savedCommandsView', 'savedCommands', 'startField', 'initialConfig', 'startConfig', 'periodConfig', 'merge', 'updateFieldConfig', 'onNameChange', 'Traccar.view.edit.MaintenancesController', 'controller.maintenances', 'maintenancesView', 'maintenances', 'controller.settings', 'settingsServerButton', 'settingsUsersButton', 'settingsUserButton', 'settingsGroupsButton', 'settingsGeofencesButton', 'settingsNotificationsButton', 'settingsDriversButton', 'settingsCommandsButton', 'settingsComputedAttributesButton', 'groupsView', 'Traccar.view.dialog.Server', 'getServer', 'logout', 'Traccar.view.SettingsMenu', 'settingsMenu', 'settings', 'xf007@FontAwesome', 'onGroupsClick', 'settingsServer', 'xf233@FontAwesome', 'onUsersClick', 'xf080@FontAwesome', 'onStatisticsClick', 'settingsStatisticsButton', 'settingsMaintenancesButton', 'loginLogout', 'xf08b@FontAwesome', 'Traccar.view.MegaMenuController', 'controller.settingsMegaMenu', 'settingsCalendarsButton', 'contactWhatsMegaMenu', 'showReportsButton', 'showEventsButton', 'ui.disableEvents', 'statisticsTitle', 'showEvents', '../../config/config.json', 'Traccar.view.MegaMenu', 'Menu', 'settingsMegaMenu', 'xf0f6@FontAwesome', 'xf27b@FontAwesome', 'xf247@FontAwesome', 'onServerClick', 'Pagamento', 'xf0d6@FontAwesome', 'settingsonPagamento', 'Suporte', 'xf232@FontAwesome', 'onLogoutClick', 'Traccar.view.map.Map', 'mapTitle', 'toggle', 'show-geofences-button', 'showLiveRoutes', 'xf1b0@FontAwesome', 'show-live-routes-button', 'deviceFollowButton', 'xf05b@FontAwesome', 'deviceFollow', 'device-follow-button', 'streetViewButton', 'streetview-button', 'contactWhats', 'device-street-button', 'contactClick', 'device-Pagamento-button', 'pgClick', 'megaMenu', 'markersSource', 'accuracySource', 'routeSource', 'geofencesSource', 'liveRouteSource', 'addLayer', 'geofencesLayer', 'liveRouteLayer', 'accuracyLayer', 'Traccar.view.Main', 'container', 'Viewport', 'widget.main', 'mainController', 'border', 'deviceWidth', 'center', 'south', 'stateView', 'east', 'widget.mainMobile', 'rootPanel', 'mini', 'mobile-state-grid', 'mobile-devices-grid', 'Traccar.controller.Root', 'Controller', 'controller.root', 'popup', 'popup-closer', 'commands-buttons', 'onclick', 'blur', 'Manager', 'setProvider', 'CookieProvider', 'addFields', 'getAttributeConverter', 'attributeKey', 'setServer', 'fromQueryString', 'onSessionReturn', 'onLogin', 'loadApp', 'eventAll', 'CommonDeviceAttributes', 'loadData', 'CommonUserAttributes', 'UserAttributes', 'asyncUpdate', 'removeUrlParameter', 'eventId', 'beepSound', 'beep.wav', 'play', 'getCmp', 'search', 'isEmpty', 'history', 'pushState', 'pathname', 'toQueryString', 'https:', 'protocol', 'wss:', 'ws:', 'host', 'api/socket', 'errorSocket', 'errorTitle', 'updateDevices', 'updatePositions', 'reconnectTimeout', 'onmessage', 'positions', 'updateEvents', 'VisibleDevices', 'soundPressed', 'beep', 'Traccar.Application', 'Application', 'Traccar', 'Groups\x20Devices\x20AllGroups\x20AllDevices\x20Positions\x20LatestPositions\x20EventPositions\x20Users\x20Attributes\x20MapTypes\x20DistanceUnits\x20SpeedUnits\x20CoordinateFormats\x20CommandTypes\x20TimeUnits\x20Languages\x20Events\x20Geofences\x20AllGeofences\x20Notifications\x20AllNotifications\x20GeofenceTypes\x20ReportRoute\x20ReportEvents\x20ReportTrips\x20ReportStops\x20ReportSummary\x20ReportTypes\x20ReportEventTypes\x20ReportChartTypes\x20ReportPeriods\x20Statistics\x20DeviceImages\x20Calendars\x20AllCalendars\x20AllTimezones\x20VisibleDevices\x20DeviceStatuses\x20CommonDeviceAttributes\x20DeviceAttributes\x20GeofenceAttributes\x20GroupAttributes\x20ServerAttributes\x20CommonUserAttributes\x20UserAttributes\x20ComputedAttributes\x20AllComputedAttributes\x20PositionAttributes\x20AttributeValueTypes\x20Drivers\x20AllDrivers\x20KnownCommands\x20VolumeUnits\x20AllCommandTypes\x20Commands\x20AllCommands\x20DeviceCommands\x20AllNotificationTypes\x20Maintenances\x20AllMaintenances\x20MaintenanceTypes\x20HoursUnits\x20AllNotificators', 'Root', 'matchMedia', '(max-width:\x20768px)', 'matches', 'notificator', 'Ext.data.reader.Json', 'getRecords', 'readRecords', 'true', 'toString', 'web.reportColor', 'mapRouteColor', 'isString', 'alert', 'errorGeneral', '<br><br><textarea\x20readonly\x20rows=\x225\x22\x20style=\x22resize:\x20none;\x20width:\x20100%;\x22>', '</textarea>', 'toast', 'toastWidth', 'eventIgnitionOn', 'eventIgnitionOff', 'deviceStatusUnknown', 'Nenhum', 'innerHTML', '<div\x20class=\x22nome\x22>', '</div></br><div\x20class=\x22hr\x22></div></br></br><div\x20class=\x22title\x22>Grupo\x20:\x20<span>', '</span></div></br><div\x20class=\x22title\x22>Data\x20:\x20<span>', '\x20:\x20<span>', '</span></div></br><div\x20class=\x22title\x22>Velocidade\x20:\x20<span>', '</span></div></br><div\x20class=\x22title\x22>Endereço\x20:\x20<code>', '</code></div>', 'bloqueio', 'Bloquear?', 'Deseja\x20realmente\x20bloquear\x20o\x20veículo', 'warning', 'btn-danger', 'Sim', 'Cancelar', 'engineStop', 'desbloqueio', 'Desbloquear?', 'Deseja\x20desbloquear\x20o\x20veículo', 'btn-success', 'engineResume', 'https://www.google.com/maps/place/', '!4d', ',_blank', 'application', 'define', 'Traccar.Style', 'd/m/Y\x20H:i:s', 'H:i', 'g:i\x20a', 'd/m/Y', '#F06292\x20#BA68C8\x20#4DD0E1\x20#4DB6AC\x20#FF8A65\x20#A1887F', 'rgba(50,\x2050,\x2050,\x201.0)', 'rgba(255,\x20255,\x20255,\x201.0)', 'bold\x2012px\x20sans-serif', 'rgba(77,\x20250,\x20144,\x201.0)', 'rgba(250,\x20190,\x2077,\x201.0)', 'rgba(14,\x2088,\x20141,\x201.0)', 'rgba(21,\x20127,\x20204,\x201.0)', 'Traccar.AttributeFormatter', 'getStore', 'CoordinateFormats', 'formatValue', 'app', 'coordinateFormat', 'SpeedUnits', 'speedUnit', 'convertValue', 'getAttributePreference', 'N\x20NE\x20E\x20SE\x20S\x20SW\x20W\x20NW', 'split', 'floor', 'DistanceUnits', 'distanceUnit', 'VolumeUnits', 'volumeUnit', 'HoursUnits', 'AllDevices', 'getTotalCount', 'Devices', 'getById', 'get', 'name', 'AllGroups', 'AllGeofences', 'AllCalendars', 'Calendars', 'AllDrivers', 'Drivers', 'findRecord', 'AllMaintenances', 'Maintenances', 'sharedDays', 'sharedHours', 'command', 'charAt', 'toUpperCase', 'slice', 'number', 'toFixed', 'Style', 'numberPrecision', 'boolean', 'Msg', 'buttonText', 'getPreference', 'twelveHourFormat', 'Date', 'format', 'dateTimeFormat12', 'dateTimeFormat24', 'latitude', 'longitude', 'coordinateFormatter', 'speed', 'speedFormatter', 'course', 'courseFormatter', 'distance', 'accuracy', 'distanceFormatter', 'duration', 'durationFormatter', 'deviceId', 'deviceIdFormatter', 'groupId', 'groupIdFormatter', 'geofenceId', 'geofenceIdFormatter', 'maintenanceId', 'maintenanceIdFormatter', 'calendarId', 'calendarIdFormatter', 'lastUpdate', 'lastUpdateFormatter', 'volumeFormatter', 'driverUniqueId', 'driverUniqueIdFormatter', 'commandType', 'defaultFormatter', 'speedConverter', 'distanceConverter', 'spentFuel', 'volumeConverter', 'PositionAttributes', 'getAttributeDataType', 'voltage', 'sharedVoltAbbreviation', 'percentage', 'numberFormatterFactory', '&#37;', 'temperature', '&deg;C', 'volume', 'hours', 'hoursFormatter', 'consumption', 'sharedLiterPerHourAbbreviation', 'hoursConverter', 'dataType', 'Traccar.model.Server', 'data', 'Model', 'negative', 'int', 'readonly', 'deviceReadonly', 'limitCommands', 'map', 'string', 'bingKey', 'mapUrl', 'float', 'zoom', 'forceSettings', 'poiLayer', 'ajax', 'api/server', 'PUT', 'json', 'login', 'phone', 'administrator', 'disabled', 'expirationTime', 'date', 'deviceLimit', 'token', 'attributes', 'rest', 'api/users', 'Traccar.model.Group', 'Traccar.model.Device', 'uniqueId', 'model', 'contact', 'category', 'status', 'geofenceIds', 'Traccar.model.Position', 'serverTime', 'deviceTime', 'fixTime', 'valid', 'AttributeFormatter', 'altitude', 'getConverter', 'address', 'Traccar.model.Attribute', 'priority', 'attribute', 'Traccar.model.Command', 'description', 'type', 'textChannel', 'Traccar.model.Event', 'positionId', 'text', 'eventCommandResult', 'result', 'alarm', 'textMessage', 'eventTextMessage', 'message', 'driverChanged', 'getEventString', 'Geofences', 'Traccar.model.Geofence', 'area', 'always', 'bool', 'notificators', 'Traccar.model.ReportSummary', 'deviceName', 'maxSpeed', 'averageSpeed', 'engineHours', 'startAddress', 'endTime', 'endAddress', 'Traccar.model.ReportStop', 'startTime', 'Traccar.model.Calendar', 'Traccar.model.KnownAttribute', 'key', 'valueType', 'Traccar.model.Driver', 'Traccar.model.KnownCommand', 'getFormatter', 'parameters', 'Traccar.model.KnownNotification', 'Traccar.model.Maintenance', 'start', 'Traccar.store.Groups', 'Store', 'api/groups', 'Traccar.store.Devices', 'Traccar.store.AllGroups', 'Traccar.store.AllDevices', 'api/devices', 'Traccar.store.Positions', 'api/positions', 'application/json', 'Traccar.store.EventPositions', 'Traccar.store.Users', 'Traccar.store.Attributes', 'Traccar.store.MapTypes', 'mapCarto', 'osm', 'mapOsm', 'bingRoad', 'mapBingRoad', 'bingAerial', 'bingHybrid', 'mapBingHybrid', 'baidu', 'mapBaidu', 'yandexMap', 'mapYandexMap', 'yandexSat', 'mapYandexSat', 'wikimedia', 'mapWikimedia', 'custom', 'mapCustom', 'Traccar.store.DistanceUnits', 'factor', 'sharedKm', 'sharedMi', 'nmi', 'sharedNmi', 'Traccar.store.SpeedUnits', 
'sharedKn', 'kmh', 'Traccar.store.CoordinateFormats', 'dms', 'sharedDegreesMinutesSeconds', 'ddm', 'abs', 'coordinatePrecision', 'Traccar.store.CommandTypes', 'api/commands/types', 'showError', 'Traccar.store.TimeUnits', 'sharedSecondAbbreviation', 'sharedHourAbbreviation', 'Traccar.store.Languages', 'code', 'languages', 'hasOwnProperty', 'push', 'Traccar.store.Events', 'Traccar.store.Geofences', 'Traccar.store.AllGeofences', 'api/geofences', 'Traccar.store.Notifications', 'Traccar.model.Notification', 'api/notifications', 'Traccar.store.AllNotifications', 'Traccar.store.GeofenceTypes', 'Polygon', 'mapShapePolygon', 'Circle', 'mapShapeCircle', 'LineString', 'mapShapePolyline', 'Traccar.store.ReportRoute', 'api/reports/route', 'reportTimeout', 'Traccar.store.ReportEvents', 'api/reports/events', 'Traccar.model.ReportTrip', 'api/reports/trips', 'Traccar.store.ReportStops', 'Traccar.store.ReportSummary', 'Traccar.store.ReportTypes', 'route', 'reportRoute', 'events', 'trips', 'reportStops', 'reportSummary', 'reportChart', 'allEvents', 'Traccar.store.ReportChartTypes', 'positionSpeed', 'positionAccuracy', 'Traccar.store.ReportPeriods', 'today', 'yesterday', 'reportYesterday', 'reportThisWeek', 'previousWeek', 'reportPreviousWeek', 'thisMonth', 'reportThisMonth', 'previousMonth', 'reportPreviousMonth', 'Traccar.model.Statistics', 'activeUsers', 'activeDevices', 'requests', 'messagesReceived', 'mailSent', 'smsSent', 'geolocationRequests', 'Traccar.store.Statistics', 'api/statistics', 'Traccar.store.DeviceImages', 'Images', 'length', 'getElementById', 'Svg', 'arrow', 'background', 'Traccar.store.Calendars', 'api/calendars', 'Traccar.store.AllCalendars', 'Traccar.store.AllTimezones', 'Africa/Abidjan', 'Africa/Bissau', 'Africa/Casablanca', 'Africa/El_Aaiun', 'Africa/Monrovia', 'America/Danmarkshavn', 'Antarctica/Troll', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'GMT', 'Etc/GMT', 'Etc/UCT', 'Etc/UTC', 'Europe/Dublin', 'Europe/London', 'WET', 'Africa/Ceuta', 'Africa/Lagos', 'Africa/Ndjamena', 'Africa/Tunis', 'Africa/Windhoek', 'CET', 'Etc/GMT-1', 'Europe/Andorra', 'Europe/Belgrade', 'Europe/Budapest', 'Europe/Copenhagen', 'Europe/Gibraltar', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Monaco', 'Europe/Oslo', 'Europe/Prague', 'Europe/Rome', 'Europe/Stockholm', 'Europe/Vienna', 'Europe/Zurich', 'MET', 'Africa/Johannesburg', 'Africa/Maputo', 'Africa/Tripoli', 'Asia/Amman', 'Asia/Beirut', 'Asia/Gaza', 'Asia/Hebron', 'Asia/Jerusalem', 'Asia/Nicosia', 'EET', 'Europe/Bucharest', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Sofia', 'Europe/Tallinn', 'Europe/Vilnius', 'Africa/Nairobi', 'Antarctica/Syowa', 'Asia/Baghdad', 'Asia/Famagusta', 'Asia/Qatar', 'Asia/Riyadh', 'Europe/Istanbul', 'Europe/Minsk', 'Europe/Volgograd', 'Asia/Tehran', 'Asia/Baku', 'Asia/Dubai', 'Europe/Astrakhan', 'Europe/Saratov', 'Europe/Ulyanovsk', 'Indian/Mahe', 'Indian/Mauritius', 'Indian/Reunion', 'Asia/Kabul', 'Antarctica/Mawson', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Atyrau', 'Asia/Karachi', 'Asia/Samarkand', 'Asia/Tashkent', 'Asia/Yekaterinburg', 'Indian/Maldives', 'Asia/Colombo', 'Asia/Kolkata', 'Asia/Almaty', 'Asia/Bishkek', 'Asia/Dhaka', 'Asia/Thimphu', 'Asia/Urumqi', 'Etc/GMT-6', 'Indian/Chagos', 'Asia/Yangon', 'Indian/Cocos', 'Antarctica/Davis', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Jakarta', 'Asia/Krasnoyarsk', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Pontianak', 'Etc/GMT-7', 'Asia/Brunei', 'Asia/Choibalsan', 'Asia/Hong_Kong', 'Asia/Kuching', 'Asia/Makassar', 'Asia/Manila', 'Asia/Taipei', 'Australia/Perth', 'Etc/GMT-8', 'Australia/Eucla', 'Asia/Dili', 'Asia/Jayapura', 'Asia/Khandyga', 'Asia/Seoul', 'Asia/Tokyo', 'Etc/GMT-9', 'Australia/Adelaide', 'Australia/Broken_Hill', 'Australia/Darwin', 'Antarctica/DumontDUrville', 'Asia/Ust-Nera', 'Asia/Vladivostok', 'Australia/Brisbane', 'Australia/Currie', 'Australia/Lindeman', 'Australia/Melbourne', 'Australia/Sydney', 'Pacific/Chuuk', 'Antarctica/Casey', 'Antarctica/Macquarie', 'Asia/Magadan', 'Asia/Sakhalin', 'Etc/GMT-11', 'Pacific/Bougainville', 'Pacific/Efate', 'Pacific/Guadalcanal', 'Pacific/Kosrae', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pohnpei', 'Asia/Anadyr', 'Asia/Kamchatka', 'Etc/GMT-12', 'Pacific/Auckland', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Tarawa', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Chatham', 'Etc/GMT-13', 'Pacific/Apia', 'Pacific/Tongatapu', 'Etc/GMT-14', 'Pacific/Kiritimati', 'America/Scoresbysund', 'Atlantic/Azores', 'Atlantic/Cape_Verde', 'Etc/GMT+1', 'America/Noronha', 'Etc/GMT+2', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Bahia', 'America/Cayenne', 'America/Fortaleza', 'America/Godthab', 'America/Maceio', 'America/Miquelon', 'America/Paramaribo', 'America/Recife', 'America/Santarem', 'America/Sao_Paulo', 'Atlantic/Stanley', 'America/Asuncion', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Caracas', 'America/Cuiaba', 'America/Curacao', 'America/Goose_Bay', 'America/Halifax', 'America/La_Paz', 'America/Manaus', 'America/Martinique', 'America/Moncton', 'America/Port_of_Spain', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Santiago', 'America/Santo_Domingo', 'America/Thule', 'Antarctica/Palmer', 'Etc/GMT+4', 'America/Atikokan', 'America/Bogota', 'America/Eirunepe', 'America/Guayaquil', 'America/Havana', 'America/Indiana/Indianapolis', 'America/Indiana/Petersburg', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Iqaluit', 'America/Kentucky/Louisville', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Panama', 'America/Pangnirtung', 'America/Port-au-Prince', 'America/Rio_Branco', 'America/Thunder_Bay', 'EST5EDT', 'Etc/GMT+5', 'America/Belize', 'America/Costa_Rica', 'America/El_Salvador', 'America/Guatemala', 'America/Managua', 'America/Matamoros', 'America/Menominee', 'America/Mexico_City', 'America/Rankin_Inlet', 'America/Regina', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Winnipeg', 'Etc/GMT+6', 'Pacific/Easter', 'Pacific/Galapagos', 'America/Boise', 'America/Chihuahua', 'America/Creston', 'America/Dawson_Creek', 'America/Denver', 'America/Edmonton', 'America/Fort_Nelson', 'America/Hermosillo', 'America/Inuvik', 'America/Mazatlan', 'America/Ojinaga', 'America/Yellowknife', 'Etc/GMT+7', 'MST', 'MST7MDT', 'America/Los_Angeles', 'America/Tijuana', 'America/Vancouver', 'America/Whitehorse', 'Etc/GMT+8', 'Pacific/Pitcairn', 'PST8PDT', 'America/Anchorage', 'America/Juneau', 'America/Metlakatla', 'America/Nome', 'America/Sitka', 'Etc/GMT+9', 'Pacific/Gambier', 'Pacific/Marquesas', 'America/Adak', 'Etc/GMT+10', 'HST', 'Pacific/Honolulu', 'Pacific/Rarotonga', 'Pacific/Tahiti', 'Pacific/Niue', 'Pacific/Pago_Pago', 'Etc/GMT+12', 'Traccar.store.VisibleDevices', 'ChainedStore', 'color', 'online', 'deviceStatusOnline', 'view-color-green', 'offline', 'deviceStatusOffline', 'view-color-red', 'unknown', 'speedLimit', 'attributeSpeedLimit', 'Traccar.store.DeviceAttributes', 'attributeWebReportColor', 'attributeDevicePassword', 'processing.copyAttributes', 'attributeProcessingCopyAttributes', 'decoder.timezone', 'sharedTimezone', 'timezone', 'Traccar.store.GeofenceAttributes', 'memory', 'attributeColor', 'polylineDistance', 'attributePolylineDistance', 'Traccar.store.GroupAttributes', 'Traccar.store.ServerAttributes', 'Traccar.store.CommonUserAttributes', 'attributeWebLiveRouteLength', 'web.selectZoom', 'mapDefaultZoom', 'web.maxZoom', 'attributeWebMaxZoom', 'mapMaxZoom', 'ui.disableReport', 'attributeUiDisableReport', 'attributeUiDisableEvents', 'ui.disableWhats', 'ui.disableVehicleFetures', 'attributeUiDisableVehicleFetures', 'ui.disableDrivers', 'attributeUiDisableDrivers', 'ui.disableComputedAttributes', 'ui.disableMaintenances', 'attributeUiDisableMaintenances', 'attributeUiHidePositionAttributes', 'settingsDistanceUnit', 'settingsSpeedUnit', 'attributeMailSmtpHost', 'mail.smtp.port', 'attributeMailSmtpPort', 'mail.smtp.starttls.enable', 'attributeMailSmtpStarttlsEnable', 'mail.smtp.starttls.required', 'attributeMailSmtpStarttlsRequired', 'mail.smtp.ssl.enable', 'attributeMailSmtpSslEnable', 'mail.smtp.ssl.trust', 'mail.smtp.ssl.protocols', 'attributeMailSmtpSslProtocols', 'mail.smtp.from', 'mail.smtp.auth', 'attributeMailSmtpUsername', 'mail.smtp.password', 'attributeMailSmtpPassword', 'Traccar.model.ComputedAttribute', 'expression', 'api/attributes/computed', 'Traccar.store.AllComputedAttributes', 'Traccar.store.PositionAttributes', 'raw', 'positionRaw', 'index', 'positionIndex', 'hdop', 'positionHdop', 'vdop', 'pdop', 'positionPdop', 'sat', 'positionSat', 'satVisible', 'positionSatVisible', 'rssi', 'positionRssi', 'gps', 'positionGps', 'roaming', 'positionRoaming', 'event', 'positionEvent', 'positionAlarm', 'odometer', 'positionOdometer', 'positionServiceOdometer', 'tripOdometer', 'positionTripOdometer', 'positionHours', 'steps', 'positionSteps', 'input', 'positionInput', 'output', 'positionOutput', 'battery', 'positionBattery', 'batteryLevel', 'positionBatteryLevel', 'fuel', 'positionFuel', 'positionFuelConsumption', 'positionVersionFw', 'versionHw', 'sharedType', 'ignition', 'positionIgnition', 'flags', 'charge', 'positionIp', 'archive', 'positionDistance', 'totalDistance', 'deviceTotalDistance', 'rpm', 'positionRpm', 'vin', 'positionVin', 'approximate', 'positionApproximate', 'throttle', 'positionThrottle', 'motion', 'armed', 'positionArmed', 'geofence', 'sharedGeofence', 'positionAcceleration', 'deviceTemp', 'positionDeviceTemp', 'operator', 'positionOperator', 'deviceCommand', 'blocked', 'dtcs', 'positionDtcs', 'obdSpeed', 'positionObdSpeed', 'obdOdometer', 
'positionObdOdometer', 'positionDriverUniqueId', 'replace', 'Traccar.store.AttributeValueTypes', 'sharedTypeString', 'sharedTypeNumber', 'sharedTypeBoolean', 'api/drivers', 'Traccar.store.AllDrivers', 'Traccar.store.KnownCommands', 'commandData', 'positionPeriodic', 'frequency', 'commandFrequency', 'setTimezone', 'timezoneName', 'sendSms', 'commandPhone', 'commandMessage', 'sendUssd', 'sosNumber', 'commandIndex', 'setPhonebook', 'voiceMessage', 'outputControl', 'voiceMonitoring', 'enable', 'setAgps', 'setIndicator', 'configuration', 'server', 'commandServer', 'commandPort', 'setOdometer', 'modePowerSaving', 'commandEnable', 'modeDeepSleep', 'movementAlarm', 'radius', 'commandRadius', 'alarmSos', 'alarmRemove', 'alarmSpeed', 'alarmFall', 'Traccar.store.VolumeUnits', 'fullName', 'ltr', 'sharedLiterAbbreviation', 'sharedLiter', 'impGal', 'sharedGallonAbbreviation', 'usGal', 'Traccar.store.AllCommandTypes', 'api/commands', 'Traccar.store.AllCommands', 'Traccar.store.DeviceCommands', 'api/commands/send', 'Traccar.store.AllNotificationTypes', 'Traccar.store.Maintenances', 'Traccar.store.AllMaintenances', 'api/maintenances', 'Traccar.store.MaintenanceTypes', 'Traccar.store.HoursUnits', 'Traccar.model.KnownNotificator', 'api/notifications/notificators', 'window', 'Window', 'normalPadding', 'maxHeight', 'Traccar.view.dialog.RegisterController', 'ViewController', 'form', 'Ajax', 'request', 'POST', 'getValues', 'onCreateReturn', 'closeView', 'showToast', 'loginCreated', 'Traccar.view.dialog.Register', 'view', 'dialog', 'register', 'loginRegister', 'textfield', 'sharedName', 'email', 'userEmail', 'test', 'field', 'VTypes', 'password', 'userPassword', 'sharedSave', 'onCreateClick', 'sharedCancel', 'Traccar.view.dialog.LoginController', 'lookupReference', 'languageField', 'setValue', 'language', 'isValid', 'spinner-two', 'setVisible', 'getView', 'api/session', 'rememberField', 'getValue', 'util', 'Base64', 'userField', 'encode', 'passwordField', 'Cookies', 'set', 'user', 'YEAR', 'add', 'setUser', 'decode', 'responseText', 'fireViewEvent', 'loginFailed', 'clear', 'DELETE', 'location', 'href', 'locale=', 'substring', 'indexOf', 'locale', '&locale=', 'focus', 'getKey', 'ENTER', 'submitButton', 'show', 'Traccar.view.dialog.Login', 'Base', 'widget.login', 'fake-login.html', 'submitTarget', 'image', 'loginLogo', 'block', '10px\x20auto\x2025px', 'combobox', 'loginLanguage', 'Languages', 'onSelectLanguage', 'onSpecialKey', 'autocomplete=\x22on\x22\x20autocapitalize=\x22none\x22', 'checkboxfield', 'userRemember', 'component', '<iframe\x20id=\x22submitTarget\x22\x20name=\x22submitTarget\x22\x20style=\x22display:none\x22></iframe>', '<input\x20type=\x22submit\x22\x20id=\x22submitButton\x22\x20style=\x22display:none\x22>', 'loginLogin', 'onLoginClick', 'Traccar.view.MainController', 'controller.mainController', 'reportView', 'setHidden', 'getBooleanAttributePreference', 'Traccar.view.GridPanel', 'grid', 'Panel', 'customGridPanel', 'gridfilters', 'create', 'objectModel', 'store', 'getSource', 'objectDialog', 'down', 'loadRecord', 'getSelection', 'getSelectionModel', 'removeTitle', 'sharedRemoveConfirm', 'YESNO', 'sharedRemove', 'yes', 'remove', 'sync', 'rejectChanges', 'exceptions', 'toolbarEditButton', 'setDisabled', 'toolbarRemoveButton', 'windowHeight', 'fit', 'innerWidth', 'windowWidth', 'maximized', 'style', 'border-width:\x200', 'callParent', 'Traccar.view.dialog.AttributeController', 'controller.attribute', 'updateRecord', 'getRecord', 'phantom', 'getError', 'response', 'save', 'close', 'saveButton', 'value', 'valueField', 'stateValue', 'clone', 'defaultFieldConfig', 'xtype', 'customNumberField', 'allowDecimals', 'maxValue', 'minValue', 'inputValue', 'uncheckedValue', 'customcolorpicker', 'queryMode', 'local', 'editable', 'displayField', 'getXType', 'insert', 'items', 'setConfig', 'validate', 'Ext.picker.Color', 'picker', 'collapse', 'setFieldStyle', 'background-color:', 'Traccar.view.CustomNumberField', 'Number', 'beforeBodyEl', 'beforeEl', 'units', 'listeners', 'numberUnitEl', 'step', 'afterBodyEl', 'unitEl', '</div></div>', 'parseValue', 'valueToRaw', 'Traccar.view.dialog.Attribute', 'sharedAttribute', 'onValidityChange', 'nameTextField', 'xf00c@FontAwesome', 'onSaveClick', 'xf00d@FontAwesome', 'title', 'Traccar.view.edit.AttributesController', 'edit', 'controller.attributes', 'setProxy', 'Ext.data.proxy.Memory', 'undefined', 'record', 'addListener', 'dirty', 'EDIT', 'modified', 'setStore', 'Device', 'attributesStore', 'DeviceAttributes', 'Geofence', 'GeofenceAttributes', 'GroupAttributes', 'ServerAttributes', 'User', 'nameComboField', 'comboConfig', 'initDialog', 'toolbar', 'Toolbar', 'editToolbar', 'button', 'onAddClick', 'xf067@FontAwesome', 'onEditClick', 'xf040@FontAwesome', 'sharedEdit', 'onRemoveClick', 'Traccar.view.edit.Attributes', 'GridPanel', 'onSelectionChange', 'Traccar.view.dialog.BaseEditController', 'controller.baseEdit', 'Traccar.view.BaseWindow', 'sharedAttributes', 'Traccar.view.dialog.SavedCommandController', 'BaseEditController', 'removeAll', 'KnownCommands', 'KnownAttribute', 'fieldLabel', 'isDisabled', 'AllTimezones', 'fillAttributes', 'Traccar.view.permissions.BaseController', 'linkStoreName', 'load', 'Traccar.store.', 'select', 'baseObjectName', 'baseObject', 'linkObjectName', 'getId', 'api/permissions', 'JSON', 'deselect', 'base', 'checkboxmodel', 'onBeforeDeselect', 'onBeforeSelect', 'linkSavedCommandsView', 'columnWidthNormal', 'list', 'AllCommandTypes', 'notificationSms', 'SavedCommandController', 'controller.sendCommand', 'sendButton', 'commandsComboBox', 'getProxy', 'setExtraParam', 'reload', 'onTypeChange', 'newCommandFields', 'commandQueued', 'commandSent', 'Traccar.view.dialog.SendCommand', 'sendCommand', 'DeviceCommands', 'onCommandSelect', 'fieldset', 'textChannelCheckBox', 'onTextChannelChange', 'CommandTypes', 'fieldcontainer', 'tbfill', 'xf093@FontAwesome', 'sharedSend', 'showAttributesView', 'Traccar.view.ClearableComboBox', 'ComboBox', 'iconCls:\x20x-fa\x20fa-times', 'clearValue', 'Traccar.view.dialog.DeviceController', 'disabledField', 'Traccar.view.dialog.Device', 'BaseEdit', 'sharedRequired', 'deviceIdentifier', 'sharedExtra', 'clearableComboBox', 'groupParent', 'Groups', 'sharedPhone', 'deviceContact', 'DeviceImages', '<table><tr\x20valign=\x22middle\x22\x20><td><div\x20align=\x22center\x22\x20style=\x22width:40px;height:40px;\x22\x20>{[new\x20XMLSerializer().serializeToString(Traccar.DeviceImages.getImageSvg(Traccar.Style.mapColorOnline,\x20false,\x200,\x20values.key))]}</div></td><td>{name}</td></tr></table>', 'Traccar.view.permissions.Geofences', 'permissions', 'linkGeofencesView', 'sharedCalendar', 'Traccar.view.permissions.ComputedAttributes', 'linkComputedAttributesView', 'sharedDescription', 'getAttributeName', 'Traccar.view.permissions.Drivers', 'Traccar.view.edit.DevicesController', 'selectDevice', 'deselectFeature', 'onUpdateDevice', 'getUser', 'toolbarDeviceMenu', 'refresh', 'sharedNew', 'device', 'deviceCommandButton', 'updateButtons', 'selectdevice', 'fireEvent', 'getSelected', 'focusRow', 'LatestPositions', 'setPosition', 'setPov', 'deselectAll', 'filters', 'filter', 'List', 'grid.filter.arraylist', 'arraylist', 'getProperty', 'isArray', 'Traccar.view.permissions.Notifications', 'linkNotificationsView', 'notificationType', 'AllNotificationTypes', 'notificationAlways', 'notificationNotificators', 'getNotificatorString', 'Traccar.view.dialog.SelectDeviceController', 'controller.selectDevice', 'deviceField', 'api/attributes/computed/test?deviceId=', 'sharedInfoTitle', 'statusText', 'Traccar.view.dialog.SelectDevice', 'sharedDevice', 'onDeviceChange', 'Traccar.view.dialog.ComputedAttributeController', 'controller.computedAttribute', 'typeComboField', 'setReadOnly', 'Traccar.view.dialog.ComputedAttribute', 'computedAttribute', 'sharedComputedAttribute', 'textareafield', 'sharedExpression', 'xf128@FontAwesome', 'sharedCheckComputedAttribute', 'onCheckClick', 'ToolbarController', 'controller.computedAttributes', 'Traccar.view.edit.ComputedAttributes', 'computedAttributesView', 'computedAttributes', 'ComputedAttributes', 'AttributeValueTypes', 'Traccar.view.permissions.Maintenances', 'linkMaintenancesView', 'MaintenanceTypes', 'maintenanceStart', 'maintenancePeriod', 'period', 'renderAttribute', 'Traccar.view.DeviceMenuController', 'controller.deviceMenu', 'menuDriversButton', 'getVehicleFeaturesDisabled', 'menuComputedAttributesButton', 'menuCommandsButton', 'userLimit', 'menuMaintenancesButton', 'deviceMenu', 'sharedNotifications', 'notificationId', 'sharedDrivers', 'linkDriversView', 'driverId', 'sharedSavedCommands', 'commandId', 'Commands', 'sharedMaintenances', 'Traccar.view.dialog.DeviceDistance', 'Button', 'xf013@FontAwesome', 'settingsTitle', 'xf1b9@FontAwesome', 'sharedGeofences', 'onGeofencesClick', 'xf003@FontAwesome', 'menuNotificationsButton', 'sharedComputedAttributes', 'xf0ae@FontAwesome', 'onComputedAttributesClick', 'xf0ad@FontAwesome', 'onMaintenancesClick', 'sharedDeviceDistance', 'xf0e4@FontAwesome', 'menuDeviceDistanceButton', 'Traccar.view.edit.Devices', 'devicesView', 'devices', 'devices-grid', 'tbtext', 'deviceTitle', 'x-panel-header-title-default', 'toolbarAddButton', 'sharedAdd', 'onCommandClick', 'Buscar', 'Object', 'each', 'view-item-disabled\x20', 'DeviceStatuses', 'deviceModel', 'sharedDisabled', 'deviceStatus', 'deviceLastUpdate', 'Traccar.view.StateController', 'selectReport', 'onGeocode', 'updateLatest', 'clearReport', 'computedAttributesButton', 'ui.hidePositionAttributes', 'hideAttributes', 'fixTime\x20latitude\x20longitude\x20valid\x20accuracy\x20altitude\x20speed\x20course\x20address\x20protocol', 'updatePosition', 'position', 'keys', 'lookupAttribute', 'getAttributeFormatter', 'attribute.', 'Attributes', 'GET', 'api/server/geocode', 'Traccar.view.State', 'state', 'state-grid', 'toolbar-header-style', 'stateTitle', 'stateName', 'tdCls', 'positionAddress', 
'<a\x20href=\x22#\x22\x20onclick=\x22Ext.fireEvent(\x27stategeocode\x27)\x22\x20>', '</a>', 'positionAudio', 'getController', '<a\x20target=\x22_blank\x22\x20href=\x22/api/media/', '\x22\x20>', 'controller.reportConfig', 'callingPanel', 'groupField', 'eventTypeField', 'ReportEventTypes', 'getCount', 'eventType', 'chartType', 'showMarkersField', 'fromDate', 'fromDateField', 'fromTime', 'toDate', 'toDateField', 'toTime', 'toTimeField', 'periodField', 'fromContainer', 'getDate', 'setDate', 'thisWeek', 'getDay', 'setMonth', 'getMonth', 'setHours', 'fromTimeField', 'Time', 'customTimeField', 'timeFormat12', 'timeFormat24', 'Traccar.view.dialog.ReportConfig', 'reportConfig', 'reportConfigure', 'reportDevice', 'tagfield', 'reportGroup', 'formFieldWidth', 'reportEventTypes', 'reportChartType', 'ReportChartTypes', 'reportShowMarkers', 'checkbox', 'reportPeriod', 'ReportPeriods', 'onPeriodChange', 'vbox', 'weekStartDay', 'dateFormat', 'getTime', 'toContainer', 'reportTo', 'datefield', 'Traccar.view.ReportController', 'controller.report', 'showSingleEvent', 'loadRelatedPositions', 'loadRoute', 'showReports', 'getComponent', 'chart', 'routeColumns', 'summaryColumns', 'dataIndex', 'match', 'hidden', 'tripsColumns', 'spentFuel|driverUniqueId', 'stopsColumns', 'engineHours|spentFuel', 'reportTypeField', 'chartTypeField', 'showMarkers', 'reportProgress', 'showButton', 'exportButton', 'getGrid', 'getFullYear', 'getSeconds', 'getMilliseconds', 'getHours', 'getMinutes', 'reference', 'getChart', 'setSeries', 'toISOString', 'url', 'downloadFile', 'selectreport', 'ReportTrip', 'selectTrip', 'Event', 'selectPositionRelated', 'Position', 'stops', 'ReportRoute', 'Positions', 'getAxes', 'setTitle', 'collect', 'Ext.data.ChainedStore', 'line', 'chartMarkerHighlightScaling', 'circle', 'chartMarkerRadius', 'Events', 'ReportEvents', 'isMobile', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'getResponseHeader', 'Content-Disposition', 'Content-Type', 'navigator', 'msSaveBlob', 'URL', 'webkitURL', 'append', 'revokeObjectURL', 'reconfigure', 'getLayout', 'setActiveItem', 'eventsColumns', 'summary', 'ReportStops', 'commit', 'reportDeviceName', 'positionValid', 'positionFixTime', 'positionLatitude', 'positionLongitude', 'positionAltitude', '<a\x20href=\x22#\x22\x20onclick=\x22Ext.fireEvent(\x27routegeocode\x27,\x20', ')\x22\x20>', 'sharedShowAddress', 'datecolumn', 'sharedMaintenance', 'reportAverageSpeed', 'reportMaximumSpeed', 'reportEngineHours', 'reportSpentFuel', 'reportStartTime', 'reportEndTime', 'reportEndAddress', 'sharedDistance', 'reportDuration', 'sharedDriver', 'Traccar.view.Report', 'panel', 'report', 'reportTitle', 'sharedHide', 'hideReports', 'ReportTypes', 'onConfigureClick', 'reportShow', 'onReportClick', 'reportClear', 'onClearClick', 'card', 'cartesian', 'chartitemevents', 'time', 'bottom', 'onChartMarkerClick', 'chartPadding', 'controller.events', 'deselectEvent', 'onAddEvent', 'refreshPeriod', 'hideEventsButton', 'EventPositions', 'scrollToLastButton', 'pressed', 'scrollBy', 'selectevent', 'removeEventButton', 'Traccar.view.Events', 'eventsView', 'events-grid', 'reportEvents', 'xf063@FontAwesome', 'onScrollToLastClick', 'events-scroll-to-last-button', 'soundButton', 'xf0a2@FontAwesome', 'sharedSound', 'sound-button', 'xf014@FontAwesome', 'xf1f8@FontAwesome', 'onHideEvents', 'Traccar.view.map.BaseMap', 'baseMapView', 'Tile', 'Mapa\x20Padrão', 'source', 'Mapa\x20Google\x20Satellite', 'googleR', 'XYZ', 'https://mt0.google.com/vt/lyrs=s&hl=en&x={x}&y={y}&z={z}&s=Ga', 'Mapa\x20Google\x20Road', 'googleS', 'https://mt0.google.com/vt/lyrs=m&hl=en&x={x}&y={y}&z={z}&s=Ga', 'Mapa\x20Google\x20Tráfego', 'googleSN', 'https://mt0.google.com/vt/lyrs=m,traffic&hl=en&x={x}&y={y}&z={z}&s=Ga', 'layer', 'Mapa\x20Carto', 'carto', 'https://cartodb-basemaps-{a-d}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', '&copy;\x20<a\x20href=\x22http://www.openstreetmap.org/copyright\x22>OpenStreetMap</a>\x20contributors,\x20&copy;\x20<a\x20href=\x22https://carto.com/attributions\x22>CARTO</a>', 'Mapa\x20OSM', 'OSM', '{y}', '{z}', 'tilegrid', 'TileGrid', 'EPSG:4326', 'BD-MC', '&copy;\x20<a\x20href=\x22http://map.baidu.com/\x22>Baidu</a>', 'Mapa\x20Yandex', 'EPSG:3395', '&copy;\x20<a\x20href=\x22https://yandex.com/maps/\x22>Yandex</a>', 'mapDefaultLat', 'mapDefaultLon', 'mapView', 'proj', 'fromLonLat', 'body', 'control', 'LayerSwitcher', 'addControl', 'KML', 'dom', 'tabIndex', 'ScaleLine', 'nautical', 'getTarget', 'pointermove', 'forEachFeatureAtPixel', 'pixel', 'pointer', 'Overlay', 'Popup', 'addOverlay', 'nominatim', 'pt_BR', 'getLayer', 'addresschosen', 'info', 'coordinate', 'formatted', 'click', 'getFeaturesAtPixel', 'selectfeature', 'deselectfeature', 'initMap', 'updateSize', 'defs', '+proj=merc\x20+lon_0=0\x20+units=m\x20+ellps=clrk66\x20+no_defs', '+proj=merc\x20+lon_0=0\x20+k=1\x20+x_0=0\x20+y_0=0\x20+datum=WGS84\x20+units=m\x20+no_defs', 'setExtent', 'Traccar.DeviceImages', 'default', 'svg', 'cloneDocument', 'documentElement', 'getAttribute', 'width', 'height', 'fillId', 'fill', 'rotate(', 'rotateId', 'setAttribute', 'transform', 'mapScaleSelected', 'scale(', 'mapScaleNormal', 'scaleId', 'viewBox', 'implementation', 'namespaceURI', 'importNode', 'appendChild', 'formatSrc', 'angle', 'Traccar.view.map.MapMarkerController', 'controller.mapMarker', 'deselectDevice', 'updateDevice', 'removeDevice', 'updateVisibleDevices', 'addReportMarkers', 'loadReport', 'clearEvent', 'latestMarkers', 'reportMarkers', 'accuracyCircles', 'liveRoutes', 'liveRouteLength', 'asArray', 'mapGeofenceColor', 'Fill', 'Stroke', 'mapGeofenceWidth', 'Text', 'mapGeofenceTextColor', 'mapTextStrokeWidth', 'mapColorOffline', 'mapColorUnknown', 'getStyle', 'getImage', 'getDeviceColor', 'updateDeviceMarker', 'changed', 'getText', 'setText', 'getFeatureById', 'removeFeature', 'updateAccuracy', 'updateLatestMarker', 'updateLiveRoute', 'getMapView', 'getProjection', 'getPointResolution', 'METERS_PER_UNIT', 'getResolution', 'getGeometry', 'setCenter', 'setRadius', 'Feature', 'geom', 'setStyle', 'getAreaStyle', 'mapAccuracyColor', 'setId', 'isDeviceVisible', 'getAccuracySource', 'rotateMarker', 'setGeometry', 'getLatestMarker', 'getMarkersSource', 'addFeature', 'selectedMarker', 'shift', 'setCoordinates', 'getRouteStyle', 'getRouteSource', 'appendCoordinate', 'Point', 'getReportMarker', 'zoomToAllPositions', 'selectMarker', 'mapRouteWidth', 'getImageIcon', 'mapTextStrokeColor', 'getSize', 'mapTextOffset', 'mapTextFont', 'getMarkerStyle', 'getReportColor', 'setOffsetY', 'setImage', 'resizeMarker', 'setZIndex', 'selectZoom', 'getZoom', 'setZoom', 'addReportMarker', 'min', 'max', 'updateDeviceVisibility', 'contains', 'getLiveRouteSource', 'Traccar.GeofenceConverter', 'lastIndexOf', 'POLYGON', 'getCenter', 'getRadius', 'haversineDistance', 'CIRCLE\x20(', 'POLYGON((', 'getCoordinates', 'LINESTRING\x20(', 'controller.map', 'getMapState', 'zoomToAllDevices', 'updateGeofences', 'btnMegaMenu', 'settingsMenuBoolRef', 'pagamentoML', 'open', '_blank', '../../../config/config.json', 'linkPagamento', 'linkContatWhats', 'maps', 'street-view', 'absolute', '0px', 'cssFloat', 'right', '55px', 'display', 'none', 'getLiveRouteLayer', 'showGeofencesButton', 'wktToGeometry', 'getGeofencesSource', 'getData', 'controller.mapPicker', 'setMapState', 'mapstaterequest', 'MapPickerController', 'controller.user', 'adminField', 'deviceLimitField', 'userLimitField', 'selfEdit', 'readonlyField', 'expirationTimeField', 'deviceReadonlyField', 'limitCommandsField', 'editEmail', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', 'symbols', 'tokenField', 'Users', 'Traccar.view.dialog.User', 'settingsUser', 'editNome', 'sharedPreferences', 'mapLayer', 'MapTypes', 'numberfield', 'serverZoom', 'settingsTwelveHourFormat', 'settingsCoordinateFormat', 'mapPoiLayer', 'userAdmin', 'serverReadonly', 'userDeviceReadonly', 'userLimitCommands', 'userExpirationTime', 'userDeviceLimit', 'userToken', 'iconCls:\x20x-fa\x20fa-refresh', 'generateToken', 'xf041@FontAwesome', 'sharedGetMapState', 'testNotification', 'testNotificationButton', 'sharedTestNotification', 'mapPicker', 'serverTitle', 'mapBingKey', 'serverForceSettings', 'sharedPermissions', 'registration', 'serverRegistration', 'Traccar.view.permissions.Devices', 'linkDevicesView', 'groupDialog', 'Traccar.view.permissions.Groups', 'linkGroupsView', 'Traccar.view.permissions.Calendars', 'linkCalendarsView', 'Traccar.view.permissions.Users', 'linkUsersView', 'Traccar.view.edit.UsersController', 'controller.users', 'Traccar.model.User', 'userUsersButton', 'userAttributesButton', 'userCalendarsButton', 'ui.disableCalendars', 'userCommandsButton', 'userMaintenancesButton', 'userId', 'settingsGroups', 'AllNotifications', 'Notifications', 'settingsUsers', 'managedUserId', 'AllComputedAttributes', 'AllCommands', 'userGroupsButton', 'userGeofencesButton', 'userNotificationsButton', 'userDriversButton', 'Traccar.view.edit.Users', 'usersView', 'users', 'xf21d@FontAwesome', 'onDevicesClick', 'userDevicesButton', 'xf248@FontAwesome', 'xf0c0@FontAwesome', 'onNotificationsClick', 'onCalendarsClick', 'xf073@FontAwesome', 'sharedCalendars', 'onAttributesClick', 'onDriversClick', 'onCommandsClick', 'Filter', 'Traccar.view.dialog.Group', 'Traccar.view.edit.GroupsController', 'toolbarDriversButton', 'toolbarCommandsButton', 'toolbarMaintenancesButton', 'attributeId', 'toolbarGeofencesButton', 'groups', 'toolbarAttributesButton', 'toolbarNotificationsButton', 'Traccar.view.map.GeofenceMapController', 'controller.geofenceMap', 'getFeatures', 'getLength', 'pop', 'savearea', 'GeofenceConverter', 'addInteraction', 'BaseMap', 'geofenceMap', 'GeofenceTypes', 'onTypeSelect', 'onCancelClick', 'features', 'Collection', 'controller', 'Vector', 'setMap', 'condition', 'shiftKeyOnly', 'draw', 'interaction', 'drawstart', 'removeInteraction', 'Traccar.view.dialog.GeofenceController', 'controller.geofence', 'saveArea', 'calendarCombo', 'areaField', 'sharedArea', 'geofenceMapView', 'Traccar.view.dialog.Geofence', 'onAreaClick', 'Traccar.view.edit.GeofencesController', 'Traccar.view.edit.Geofences', 'geofencesView', 'geofences', 'Traccar.view.edit.DriversController', 'Traccar.view.dialog.Driver', 'Traccar.view.edit.Drivers', 'driversView', 'drivers', 'Traccar.view.dialog.NotificationController', 'controller.notification', 'Traccar.view.dialog.Notification', 'notification', 'sharedNotification', 'Traccar.view.edit.NotificationsController', 'Traccar.view.edit.Notifications', 'notificationsView', 'notifications', 'AllNotificators', 'Traccar.view.StatisticsController', 'controller.statistics', 'Statistics', 'Traccar.view.Statistics', 'statisticsView', 'statistics', 'reportFrom', 'statisticsCaptureTime'];
(function (_0x1ea891, _0x5d81cb) {
    var _0x2a51aa = function (_0x1f66b4) {
        while (--_0x1f66b4) {
            _0x1ea891['push'](_0x1ea891['shift']());
        }
    };
    _0x2a51aa(++_0x5d81cb);
}(_0xbcfd, 0x101));
var _0xc11a = function (_0x5a16bd, _0x79c6f2) {
    _0x5a16bd = _0x5a16bd - 0x0;
    var _0x3a8953 = _0xbcfd[_0x5a16bd];
    return _0x3a8953;
};
// tudo isso aqui de cima é para deletar quando precisar.

Ext.define('Traccar.view.TouchFix62', { override: 'Ext.dom.Element' }, function () {
    var additiveEvents = this.prototype.additiveEvents, eventMap = this.prototype.eventMap; Ext.supports.TouchEvents && 52 <= Ext.firefoxVersion && Ext.os.is.Desktop && (eventMap.touchstart = 'mousedown', eventMap.touchmove = 'mousemove', eventMap.touchend = 'mouseup', eventMap.touchcancel = 'mouseup', eventMap.click = 'click', eventMap.dblclick = 'dblclick', additiveEvents.mousedown = 'mousedown', additiveEvents.mousemove = 'mousemove', additiveEvents.mouseup = 'mouseup',
        additiveEvents.touchstart = 'touchstart', additiveEvents.touchmove = 'touchmove', additiveEvents.touchend = 'touchend', additiveEvents.touchcancel = 'touchcancel', additiveEvents.pointerdown = 'mousedown', additiveEvents.pointermove = 'mousemove', additiveEvents.pointerup = 'mouseup', additiveEvents.pointercancel = 'mouseup')
}); // eu coloquei essa parte de cima view.TouchFix62

Ext.define('Traccar.Style', {
    singleton: !0,
    refreshPeriod: 6E4, //ea60
    reconnectTimeout: 6E4, //ea60
    reportTimeout: 12E4, //1d4c0
    normalPadding: 10,
    windowWidth: 800, //320
    windowHeight: 600, //258
    formFieldWidth: 275, //113
    dateTimeFormat24: 'Y-m-d H:i:s', // 'd/m/Y H:i:s',
    dateTimeFormat12: 'Y-m-d g:i:s a', // 'd/m/Y g:i:s a'
    timeFormat24: 'H:i',
    timeFormat12: 'g:i a',
    dateFormat: 'Y-m-d', // 'd/m/Y'
    weekStartDay: 1,
    deviceWidth: 400, // 190
    toastWidth: 300, // 12c
    reportHeight: 250, // fa
    columnWidthNormal: 100, // 64
    mapDefaultLat: 48.8567,
    mapDefaultLon: 2.3508,
    mapDefaultZoom: 4,
    mapRouteColor: '#F06292 #BA68C8 #4DD0E1 #4DB6AC #FF8A65 #A1887F'.split(' '),
    mapRouteWidth: 5,
    mapTextColor: 'rgba(50, 50, 50, 1.0)',
    mapTextStrokeColor: 'rgba(255, 255, 255, 1.0)',
    mapTextStrokeWidth: 2,
    mapTextOffset: 2,
    mapTextFont: 'bold 12px sans-serif',
    mapColorOnline: 'rgba(77, 250, 144, 1.0)',
    mapColorUnknown: 'rgba(255, 162, 173, 1.0)',
    mapColorOffline: 'rgba(255, 162, 173, 1.0)',
    mapScaleNormal: 1, mapScaleSelected: 1.5,
    mapMaxZoom: 18, //12
    mapDelay: 500, // 1f4
    mapAccuracyColor: 'rgba(96, 96, 96, 1.0)',
    mapGeofenceTextColor: 'rgba(14, 88, 141, 1.0)',
    mapGeofenceColor: 'rgba(21, 127, 204, 1.0)',
    mapGeofenceOverlayOpacity: .2,
    mapGeofenceWidth: 5,
    mapGeofenceRadius: 9,
    coordinatePrecision: 6,
    numberPrecision: 2,
    reportGridStyle: 'borderTop: 1px solid lightgray',
    chartPadding: '20 40 10 10',
    chartMarkerRadius: 3,
    chartMarkerHighlightScaling: 1.5
});

Ext.define('Traccar.AttributeFormatter', {
    singleton: !0, numberFormatterFactory: function (precision, suffix) { return function (value) { return void 0 !== value ? Number(value.toFixed(precision)) + ' ' + suffix : null } }, coordinateFormatter: function (key, value) { return Ext.getStore('CoordinateFormats').formatValue(key, value, Traccar.app.getPreference('coordinateFormat')) }, speedFormatter: function (value) { return Ext.getStore('SpeedUnits').formatValue(value, Traccar.app.getAttributePreference('speedUnit')) }, speedConverter: function (value) {
        return Ext.getStore('SpeedUnits').convertValue(value,
            Traccar.app.getAttributePreference('speedUnit'))
    }, courseFormatter: function (value) { return 'N NE E SE S SW W NW'.split(' ')[Math.floor(value / 45)] }, distanceFormatter: function (value) { return Ext.getStore('DistanceUnits').formatValue(value, Traccar.app.getAttributePreference('distanceUnit')) }, distanceConverter: function (value) { return Ext.getStore('DistanceUnits').convertValue(value, Traccar.app.getAttributePreference('distanceUnit')) }, volumeFormatter: function (value) {
        return Ext.getStore('VolumeUnits').formatValue(value,
            Traccar.app.getAttributePreference('volumeUnit'))
    }, volumeConverter: function (value) { return Ext.getStore('VolumeUnits').convertValue(value, Traccar.app.getAttributePreference('volumeUnit')) }, hoursFormatter: function (value) { return Ext.getStore('HoursUnits').formatValue(value, 'h') }, hoursConverter: function (value) { return Ext.getStore('HoursUnits').convertValue(value, 'h') }, durationFormatter: function (value) { return Ext.getStore('HoursUnits').formatValue(value, 'h', !0) }, deviceIdFormatter: function (value) {
        var store;
        return 0 !== value ? (store = Ext.getStore('AllDevices'), 0 === store.getTotalCount() && (store = Ext.getStore('Devices')), (value = store.getById(value)) ? value.get('name') : '') : null
    }, groupIdFormatter: function (value) { var group; return 0 !== value ? (group = Ext.getStore('AllGroups'), 0 === group.getTotalCount() && (group = Ext.getStore('Groups')), (group = group.getById(value)) ? group.get('name') : value) : null }, geofenceIdFormatter: function (value) {
        var store; return 0 !== value ? (store = Ext.getStore('AllGeofences'), 0 === store.getTotalCount() &&
            (store = Ext.getStore('Geofences')), (value = store.getById(value)) ? value.get('name') : '') : null
    }, calendarIdFormatter: function (value) { var store; return 0 !== value ? (store = Ext.getStore('AllCalendars'), 0 === store.getTotalCount() && (store = Ext.getStore('Calendars')), (value = store.getById(value)) ? value.get('name') : '') : null }, driverUniqueIdFormatter: function (value) {
        var driver; return 0 !== value ? (driver = Ext.getStore('AllDrivers'), 0 === driver.getTotalCount() && (driver = Ext.getStore('Drivers')), (driver = driver.findRecord('uniqueId',
            value, 0, !1, !0, !0)) ? value + ' (' + driver.get('name') + ')' : value) : null
    }, maintenanceIdFormatter: function (value) { var store; return 0 !== value ? (store = Ext.getStore('AllMaintenances'), 0 === store.getTotalCount() && (store = Ext.getStore('Maintenances')), (value = store.getById(value)) ? value.get('name') : '') : null }, lastUpdateFormatter: function (value) {
        var interval; if (value) {
            value = Math.floor((new Date - value) / 1E3); 0 > value && (value = 0); interval = Math.floor(value / 86400); if (1 < interval) return interval + ' ' + Strings.sharedDays; interval =
                Math.floor(value / 3600); return 1 < interval ? interval + ' ' + Strings.sharedHours : Math.floor(value / 60) + ' ' + Strings.sharedMinutes
        } return null
    }, commandTypeFormatter: function (value) { var name = Strings['command' + value.charAt(0).toUpperCase() + value.slice(1)]; return name ? name : value }, defaultFormatter: function (value) {
        return 'number' === typeof value ? Number(value.toFixed(Traccar.Style.numberPrecision)) : 'boolean' === typeof value ? value ? Ext.Msg.buttonText.yes : Ext.Msg.buttonText.no : value instanceof Date ? Traccar.app.getPreference('twelveHourFormat',
            !1) ? Ext.Date.format(value, Traccar.Style.dateTimeFormat12) : Ext.Date.format(value, Traccar.Style.dateTimeFormat24) : value
    }, getFormatter: function (key) {
        var self = this; switch (key) {
            case 'latitude': case 'longitude': return function (value) { return self.coordinateFormatter(key, value) }; case 'speed': return this.speedFormatter; case 'course': return this.courseFormatter; case 'distance': case 'accuracy': return this.distanceFormatter; case 'duration': return this.durationFormatter; case 'deviceId': return this.deviceIdFormatter;
            case 'groupId': return this.groupIdFormatter; case 'geofenceId': return this.geofenceIdFormatter; case 'maintenanceId': return this.maintenanceIdFormatter; case 'calendarId': return this.calendarIdFormatter; case 'lastUpdate': return this.lastUpdateFormatter; case 'spentFuel': return this.volumeFormatter; case 'driverUniqueId': return this.driverUniqueIdFormatter; case 'commandType': return this.commandTypeFormatter; default: return this.defaultFormatter
        }
    }, getConverter: function (key) {
        switch (key) {case 'speed': return this.speedConverter;case 'distance': case 'accuracy': return this.distanceConverter; case 'spentFuel': return this.volumeConverter; default: return function (value) { return value }}
    }, getAttributeFormatter: function (key) {switch (Ext.getStore('PositionAttributes').getAttributeDataType(key)) {case 'distance': return this.distanceFormatter; case 'speed': return this.speedFormatter; case 'driverUniqueId': return this.driverUniqueIdFormatter; case 'voltage': return this.numberFormatterFactory(Traccar.Style.numberPrecision, Strings.sharedVoltAbbreviation);
            case 'percentage': return this.numberFormatterFactory(Traccar.Style.numberPrecision, '\x26#37;'); case 'temperature': return this.numberFormatterFactory(Traccar.Style.numberPrecision, '\x26deg;C'); case 'volume': return this.volumeFormatter; case 'hours': return this.hoursFormatter; case 'consumption': return this.numberFormatterFactory(Traccar.Style.numberPrecision, Strings.sharedLiterPerHourAbbreviation); default: return this.defaultFormatter}
    }, getAttributeConverter: function (key) {switch (Ext.getStore('PositionAttributes').getAttributeDataType(key)) {case 'distance': return this.distanceConverter;case 'speed': return this.speedConverter; case 'volume': return this.volumeConverter; case 'hours': return this.hoursConverter; default: return function (value) { return value }}}, 
    renderAttribute: function (value, attribute) {return attribute && 'speed' === attribute.get('dataType') ? Ext.getStore('SpeedUnits').formatValue(value, Traccar.app.getAttributePreference('speedUnit', 'kn'), !0) : attribute && 'distance' === attribute.get('dataType') ? Ext.getStore('DistanceUnits').formatValue(value, Traccar.app.getAttributePreference('distanceUnit','km'), !0) : attribute && 'hours' === attribute.get('dataType') ? Ext.getStore('HoursUnits').formatValue(value, 'h', !0) : value}});



Ext.define('Traccar.model.Server', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'registration', type: 'boolean' }, { name: 'readonly', type: 'boolean' }, { name: 'deviceReadonly', type: 'boolean' }, { name: 'limitCommands', type: 'boolean' }, { name: 'map', type: 'string' }, { name: 'bingKey', type: 'string' }, { name: 'mapUrl', type: 'string' }, { name: 'latitude', type: 'float' }, { name: 'longitude', type: 'float' }, { name: 'zoom', type: 'int' }, { name: 'twelveHourFormat', type: 'boolean' }, { name: 'forceSettings', type: 'boolean' },
    { name: 'coordinateFormat', type: 'string' }, { name: 'poiLayer', type: 'string' }, { name: 'attributes' }], proxy: { type: 'ajax', url: 'api/server', actionMethods: { update: 'PUT' }, writer: { type: 'json', writeAllFields: !0 } }
});
Ext.define('Traccar.model.User', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'login', type: 'string' }, { name: 'email', type: 'string' }, { name: 'password', type: 'string' }, { name: 'phone', type: 'string' }, { name: 'readonly', type: 'boolean' }, { name: 'administrator', type: 'boolean' }, { name: 'map', type: 'string' }, { name: 'latitude', type: 'float' }, { name: 'longitude', type: 'float' }, { name: 'zoom', type: 'int' }, { name: 'twelveHourFormat', type: 'boolean' }, {
        name: 'coordinateFormat',
        type: 'string'
    }, { name: 'disabled', type: 'boolean' }, { name: 'expirationTime', type: 'date', dateFormat: 'c' }, { name: 'deviceLimit', type: 'int' }, { name: 'userLimit', type: 'int' }, { name: 'deviceReadonly', type: 'boolean' }, { name: 'limitCommands', type: 'boolean' }, { name: 'poiLayer', type: 'string' }, { name: 'token', type: 'string' }, { name: 'attributes' }], proxy: { type: 'rest', url: 'api/users', writer: { type: 'json', writeAllFields: !0 } }
});
Ext.define('Traccar.model.Group', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'groupId', type: 'int' }, { name: 'attributes' }] });
Ext.define('Traccar.model.Device', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'uniqueId', type: 'string' }, { name: 'phone', type: 'string', allowNull: !0 }, { name: 'model', type: 'string', allowNull: !0 }, { name: 'contact', type: 'string', allowNull: !0 }, { name: 'category', type: 'string', allowNull: !0 }, { name: 'status', type: 'string', allowNull: !0 }, { name: 'lastUpdate', type: 'date', dateFormat: 'c' }, { name: 'groupId', type: 'int' }, { name: 'disabled', type: 'boolean' }, { name: 'geofenceIds' },
    { name: 'attributes' }]
});
Ext.define('Traccar.model.Position', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'protocol', type: 'string' }, { name: 'deviceId', type: 'int' }, { name: 'serverTime', type: 'date', dateFormat: 'c' }, { name: 'deviceTime', type: 'date', dateFormat: 'c' }, { name: 'fixTime', type: 'date', dateFormat: 'c' }, { name: 'valid', type: 'boolean' }, { name: 'accuracy', type: 'float', convert: Traccar.AttributeFormatter.getConverter('accuracy') }, { name: 'latitude', type: 'float' }, { name: 'longitude', type: 'float' }, {
        name: 'altitude',
        type: 'float'
    }, { name: 'speed', type: 'float', convert: Traccar.AttributeFormatter.getConverter('speed') }, { name: 'course', type: 'float' }, { name: 'address', type: 'string' }, { name: 'attributes' }]
}); Ext.define('Traccar.model.Attribute', { extend: Ext.data.Model, fields: [{ name: 'priority', type: 'int' }, { name: 'name', type: 'string' }, { name: 'value' }, { name: 'attribute', type: 'string' }] });
Ext.define('Traccar.model.Command', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'description', type: 'string' }, { name: 'deviceId', type: 'int' }, { name: 'type', type: 'string' }, { name: 'textChannel', type: 'boolean' }, { name: 'attributes' }] });
Ext.define('Traccar.model.Event', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'type', type: 'string' }, { name: 'serverTime', type: 'date', dateFormat: 'c' }, { name: 'deviceId', type: 'int' }, { name: 'positionId', type: 'int' }, { name: 'geofenceId', type: 'int' }, { name: 'maintenanceId', type: 'int' }, {
        name: 'text', convert: function (v, rec) {
            var geofence; 'commandResult' === rec.get('type') ? v = Strings.eventCommandResult + ': ' + rec.get('attributes').result : 'alarm' === rec.get('type') ? (v = rec.get('attributes').alarm,
                v = 'alarm' + v.charAt(0).toUpperCase() + v.slice(1), v = Strings[v] || v) : v = 'textMessage' === rec.get('type') ? Strings.eventTextMessage + ': ' + rec.get('attributes').message : 'driverChanged' === rec.get('type') ? Strings.eventDriverChanged + ': ' + Traccar.AttributeFormatter.driverUniqueIdFormatter(rec.get('attributes').driverUniqueId) : Traccar.app.getEventString(rec.get('type')); rec.get('geofenceId') && (geofence = Ext.getStore('Geofences').getById(rec.get('geofenceId'))) && (v += ' "' + geofence.get('name') + '"'); rec.get('maintenanceId') &&
                    (rec = Ext.getStore('Maintenances').getById(rec.get('maintenanceId'))) && (v += ' "' + rec.get('name') + '"'); return v
        }, depends: ['type', 'attributes', 'geofenceId', 'maintenanceId']
    }, { name: 'attributes' }]
}); 
Ext.define('Traccar.model.Geofence', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'description', type: 'string' }, { name: 'area', type: 'string' }, { name: 'calendarId', type: 'int' }, { name: 'attributes' }] });
Ext.define('Traccar.model.Notification', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'type', type: 'string' }, { name: 'always', type: 'bool' }, { name: 'attributes' }, { name: 'notificators', type: 'string' }, { name: 'calendarId', type: 'int' }] });

Ext.define('Traccar.model.ReportSummary', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'deviceId', type: 'int' }, { name: 'deviceName', type: 'string' }, { name: 'maxSpeed', type: 'float', convert: Traccar.AttributeFormatter.getConverter('speed') }, { name: 'averageSpeed', type: 'float', convert: Traccar.AttributeFormatter.getConverter('speed') }, { name: 'distance', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') }, { name: 'startOdometer', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') },
    { name: 'endOdometer', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') }, { name: 'engineHours', type: 'int' }, { name: 'spentFuel', type: 'float', convert: Traccar.AttributeFormatter.getConverter('spentFuel') }]
});
Ext.define('Traccar.model.ReportTrip', {
    extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'deviceId', type: 'int' }, { name: 'deviceName', type: 'string' }, { name: 'maxSpeed', type: 'float', convert: Traccar.AttributeFormatter.getConverter('speed') }, { name: 'averageSpeed', type: 'float', convert: Traccar.AttributeFormatter.getConverter('speed') }, { name: 'distance', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') }, { name: 'startOdometer', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') },
    { name: 'endOdometer', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') }, { name: 'duration', type: 'int' }, { name: 'startTime', type: 'date', dateFormat: 'c' }, { name: 'startAddress', type: 'string' }, { name: 'endTime', type: 'date', dateFormat: 'c' }, { name: 'endAddress', type: 'string' }, { name: 'spentFuel', type: 'float', convert: Traccar.AttributeFormatter.getConverter('spentFuel') }, { name: 'driverUniqueId', type: 'string' }, { name: 'driverName', type: 'string' }]
});
Ext.define('Traccar.model.ReportStop', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'deviceId', type: 'int' }, { name: 'deviceName', type: 'string' }, { name: 'duration', type: 'int' }, { name: 'startTime', type: 'date', dateFormat: 'c' }, { name: 'startOdometer', type: 'float', convert: Traccar.AttributeFormatter.getConverter('distance') }, { name: 'address', type: 'string' }, { name: 'endTime', type: 'date', dateFormat: 'c' }, { name: 'engineHours', type: 'int' }, { name: 'positionId', type: 'int' }, { name: 'spentFuel', type: 'float', convert: Traccar.AttributeFormatter.getConverter('spentFuel') }] });

//testar com novos e ver se funciona - ver esses testes
//Ext['define']('Traccar.model.ReportSummary', { 'extend': Ext['data']['Model'],'identifier': 'negative','fields': [{    'name': 'deviceId',    'type': 'int'}, {    'name': 'deviceName',    'type': 'string'}, {    'name': 'maxSpeed',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('speed')}, {    'name': 'averageSpeed',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('speed')}, {    'name': 'distance',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('distance')}, {    'name': 'engineHours',    'type': 'int'}, {    'name': 'spentFuel',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('spentFuel')}] });
//Ext['define']('Traccar.model.ReportTrip', {'extend': Ext['data']['Model'],'identifier': 'negative','fields': [{    'name': 'deviceId',    'type': 'int'}, {    'name': 'deviceName',    'type': 'string'}, {    'name': 'maxSpeed',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('speed')}, {    'name': 'averageSpeed',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('speed')}, {    'name': 'distance',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('distance')}, {    'name': 'duration',    'type': 'int'}, {    'name': 'startTime',    'type': 'date',    'dateFormat': 'c'}, {    'name': 'startAddress',    'type': 'string'}, {    'name': 'endTime',    'type': 'date',    'dateFormat': 'c'}, {    'name': 'endAddress',    'type': 'string'}, {    'name': 'spentFuel',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('spentFuel')}, {    'name': 'driverUniqueId',    'type': 'string'}, {    'name': 'driverName',    'type': 'string'}] });
// esse é diferente do de cima ver - Ext['define']('Traccar.model.ReportStop', {'extend': Ext['data']['Model'],'identifier': 'negative','fields': [{    'name': 'deviceId',    'type': 'int'}, {    'name': 'deviceName',    'type': 'string'}, {    'name': 'duration',    'type': 'int'}, {    'name': 'startTime',    'type': 'date',    'dateFormat': 'c'},  {    'name': 'address',    'type': 'string'}, {    'name': 'endTime',    'type': 'date',    'dateFormat': 'c'}, {    'name': 'engineHours',    'type': 'int'}, {    'name': 'positionId',    'type': 'int'}, {    'name': 'spentFuel',    'type': 'float',    'convert': Traccar['AttributeFormatter']['getConverter']('spentFuel')}] });

Ext.define('Traccar.model.Calendar', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'data' }, { name: 'attributes' }] }); 
Ext.define('Traccar.model.KnownAttribute', { extend: Ext.data.Model, idProperty: 'key', fields: [{ name: 'key', type: 'string' }, { name: 'name', type: 'string' }, { name: 'valueType', type: 'string' }, { name: 'dataType', type: 'string' }] });
//Ext['define']('Traccar.model.KnownAttribute', {'extend': Ext['data']['Model'],'idProperty': 'key','fields': [{    'name': 'key',    'type': 'string'}, {    'name': 'name',    'type': 'string'}, {    'name': 'valueType',    'type': 'string'}, {    'name': 'hoursConverter',    'type': 'string'}]});
Ext.define('Traccar.model.Driver', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'uniqueId', type: 'string' }, { name: 'attributes' }] }); 
Ext.define('Traccar.model.KnownCommand', { extend: Ext.data.Model, idProperty: 'type', fields: [{ name: 'type', type: 'string' }, { name: 'name', convert: function (v, rec) { return Traccar.AttributeFormatter.getFormatter('commandType')(rec.get('type')) }, depends: ['type'] }, { name: 'parameters' }] });
Ext.define('Traccar.model.KnownNotification', { extend: Ext.data.Model, idProperty: 'type', fields: [{ name: 'type', type: 'string' }, { name: 'name', convert: function (v, rec) { return Traccar.app.getEventString(rec.get('type')) }, depends: ['type'] }] }); 
Ext.define('Traccar.model.Maintenance', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'name', type: 'string' }, { name: 'type', type: 'string' }, { name: 'start', type: 'float' }, { name: 'period', type: 'float' }, { name: 'attributes' }] });
Ext.define('Traccar.store.Groups', { extend: Ext.data.Store, model: 'Traccar.model.Group', proxy: { type: 'rest', url: 'api/groups', writer: { writeAllFields: !0 } } }); Ext.define('Traccar.store.Devices', { extend: Ext.data.Store, model: 'Traccar.model.Device', proxy: { type: 'rest', url: 'api/devices', writer: { writeAllFields: !0 } } });  Ext.define('Traccar.store.AllGroups', { extend: Ext.data.Store, model: 'Traccar.model.Group', proxy: { type: 'rest', url: 'api/groups', extraParams: { all: !0 } } });
Ext.define('Traccar.store.AllDevices', { extend: Ext.data.Store, model: 'Traccar.model.Device', proxy: { type: 'rest', url: 'api/devices', extraParams: { all: !0 } } }); Ext.define('Traccar.store.Positions', { extend: Ext.data.Store, model: 'Traccar.model.Position', proxy: { type: 'rest', url: 'api/positions', headers: { Accept: 'application/json' } } }); Ext.define('Traccar.store.LatestPositions', { extend: Ext.data.Store, model: 'Traccar.model.Position' });
Ext.define('Traccar.store.EventPositions', { extend: Ext.data.Store, model: 'Traccar.model.Position', trackRemoved: !1, proxy: { type: 'rest', url: 'api/positions', headers: { Accept: 'application/json' } } }); Ext.define('Traccar.store.Users', { extend: Ext.data.Store, model: 'Traccar.model.User', proxy: { type: 'rest', url: 'api/users', writer: { writeAllFields: !0 } } }); Ext.define('Traccar.store.Attributes', { extend: Ext.data.Store, model: 'Traccar.model.Attribute', sorters: [{ property: 'priority' }] });
Ext.define('Traccar.store.MapTypes', { extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'carto', name: Strings.mapCarto }, { key: 'osm', name: Strings.mapOsm }, { key: 'bingRoad', name: Strings.mapBingRoad }, { key: 'bingAerial', name: Strings.mapBingAerial }, { key: 'bingHybrid', name: Strings.mapBingHybrid }, { key: 'baidu', name: Strings.mapBaidu }, { key: 'yandexMap', name: Strings.mapYandexMap }, { key: 'yandexSat', name: Strings.mapYandexSat }, { key: 'wikimedia', name: Strings.mapWikimedia }, { key: 'custom', name: Strings.mapCustom }] });

//(ver se tem que retirar esse trecho)(vendo) Ext['define']('Traccar.store.DistanceUnits', {'extend': Ext['data']['Store'],'fields': ['key', 'name', 'factor'],'data': [{    'key': 'km',    'name': Strings['sharedKm'],    'factor': 0.001}, {    'key': 'mi',    'name': Strings['sharedMi'],    'factor': 0.000621371}, {    'key': 'nmi',    'name': Strings['sharedNmi'],    'factor': 0.000539957}],'convertValue': function (_0x1ec326, _0x3a3ac1, _0x106e6e) {    _0x3a3ac1 || (_0x3a3ac1 = 'km');    _0x3a3ac1 = this['findRecord']('key', _0x3a3ac1);    return _0x106e6e ? _0x1ec326 / _0x3a3ac1['get']('factor') : _0x1ec326 * _0x3a3ac1['get']('factor');},'formatValue': function (_0x36c1cf, _0x242b7c, _0x14fac3) {     var _0x1ba7ab;    _0x242b7c || (_0x242b7c = 'km');    _0x1ba7ab = this['findRecord']('key', _0x242b7c);    return (_0x14fac3 ? this['convertValue'](_0x36c1cf, _0x242b7c) : _0x36c1cf)['toFixed'](0x2) + '\x20' + _0x1ba7ab['get']('name');} });
Ext.define('Traccar.store.DistanceUnits', {
    extend: Ext.data.Store, fields: ['key', 'name', 'factor'], data: [{ key: 'km', name: Strings.sharedKm, factor: .001 }, { key: 'mi', name: Strings.sharedMi, factor: 6.21371E-4 }, { key: 'nmi', name: Strings.sharedNmi, factor: 5.39957E-4 }], convertValue: function (value, unit, back) { unit || (unit = 'km'); unit = this.findRecord('key', unit); return back ? value / unit.get('factor') : value * unit.get('factor') }, formatValue: function (value, unit, convert) {
        var model; unit || (unit = 'km'); model = this.findRecord('key',
            unit); return (convert ? this.convertValue(value, unit) : value).toFixed(2) + ' ' + model.get('name')
    }
});
Ext.define('Traccar.store.SpeedUnits', {
    extend: Ext.data.Store, fields: ['key', 'name', 'factor'], data: [{ key: 'kn', name: Strings.sharedKn, factor: 1 }, { key: 'kmh', name: Strings.sharedKmh, factor: 1.852 }, { key: 'mph', name: Strings.sharedMph, factor: 1.15078 }], convertValue: function (value, unit, back) { unit || (unit = 'kn'); unit = this.findRecord('key', unit); return back ? value / unit.get('factor') : value * unit.get('factor') }, formatValue: function (value, unit, convert) {
        var model; unit || (unit = 'kn'); model = this.findRecord('key', unit); return (convert ?
            this.convertValue(value, unit) : value).toFixed(1) + ' ' + model.get('name')
    }
});
Ext.define('Traccar.store.CoordinateFormats', {extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'dd', name: Strings.sharedDecimalDegrees }, { key: 'ddm', name: Strings.sharedDegreesDecimalMinutes }, { key: 'dms', name: Strings.sharedDegreesMinutesSeconds }], formatValue: function (key, value, unit) {    var minutes; key = 'latitude' === key ? 0 <= value ? 'N' : 'S' : 0 <= value ? 'E' : 'W'; switch (unit) {case 'ddm': return value = Math.abs(value), unit = Math.floor(value), unit + '° ' + (60 * (value - unit)).toFixed(Traccar.Style.coordinatePrecision) + "' " + key; case 'dms': return value = Math.abs(value), unit = Math.floor(value), minutes = Math.floor(60 * (value - unit)), value = Math.round(3600 * (value - unit - minutes / 60)), unit + '° ' + minutes + "' " + value + '" ' + key; default: return value.toFixed(Traccar.Style.coordinatePrecision) + '°'    }} });
Ext.define('Traccar.store.CommandTypes', { extend: Ext.data.Store, model: 'Traccar.model.KnownCommand', proxy: { type: 'rest', url: 'api/commands/types', listeners: { exception: function (proxy, response) { Traccar.app.showError(response) } } } });
Ext.define('Traccar.store.TimeUnits', { extend: Ext.data.Store, fields: ['key', 'name', 'factor'], data: [{ key: 's', name: Strings.sharedSecondAbbreviation, factor: 1 }, { key: 'm', name: Strings.sharedMinuteAbbreviation, factor: 60 }, { key: 'h', name: Strings.sharedHourAbbreviation, factor: 3600 }], convertValue: function (value, unit, back) { unit || (unit = 'kn'); unit = this.findRecord('key', unit); return back ? value * unit.get('factor') : value / unit.get('factor') } });
Ext.define('Traccar.store.Languages', { extend: Ext.data.Store, fields: ['code', 'name'], data: function () { var code, data = []; for (code in Locale.languages) Locale.languages.hasOwnProperty(code) && data.push({ code: code, name: Locale.languages[code].name }); return data }() });  Ext.define('Traccar.store.Events', { extend: Ext.data.Store, model: 'Traccar.model.Event', trackRemoved: !1, proxy: { type: 'rest', url: 'api/events' } });
Ext.define('Traccar.store.Geofences', { extend: Ext.data.Store, model: 'Traccar.model.Geofence', proxy: { type: 'rest', url: 'api/geofences', writer: { writeAllFields: !0 } } });
Ext.define('Traccar.store.AllGeofences', { extend: Ext.data.Store, model: 'Traccar.model.Geofence', proxy: { type: 'rest', url: 'api/geofences', extraParams: { all: !0 } } });
Ext.define('Traccar.store.Notifications', { extend: Ext.data.Store, model: 'Traccar.model.Notification', proxy: { type: 'rest', url: 'api/notifications', writer: { writeAllFields: !0 } } });
Ext.define('Traccar.store.AllNotifications', { extend: Ext.data.Store, model: 'Traccar.model.Notification', proxy: { type: 'rest', url: 'api/notifications', extraParams: { all: !0 } } });
Ext.define('Traccar.store.GeofenceTypes', { extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'Polygon', name: Strings.mapShapePolygon }, { key: 'Circle', name: Strings.mapShapeCircle }, { key: 'LineString', name: Strings.mapShapePolyline }] });
Ext.define('Traccar.store.ReportRoute', { extend: Ext.data.Store, model: 'Traccar.model.Position', proxy: { type: 'rest', url: 'api/reports/route', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportEvents', { extend: Ext.data.Store, model: 'Traccar.model.Event', proxy: { type: 'rest', url: 'api/reports/events', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportTrips', { extend: Ext.data.Store, model: 'Traccar.model.ReportTrip', proxy: { type: 'rest', url: 'api/reports/trips', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportStops', { extend: Ext.data.Store, model: 'Traccar.model.ReportStop', proxy: { type: 'rest', url: 'api/reports/stops', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportSummary', { extend: Ext.data.Store, model: 'Traccar.model.ReportSummary', proxy: { type: 'rest', url: 'api/reports/summary', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportTypes', { extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'route', name: Strings.reportRoute }, { key: 'events', name: Strings.reportEvents }, { key: 'trips', name: Strings.reportTrips }, { key: 'stops', name: Strings.reportStops }, { key: 'summary', name: Strings.reportSummary }, { key: 'chart', name: Strings.reportChart }] }); 
Ext.define('Traccar.store.ReportEventTypes', { extend: Ext.data.Store, fields: ['type', 'name'], statics: { allEvents: 'allEvents' } });
Ext.define('Traccar.store.ReportChartTypes', { extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'speed', name: Strings.positionSpeed }, { key: 'accuracy', name: Strings.positionAccuracy }, { key: 'altitude', name: Strings.positionAltitude }] });
Ext.define('Traccar.store.ReportPeriods', { extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'custom', name: Strings.reportCustom }, { key: 'today', name: Strings.reportToday }, { key: 'yesterday', name: Strings.reportYesterday }, { key: 'thisWeek', name: Strings.reportThisWeek }, { key: 'previousWeek', name: Strings.reportPreviousWeek }, { key: 'thisMonth', name: Strings.reportThisMonth }, { key: 'previousMonth', name: Strings.reportPreviousMonth }] });
Ext.define('Traccar.model.Statistics', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'captureTime', type: 'date', dateFormat: 'c' }, { name: 'activeUsers', type: 'int' }, { name: 'activeDevices', type: 'int' }, { name: 'requests', type: 'int' }, { name: 'messagesReceived', type: 'int' }, { name: 'messagesStored', type: 'int' }, { name: 'mailSent', type: 'int' }, { name: 'smsSent', type: 'int' }, { name: 'geocoderRequests', type: 'int' }, { name: 'geolocationRequests', type: 'int' }, { name: 'attributes' }] });
Ext.define('Traccar.store.Statistics', { extend: Ext.data.Store, model: 'Traccar.model.Statistics', proxy: { type: 'rest', url: 'api/statistics' } });
Ext.define('Traccar.store.DeviceImages', { extend: Ext.data.Store, fields: 'key name svg fillId rotateId scaleId'.split(' '), data: function () { var i, key, data = []; for (i = 0; i < window.Images.length; i++)key = window.Images[i], data.push({ key: key, name: Strings['category' + key.charAt(0).toUpperCase() + key.slice(1)], svg: document.getElementById(key + 'Svg').contentDocument, fillId: 'arrow' === key ? 'arrow' : 'background', rotateId: 'arrow' === key ? 'arrow' : 'background', scaleId: 'arrow' === key ? 'arrow' : 'layer1' }); return data }() });
Ext.define('Traccar.store.Calendars', { extend: Ext.data.Store, model: 'Traccar.model.Calendar', proxy: { type: 'rest', url: 'api/calendars', writer: { writeAllFields: !0 } } }); Ext.define('Traccar.store.AllCalendars', { extend: Ext.data.Store, model: 'Traccar.model.Calendar', proxy: { type: 'rest', url: 'api/calendars', extraParams: { all: !0 } } });
Ext.define('Traccar.store.AllTimezones', {
    extend: Ext.data.Store, fields: ['key'], sorters: { property: 'key', direction: 'ASC' }, data: [{ key: 'Africa/Abidjan' }, { key: 'Africa/Accra' }, { key: 'Africa/Bissau' }, { key: 'Africa/Casablanca' }, { key: 'Africa/El_Aaiun' }, { key: 'Africa/Monrovia' }, { key: 'America/Danmarkshavn' }, { key: 'Antarctica/Troll' }, { key: 'Atlantic/Canary' }, { key: 'Atlantic/Faroe' }, { key: 'Atlantic/Madeira' }, { key: 'Atlantic/Reykjavik' }, { key: 'GMT' }, { key: 'Etc/GMT' }, { key: 'Etc/UCT' }, { key: 'Etc/UTC' }, { key: 'Europe/Dublin' }, { key: 'Europe/Lisbon' },
    { key: 'Europe/London' }, { key: 'WET' }, { key: 'Africa/Algiers' }, { key: 'Africa/Ceuta' }, { key: 'Africa/Lagos' }, { key: 'Africa/Ndjamena' }, { key: 'Africa/Tunis' }, { key: 'Africa/Windhoek' }, { key: 'CET' }, { key: 'Etc/GMT-1' }, { key: 'Europe/Amsterdam' }, { key: 'Europe/Andorra' }, { key: 'Europe/Belgrade' }, { key: 'Europe/Berlin' }, { key: 'Europe/Brussels' }, { key: 'Europe/Budapest' }, { key: 'Europe/Copenhagen' }, { key: 'Europe/Gibraltar' }, { key: 'Europe/Luxembourg' }, { key: 'Europe/Madrid' }, { key: 'Europe/Malta' }, { key: 'Europe/Monaco' }, { key: 'Europe/Oslo' },
    { key: 'Europe/Paris' }, { key: 'Europe/Prague' }, { key: 'Europe/Rome' }, { key: 'Europe/Stockholm' }, { key: 'Europe/Tirane' }, { key: 'Europe/Vienna' }, { key: 'Europe/Warsaw' }, { key: 'Europe/Zurich' }, { key: 'MET' }, { key: 'Africa/Cairo' }, { key: 'Africa/Johannesburg' }, { key: 'Africa/Maputo' }, { key: 'Africa/Tripoli' }, { key: 'Asia/Amman' }, { key: 'Asia/Beirut' }, { key: 'Asia/Damascus' }, { key: 'Asia/Gaza' }, { key: 'Asia/Hebron' }, { key: 'Asia/Jerusalem' }, { key: 'Asia/Nicosia' }, { key: 'EET' }, { key: 'Etc/GMT-2' }, { key: 'Europe/Athens' }, { key: 'Europe/Bucharest' },
    { key: 'Europe/Chisinau' }, { key: 'Europe/Helsinki' }, { key: 'Europe/Kaliningrad' }, { key: 'Europe/Kiev' }, { key: 'Europe/Riga' }, { key: 'Europe/Sofia' }, { key: 'Europe/Tallinn' }, { key: 'Europe/Uzhgorod' }, { key: 'Europe/Vilnius' }, { key: 'Europe/Zaporozhye' }, { key: 'Africa/Khartoum' }, { key: 'Africa/Nairobi' }, { key: 'Antarctica/Syowa' }, { key: 'Asia/Baghdad' }, { key: 'Asia/Famagusta' }, { key: 'Asia/Qatar' }, { key: 'Asia/Riyadh' }, { key: 'Etc/GMT-3' }, { key: 'Europe/Istanbul' }, { key: 'Europe/Kirov' }, { key: 'Europe/Minsk' }, { key: 'Europe/Moscow' }, { key: 'Europe/Simferopol' },
    { key: 'Europe/Volgograd' }, { key: 'Asia/Tehran' }, { key: 'Asia/Baku' }, { key: 'Asia/Dubai' }, { key: 'Asia/Tbilisi' }, { key: 'Asia/Yerevan' }, { key: 'Etc/GMT-4' }, { key: 'Europe/Astrakhan' }, { key: 'Europe/Samara' }, { key: 'Europe/Saratov' }, { key: 'Europe/Ulyanovsk' }, { key: 'Indian/Mahe' }, { key: 'Indian/Mauritius' }, { key: 'Indian/Reunion' }, { key: 'Asia/Kabul' }, { key: 'Antarctica/Mawson' }, { key: 'Asia/Aqtau' }, { key: 'Asia/Aqtobe' }, { key: 'Asia/Ashgabat' }, { key: 'Asia/Atyrau' }, { key: 'Asia/Dushanbe' }, { key: 'Asia/Karachi' }, { key: 'Asia/Oral' }, { key: 'Asia/Samarkand' },
    { key: 'Asia/Tashkent' }, { key: 'Asia/Yekaterinburg' }, { key: 'Etc/GMT-5' }, { key: 'Indian/Kerguelen' }, { key: 'Indian/Maldives' }, { key: 'Asia/Colombo' }, { key: 'Asia/Kolkata' }, { key: 'Asia/Kathmandu' }, { key: 'Antarctica/Vostok' }, { key: 'Asia/Almaty' }, { key: 'Asia/Bishkek' }, { key: 'Asia/Dhaka' }, { key: 'Asia/Omsk' }, { key: 'Asia/Qyzylorda' }, { key: 'Asia/Thimphu' }, { key: 'Asia/Urumqi' }, { key: 'Etc/GMT-6' }, { key: 'Indian/Chagos' }, { key: 'Asia/Yangon' }, { key: 'Indian/Cocos' }, { key: 'Antarctica/Davis' }, { key: 'Asia/Bangkok' }, { key: 'Asia/Barnaul' }, { key: 'Asia/Ho_Chi_Minh' },
    { key: 'Asia/Hovd' }, { key: 'Asia/Jakarta' }, { key: 'Asia/Krasnoyarsk' }, { key: 'Asia/Novokuznetsk' }, { key: 'Asia/Novosibirsk' }, { key: 'Asia/Pontianak' }, { key: 'Asia/Tomsk' }, { key: 'Etc/GMT-7' }, { key: 'Indian/Christmas' }, { key: 'Asia/Brunei' }, { key: 'Asia/Choibalsan' }, { key: 'Asia/Hong_Kong' }, { key: 'Asia/Irkutsk' }, { key: 'Asia/Kuala_Lumpur' }, { key: 'Asia/Kuching' }, { key: 'Asia/Macau' }, { key: 'Asia/Makassar' }, { key: 'Asia/Manila' }, { key: 'Asia/Shanghai' }, { key: 'Asia/Singapore' }, { key: 'Asia/Taipei' }, { key: 'Asia/Ulaanbaatar' }, { key: 'Australia/Perth' },
    { key: 'Etc/GMT-8' }, { key: 'Asia/Pyongyang' }, { key: 'Australia/Eucla' }, { key: 'Asia/Chita' }, { key: 'Asia/Dili' }, { key: 'Asia/Jayapura' }, { key: 'Asia/Khandyga' }, { key: 'Asia/Seoul' }, { key: 'Asia/Tokyo' }, { key: 'Asia/Yakutsk' }, { key: 'Etc/GMT-9' }, { key: 'Pacific/Palau' }, { key: 'Australia/Adelaide' }, { key: 'Australia/Broken_Hill' }, { key: 'Australia/Darwin' }, { key: 'Antarctica/DumontDUrville' }, { key: 'Asia/Ust-Nera' }, { key: 'Asia/Vladivostok' }, { key: 'Australia/Brisbane' }, { key: 'Australia/Currie' }, { key: 'Australia/Hobart' }, { key: 'Australia/Lindeman' },
    { key: 'Australia/Melbourne' }, { key: 'Australia/Sydney' }, { key: 'Etc/GMT-10' }, { key: 'Pacific/Chuuk' }, { key: 'Pacific/Guam' }, { key: 'Pacific/Port_Moresby' }, { key: 'Australia/Lord_Howe' }, { key: 'Antarctica/Casey' }, { key: 'Antarctica/Macquarie' }, { key: 'Asia/Magadan' }, { key: 'Asia/Sakhalin' }, { key: 'Asia/Srednekolymsk' }, { key: 'Etc/GMT-11' }, { key: 'Pacific/Bougainville' }, { key: 'Pacific/Efate' }, { key: 'Pacific/Guadalcanal' }, { key: 'Pacific/Kosrae' }, { key: 'Pacific/Norfolk' }, { key: 'Pacific/Noumea' }, { key: 'Pacific/Pohnpei' }, { key: 'Asia/Anadyr' },
    { key: 'Asia/Kamchatka' }, { key: 'Etc/GMT-12' }, { key: 'Pacific/Auckland' }, { key: 'Pacific/Fiji' }, { key: 'Pacific/Funafuti' }, { key: 'Pacific/Kwajalein' }, { key: 'Pacific/Majuro' }, { key: 'Pacific/Nauru' }, { key: 'Pacific/Tarawa' }, { key: 'Pacific/Wake' }, { key: 'Pacific/Wallis' }, { key: 'Pacific/Chatham' }, { key: 'Etc/GMT-13' }, { key: 'Pacific/Apia' }, { key: 'Pacific/Enderbury' }, { key: 'Pacific/Fakaofo' }, { key: 'Pacific/Tongatapu' }, { key: 'Etc/GMT-14' }, { key: 'Pacific/Kiritimati' }, { key: 'America/Scoresbysund' }, { key: 'Atlantic/Azores' }, { key: 'Atlantic/Cape_Verde' },
    { key: 'Etc/GMT+1' }, { key: 'America/Noronha' }, { key: 'Atlantic/South_Georgia' }, { key: 'Etc/GMT+2' }, { key: 'America/Araguaina' }, { key: 'America/Argentina/Buenos_Aires' }, { key: 'America/Argentina/Catamarca' }, { key: 'America/Argentina/Cordoba' }, { key: 'America/Argentina/Jujuy' }, { key: 'America/Argentina/La_Rioja' }, { key: 'America/Argentina/Mendoza' }, { key: 'America/Argentina/Rio_Gallegos' }, { key: 'America/Argentina/Salta' }, { key: 'America/Argentina/San_Juan' }, { key: 'America/Argentina/San_Luis' }, { key: 'America/Argentina/Tucuman' },
    { key: 'America/Argentina/Ushuaia' }, { key: 'America/Bahia' }, { key: 'America/Belem' }, { key: 'America/Cayenne' }, { key: 'America/Fortaleza' }, { key: 'America/Godthab' }, { key: 'America/Maceio' }, { key: 'America/Miquelon' }, { key: 'America/Montevideo' }, { key: 'America/Paramaribo' }, { key: 'America/Recife' }, { key: 'America/Santarem' }, { key: 'America/Sao_Paulo' }, { key: 'Antarctica/Rothera' }, { key: 'Atlantic/Stanley' }, { key: 'Etc/GMT+3' }, { key: 'America/St_Johns' }, { key: 'America/Asuncion' }, { key: 'America/Barbados' }, { key: 'America/Blanc-Sablon' },
    { key: 'America/Boa_Vista' }, { key: 'America/Campo_Grande' }, { key: 'America/Caracas' }, { key: 'America/Cuiaba' }, { key: 'America/Curacao' }, { key: 'America/Glace_Bay' }, { key: 'America/Goose_Bay' }, { key: 'America/Grand_Turk' }, { key: 'America/Guyana' }, { key: 'America/Halifax' }, { key: 'America/La_Paz' }, { key: 'America/Manaus' }, { key: 'America/Martinique' }, { key: 'America/Moncton' }, { key: 'America/Port_of_Spain' }, { key: 'America/Porto_Velho' }, { key: 'America/Puerto_Rico' }, { key: 'America/Santiago' }, { key: 'America/Santo_Domingo' }, { key: 'America/Thule' },
    { key: 'Antarctica/Palmer' }, { key: 'Atlantic/Bermuda' }, { key: 'Etc/GMT+4' }, { key: 'America/Atikokan' }, { key: 'America/Bogota' }, { key: 'America/Cancun' }, { key: 'America/Detroit' }, { key: 'America/Eirunepe' }, { key: 'America/Guayaquil' }, { key: 'America/Havana' }, { key: 'America/Indiana/Indianapolis' }, { key: 'America/Indiana/Marengo' }, { key: 'America/Indiana/Petersburg' }, { key: 'America/Indiana/Vevay' }, { key: 'America/Indiana/Vincennes' }, { key: 'America/Indiana/Winamac' }, { key: 'America/Iqaluit' }, { key: 'America/Jamaica' }, { key: 'America/Kentucky/Louisville' },
    { key: 'America/Kentucky/Monticello' }, { key: 'America/Lima' }, { key: 'America/Nassau' }, { key: 'America/New_York' }, { key: 'America/Nipigon' }, { key: 'America/Panama' }, { key: 'America/Pangnirtung' }, { key: 'America/Port-au-Prince' }, { key: 'America/Rio_Branco' }, { key: 'America/Thunder_Bay' }, { key: 'America/Toronto' }, { key: 'EST' }, { key: 'EST5EDT' }, { key: 'Etc/GMT+5' }, { key: 'America/Bahia_Banderas' }, { key: 'America/Belize' }, { key: 'America/Chicago' }, { key: 'America/Costa_Rica' }, { key: 'America/El_Salvador' }, { key: 'America/Guatemala' }, { key: 'America/Indiana/Knox' },
    { key: 'America/Indiana/Tell_City' }, { key: 'America/Managua' }, { key: 'America/Matamoros' }, { key: 'America/Menominee' }, { key: 'America/Merida' }, { key: 'America/Mexico_City' }, { key: 'America/Monterrey' }, { key: 'America/North_Dakota/Beulah' }, { key: 'America/North_Dakota/Center' }, { key: 'America/North_Dakota/New_Salem' }, { key: 'America/Rainy_River' }, { key: 'America/Rankin_Inlet' }, { key: 'America/Regina' }, { key: 'America/Resolute' }, { key: 'America/Swift_Current' }, { key: 'America/Tegucigalpa' }, { key: 'America/Winnipeg' }, { key: 'CST6CDT' },
    { key: 'Etc/GMT+6' }, { key: 'Pacific/Easter' }, { key: 'Pacific/Galapagos' }, { key: 'America/Boise' }, { key: 'America/Cambridge_Bay' }, { key: 'America/Chihuahua' }, { key: 'America/Creston' }, { key: 'America/Dawson_Creek' }, { key: 'America/Denver' }, { key: 'America/Edmonton' }, { key: 'America/Fort_Nelson' }, { key: 'America/Hermosillo' }, { key: 'America/Inuvik' }, { key: 'America/Mazatlan' }, { key: 'America/Ojinaga' }, { key: 'America/Phoenix' }, { key: 'America/Yellowknife' }, { key: 'Etc/GMT+7' }, { key: 'MST' }, { key: 'MST7MDT' }, { key: 'America/Dawson' }, { key: 'America/Los_Angeles' },
    { key: 'America/Tijuana' }, { key: 'America/Vancouver' }, { key: 'America/Whitehorse' }, { key: 'Etc/GMT+8' }, { key: 'Pacific/Pitcairn' }, { key: 'PST8PDT' }, { key: 'America/Anchorage' }, { key: 'America/Juneau' }, { key: 'America/Metlakatla' }, { key: 'America/Nome' }, { key: 'America/Sitka' }, { key: 'America/Yakutat' }, { key: 'Etc/GMT+9' }, { key: 'Pacific/Gambier' }, { key: 'Pacific/Marquesas' }, { key: 'America/Adak' }, { key: 'Etc/GMT+10' }, { key: 'HST' }, { key: 'Pacific/Honolulu' }, { key: 'Pacific/Rarotonga' }, { key: 'Pacific/Tahiti' }, { key: 'Etc/GMT+11' }, { key: 'Pacific/Niue' },
    { key: 'Pacific/Pago_Pago' }, { key: 'Etc/GMT+12' }]
 });
Ext.define('Traccar.store.VisibleDevices', { extend: Ext.data.ChainedStore, source: 'Devices' }); Ext.define('Traccar.store.DeviceStatuses', { extend: Ext.data.Store, fields: ['id', 'name', 'color'], data: [{ id: 'online', name: Strings.deviceStatusOnline, color: 'view-color-green' }, { id: 'offline', name: Strings.deviceStatusOffline, color: 'view-color-red' }, { id: 'unknown', name: Strings.deviceStatusUnknown, color: 'view-color-yellow' }] });
Ext.define('Traccar.store.CommonDeviceAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'speedLimit', name: Strings.attributeSpeedLimit, valueType: 'number', dataType: 'speed' }, { key: 'report.ignoreOdometer', name: Strings.attributeReportIgnoreOdometer, valueType: 'boolean' }] });
Ext.define('Traccar.store.DeviceAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'web.reportColor', name: Strings.attributeWebReportColor, valueType: 'color' }, { key: 'devicePassword', name: Strings.attributeDevicePassword, valueType: 'string' }, { key: 'processing.copyAttributes', name: Strings.attributeProcessingCopyAttributes, valueType: 'string' }, { key: 'decoder.timezone', name: Strings.sharedTimezone, valueType: 'string', dataType: 'timezone' }] });
Ext.define('Traccar.store.GeofenceAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', proxy: 'memory', data: [{ key: 'color', name: Strings.attributeColor, valueType: 'color' }, { key: 'speedLimit', name: Strings.attributeSpeedLimit, valueType: 'number', dataType: 'speed' }, { key: 'polylineDistance', name: Strings.attributePolylineDistance, valueType: 'number', dataType: 'distance' }] });
Ext.define('Traccar.store.GroupAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'processing.copyAttributes', name: Strings.attributeProcessingCopyAttributes, valueType: 'string' }, { key: 'decoder.timezone', name: Strings.sharedTimezone, valueType: 'string', dataType: 'timezone' }] }); Ext.define('Traccar.store.ServerAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [] });
Ext.define('Traccar.store.CommonUserAttributes', {extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'web.liveRouteLength', name: Strings.attributeWebLiveRouteLength, valueType: 'number', allowDecimals: !1 }, { key: 'web.selectZoom', name: Strings.attributeWebSelectZoom, valueType: 'number', allowDecimals: !1, minValue: Traccar.Style.mapDefaultZoom, maxValue: Traccar.Style.mapMaxZoom }, {key: 'web.maxZoom', name: Strings.attributeWebMaxZoom, valueType: 'number', allowDecimals: !1, minValue: Traccar.Style.mapDefaultZoom,maxValue: Traccar.Style.mapMaxZoom}, { key: 'ui.disableReport', name: Strings.attributeUiDisableReport, valueType: 'boolean' }, { key: 'ui.disableEvents', name: Strings.attributeUiDisableEvents, valueType: 'boolean' }, {key: 'ui.disableWhats',name: Strings.DisableWhatsApp,valueType: 'boolean'},{ key: 'ui.disableVehicleFetures', name: Strings.attributeUiDisableVehicleFetures, valueType: 'boolean' }, { key: 'ui.disableDrivers', name: Strings.attributeUiDisableDrivers, valueType: 'boolean' }, { key: 'ui.disableComputedAttributes', name: Strings.attributeUiDisableComputedAttributes, valueType: 'boolean' }, {key: 'ui.disableCalendars',name: Strings.attributeUiDisableCalendars, valueType: 'boolean'}, { key: 'ui.disableMaintenances', name: Strings.attributeUiDisableMaintenances, valueType: 'boolean' }, { key: 'ui.hidePositionAttributes', name: Strings.attributeUiHidePositionAttributes, valueType: 'string' }, { key: 'distanceUnit', name: Strings.settingsDistanceUnit, valueType: 'string', dataType: 'distanceUnit' }, { key: 'speedUnit', name: Strings.settingsSpeedUnit, valueType: 'string', dataType: 'speedUnit' }, {key: 'volumeUnit', name: Strings.settingsVolumeUnit, valueType: 'string',dataType: 'volumeUnit'}, { key: 'timezone', name: Strings.sharedTimezone, valueType: 'string', dataType: 'timezone' }]});
Ext.define('Traccar.store.UserAttributes', {
    extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'mail.smtp.host', name: Strings.attributeMailSmtpHost, valueType: 'string' }, { key: 'mail.smtp.port', name: Strings.attributeMailSmtpPort, valueType: 'number', allowDecimals: !1, minValue: 1, maxValue: 65535 }, { key: 'mail.smtp.starttls.enable', name: Strings.attributeMailSmtpStarttlsEnable, valueType: 'boolean' }, { key: 'mail.smtp.starttls.required', name: Strings.attributeMailSmtpStarttlsRequired, valueType: 'boolean' },
    { key: 'mail.smtp.ssl.enable', name: Strings.attributeMailSmtpSslEnable, valueType: 'boolean' }, { key: 'mail.smtp.ssl.trust', name: Strings.attributeMailSmtpSslTrust, valueType: 'string' }, { key: 'mail.smtp.ssl.protocols', name: Strings.attributeMailSmtpSslProtocols, valueType: 'string' }, { key: 'mail.smtp.from', name: Strings.attributeMailSmtpFrom, valueType: 'string' }, { key: 'mail.smtp.auth', name: Strings.attributeMailSmtpAuth, valueType: 'boolean' }, { key: 'mail.smtp.username', name: Strings.attributeMailSmtpUsername, valueType: 'string' },
    { key: 'mail.smtp.password', name: Strings.attributeMailSmtpPassword, valueType: 'string' }]
});
Ext.define('Traccar.model.ComputedAttribute', { extend: Ext.data.Model, identifier: 'negative', fields: [{ name: 'id', type: 'int' }, { name: 'description', type: 'string' }, { name: 'type', type: 'string' }, { name: 'attribute', type: 'string' }, { name: 'expression', type: 'string' }] }); Ext.define('Traccar.store.ComputedAttributes', { extend: Ext.data.Store, model: 'Traccar.model.ComputedAttribute', proxy: { type: 'rest', url: 'api/attributes/computed', writer: { writeAllFields: !0 } } });
Ext.define('Traccar.store.AllComputedAttributes', { extend: Ext.data.Store, model: 'Traccar.model.ComputedAttribute', proxy: { type: 'rest', url: 'api/attributes/computed', extraParams: { all: !0 } } });
Ext.define('Traccar.store.PositionAttributes', {
    extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', proxy: 'memory', data: [{ key: 'raw', name: Strings.positionRaw, valueType: 'string' }, { key: 'index', name: Strings.positionIndex, valueType: 'number' }, { key: 'hdop', name: Strings.positionHdop, valueType: 'number' }, { key: 'vdop', name: Strings.positionVdop, valueType: 'number' }, { key: 'pdop', name: Strings.positionPdop, valueType: 'number' }, { key: 'sat', name: Strings.positionSat, valueType: 'number' }, {
        key: 'satVisible', name: Strings.positionSatVisible, valueType: 'number'
    }, { key: 'rssi', name: Strings.positionRssi, valueType: 'number' }, { key: 'gps', name: Strings.positionGps, valueType: 'number' }, { key: 'roaming', name: Strings.positionRoaming, valueType: 'boolean' }, { key: 'event', name: Strings.positionEvent, valueType: 'string' }, { key: 'alarm', name: Strings.positionAlarm, valueType: 'string' }, { key: 'status', name: Strings.positionStatus, valueType: 'string' }, { key: 'odometer', name: Strings.positionOdometer, valueType: 'number', dataType: 'distance' }, {
        key: 'serviceOdometer', name: Strings.positionServiceOdometer, valueType: 'number', dataType: 'distance'
    }, { key: 'tripOdometer', name: Strings.positionTripOdometer, valueType: 'number', dataType: 'distance' }, { key: 'hours', name: Strings.positionHours, valueType: 'number', dataType: 'hours' }, { key: 'steps', name: Strings.positionSteps, valueType: 'number' }, { key: 'input', name: Strings.positionInput, valueType: 'string' }, { key: 'output', name: Strings.positionOutput, valueType: 'string' }, { key: 'power', name: Strings.positionPower, valueType: 'number', dataType: 'voltage' }, {
        key: 'battery', name: Strings.positionBattery, valueType: 'number', dataType: 'voltage'
    }, { key: 'batteryLevel', name: Strings.positionBatteryLevel, valueType: 'number', dataType: 'percentage' }, { key: 'fuel', name: Strings.positionFuel, valueType: 'number', dataType: 'volume' }, { key: 'fuelConsumption', name: Strings.positionFuelConsumption, valueType: 'number', dataType: 'consumption' }, { key: 'versionFw', name: Strings.positionVersionFw, valueType: 'string' }, { key: 'versionHw', name: Strings.positionVersionHw, valueType: 'string' }, { key: 'type', name: Strings.sharedType, valueType: 'string' },
    { key: 'ignition', name: Strings.positionIgnition, valueType: 'boolean' }, { key: 'flags', name: Strings.positionFlags, valueType: 'string' }, { key: 'charge', name: Strings.positionCharge, valueType: 'boolean' }, { key: 'ip', name: Strings.positionIp, valueType: 'string' }, { key: 'archive', name: Strings.positionArchive, valueType: 'boolean' }, { key: 'distance', name: Strings.positionDistance, valueType: 'number', dataType: 'distance' }, { key: 'totalDistance', name: Strings.deviceTotalDistance, valueType: 'number', dataType: 'distance' }, {
        key: 'rpm', name: Strings.positionRpm, valueType: 'number'
    }, { key: 'vin', name: Strings.positionVin, valueType: 'string' }, { key: 'approximate', name: Strings.positionApproximate, valueType: 'boolean' }, { key: 'throttle', name: Strings.positionThrottle, valueType: 'number' }, { key: 'motion', name: Strings.positionMotion, valueType: 'boolean' }, { key: 'armed', name: Strings.positionArmed, valueType: 'number' }, { key: 'geofence', name: Strings.sharedGeofence, valueType: 'string' }, { key: 'acceleration', name: Strings.positionAcceleration, valueType: 'number' }, {
        key: 'deviceTemp', name: Strings.positionDeviceTemp, valueType: 'number', dataType: 'temperature'
    }, { key: 'operator', name: Strings.positionOperator, valueType: 'string' }, { key: 'command', name: Strings.deviceCommand, valueType: 'string' }, { key: 'blocked', name: Strings.positionBlocked, valueType: 'boolean' }, { key: 'dtcs', name: Strings.positionDtcs, valueType: 'string' }, { key: 'obdSpeed', name: Strings.positionObdSpeed, valueType: 'number', dataType: 'speed' }, { key: 'obdOdometer', name: Strings.positionObdOdometer, valueType: 'number', dataType: 'distance' }, { key: 'result', name: Strings.eventCommandResult, valueType: 'string'
}, { key: 'driverUniqueId', name: Strings.positionDriverUniqueId, valueType: 'string', dataType: 'driverUniqueId' }], getAttributeName: function (key, capitalize) { var model = this.getById(key); return model ? model.get('name') : capitalize ? key.replace(/^./, function (match) { return match.toUpperCase() }) : key }, getAttributeDataType: function (key) { return (key = this.getById(key)) && key.get('dataType') ? key.get('dataType') : null } // se der errado mudar dataType e colocar hoursConverter
});
Ext.define('Traccar.store.AttributeValueTypes', { extend: Ext.data.Store, fields: ['id', 'name'], proxy: 'memory', data: [{ id: 'string', name: Strings.sharedTypeString }, { id: 'number', name: Strings.sharedTypeNumber }, { id: 'boolean', name: Strings.sharedTypeBoolean }] }); 
Ext.define('Traccar.store.Drivers', { extend: Ext.data.Store, model: 'Traccar.model.Driver', proxy: { type: 'rest', url: 'api/drivers', writer: { writeAllFields: !0 } } }); Ext.define('Traccar.store.AllDrivers', { extend: Ext.data.Store, model: 'Traccar.model.Driver', proxy: { type: 'rest', url: 'api/drivers', extraParams: { all: !0 } } });
Ext.define('Traccar.store.KnownCommands', {extend: Ext.data.Store, model: 'Traccar.model.KnownCommand', data: [{ type: 'custom', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'positionPeriodic', parameters: [{ key: 'frequency', name: Strings.commandFrequency, valueType: 'number', allowDecimals: !1, minValue: 0, dataType: 'frequency' }] }, { type: 'setTimezone', parameters: [{ key: 'timezoneName', name: Strings.commandTimezone, valueType: 'string', dataType: 'timezone' }] }, {    type: 'sendSms', parameters: [{        key: 'phone',        name: Strings.commandPhone, valueType: 'string'    }, { key: 'message', name: Strings.commandMessage, valueType: 'string' }]}, { type: 'sendUssd', parameters: [{ key: 'phone', name: Strings.commandPhone, valueType: 'string' }] }, { type: 'sosNumber', parameters: [{ key: 'index', name: Strings.commandIndex, valueType: 'number', allowDecimals: !1, minValue: 0 }, { key: 'phone', name: Strings.commandPhone, valueType: 'string' }] }, { type: 'silenceTime', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, {    type: 'setPhonebook', parameters: [{        key: 'data',        name: Strings.commandData, valueType: 'string'    }]}, { type: 'voiceMessage', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'outputControl', parameters: [{ key: 'index', name: Strings.commandIndex, valueType: 'number', allowDecimals: !1, minValue: 0 }, { key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'voiceMonitoring', parameters: [{ key: 'enable', name: Strings.commandEnable, valueType: 'boolean' }] }, { type: 'setAgps', parameters: [{ key: 'enable', name: Strings.commandEnable, valueType: 'boolean' }] },{ type: 'setIndicator', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'configuration', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'setConnection', parameters: [{ key: 'server', name: Strings.commandServer, valueType: 'string' }, { key: 'port', name: Strings.commandPort, valueType: 'number', allowDecimals: !1, minValue: 1, maxValue: 65535 }] }, { type: 'setOdometer', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, {    type: 'modePowerSaving', parameters: [{        key: 'enable',        name: Strings.commandEnable, valueType: 'boolean'    }]}, { type: 'modeDeepSleep', parameters: [{ key: 'enable', name: Strings.commandEnable, valueType: 'boolean' }] }, { type: 'movementAlarm', parameters: [{ key: 'radius', name: Strings.commandRadius, valueType: 'number', allowDecimals: !1, minValue: 0 }] }, { type: 'alarmBattery', parameters: [{ key: 'enable', name: Strings.commandEnable, valueType: 'boolean' }] }, { type: 'alarmSos', parameters: [{ key: 'enable', name: Strings.commandEnable, valueType: 'boolean' }] }, {    type: 'alarmRemove', parameters: [{        key: 'enable',        name: Strings.commandEnable, valueType: 'boolean'    }]}, { type: 'alarmClock', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'alarmSpeed', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }, { type: 'alarmFall', parameters: [{ key: 'enable', name: Strings.commandEnable, valueType: 'boolean' }] }, { type: 'alarmVibration', parameters: [{ key: 'data', name: Strings.commandData, valueType: 'string' }] }]});
Ext.define('Traccar.store.VolumeUnits', {extend: Ext.data.Store, fields: ['key', 'name', 'fullName', 'factor'], data: [{ key: 'ltr', name: Strings.sharedLiterAbbreviation, fullName: Strings.sharedLiter, factor: 1 }, { key: 'impGal', name: Strings.sharedGallonAbbreviation, fullName: Strings.sharedImpGallon, factor: 4.546 }, { key: 'usGal', name: Strings.sharedGallonAbbreviation, fullName: Strings.sharedUsGallon, factor: 3.785 }], convertValue: function (value, unit, back) {    unit || (unit = 'ltr'); unit = this.findRecord('key', unit); return back ? value *        unit.get('factor') : value / unit.get('factor')}, formatValue: function (value, unit, convert) { var model; unit || (unit = 'ltr'); model = this.findRecord('key', unit); return (convert ? this.convertValue(value, unit) : value).toFixed(1) + ' ' + model.get('name') }});
Ext.define('Traccar.store.AllCommandTypes', { extend: Ext.data.Store, model: 'Traccar.model.KnownCommand', proxy: { type: 'rest', url: 'api/commands/types', listeners: { exception: function (proxy, response) { Traccar.app.showError(response) } } } });
Ext.define('Traccar.store.Commands', { extend: Ext.data.Store, model: 'Traccar.model.Command', proxy: { type: 'rest', url: 'api/commands', writer: { writeAllFields: !0 } } }); 
Ext.define('Traccar.store.AllCommands', { extend: Ext.data.Store, model: 'Traccar.model.Command', proxy: { type: 'rest', url: 'api/commands', extraParams: { all: !0 } } }); 
Ext.define('Traccar.store.DeviceCommands', { extend: Ext.data.Store, model: 'Traccar.model.Command', proxy: { type: 'rest', url: 'api/commands/send', listeners: { exception: function (proxy, response) { Traccar.app.showError(response) } } } });
Ext.define('Traccar.store.AllNotificationTypes', { extend: Ext.data.Store, model: 'Traccar.model.KnownNotification', proxy: { type: 'rest', url: 'api/notifications/types', listeners: { exception: function (proxy, response) { Traccar.app.showError(response) } } } }); 
Ext.define('Traccar.store.Maintenances', { extend: Ext.data.Store, model: 'Traccar.model.Maintenance', proxy: { type: 'rest', url: 'api/maintenances', writer: { writeAllFields: !0 } } });
Ext.define('Traccar.store.AllMaintenances', { extend: Ext.data.Store, model: 'Traccar.model.Maintenance', proxy: { type: 'rest', url: 'api/maintenances', extraParams: { all: !0 } } }); 
Ext.define('Traccar.store.MaintenanceTypes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute' }); Ext.define('Traccar.store.HoursUnits', { extend: Ext.data.Store, fields: ['key', 'name', 'fullName'], data: [{ key: 'h', name: Strings.sharedHourAbbreviation, fullName: Strings.sharedHour }], convertValue: function (value, unit, back) { return back ? 36E5 * value : value / 36E5 }, formatValue: function (value, unit, convert) { convert ? (unit = Math.floor(value / 36E5), value = Math.floor(value % 36E5 / 6E4)) : (unit = Math.floor(value), value = Math.floor(value % 1 * 60)); return unit + ' ' + Strings.sharedHourAbbreviation + ' ' + value + ' ' + Strings.sharedMinuteAbbreviation } });
Ext.define('Traccar.model.KnownNotificator', { extend: Ext.data.Model, idProperty: 'type', fields: [{ name: 'type', type: 'string' }, { name: 'name', convert: function (v, rec) { return Traccar.app.getNotificatorString(rec.get('type')) }, depends: ['type'] }] }); Ext.define('Traccar.store.AllNotificators', { extend: Ext.data.Store, model: 'Traccar.model.KnownNotificator', proxy: { type: 'rest', url: 'api/notifications/notificators', listeners: { exception: function (proxy, response) { Traccar.app.showError(response) } } } });
Ext.define('Traccar.view.dialog.Base', { extend: Ext.window.Window, bodyPadding: Traccar.Style.normalPadding, resizable: !1, scrollable: !0, constrain: !0, initComponent: function () { window.innerHeight && (this.maxHeight = window.innerHeight - 2 * Traccar.Style.normalPadding); this.callParent() } });
Ext.define('Traccar.view.dialog.RegisterController', { extend: Ext.app.ViewController, alias: 'controller.register', onCreateClick: function () { var form = this.lookupReference('form'); form.isValid() && Ext.Ajax.request({ scope: this, method: 'POST', url: 'api/users', jsonData: form.getValues(), callback: this.onCreateReturn }) }, onCreateReturn: function (options, success, response) { success ? (this.closeView(), Traccar.app.showToast(Strings.loginCreated)) : Traccar.app.showError(response) } });
Ext.define('Traccar.view.dialog.Register', {extend: Traccar.view.dialog.Base, controller: 'register', title: Strings.loginRegister, items: {xtype: 'form', reference: 'form', jsonSubmit: !0, items: [{ xtype: 'textfield', name: 'name', fieldLabel: Strings.sharedName, allowBlank: !1 }, { xtype: 'textfield', name: 'email', fieldLabel: Strings.userEmail, validator: function (val) { return /(.+)@(.+)\.(.{2,})/.test(val) ? !0 : Ext.form.field.VTypes.emailText }, allowBlank: !1 }, {xtype: 'textfield', name: 'password', fieldLabel: Strings.userPassword, inputType: 'password',allowBlank: !1}]}, buttons: [{ text: Strings.sharedSave, handler: 'onCreateClick' }, { text: Strings.sharedCancel, handler: 'closeView' }]});



Ext.define('Traccar.view.dialog.LoginController', {
    extend: Ext.app.ViewController, alias: 'controller.login', init: function () { 
        //comentario para ver o que foi botão de registro
        //abaixo ativa e desativa o botao de registro.
        //this.lookupReference('registerButton').setDisabled(!Traccar.app.getServer().get('registration'));
         
        this.lookupReference('languageField').setValue(Locale.language) }, login: function () {
        var form = this.lookupReference('form'); 

        form.isValid() && (Ext.get('spinner-two').setVisible(!0),
        this.getView().setVisible(!1), Ext.Ajax.request({
            scope: this, method: 'POST', url: 'api/session', 
            params: form.getValues(),
            callback: function (options, success, response) {
                Ext.get('spinner-two').setVisible(!1);
success ? (this.lookupReference('rememberField').getValue() &&
 (options = Ext.util.Base64.encode(this.lookupReference('userField').getValue()), 
success = Ext.util.Base64.encode(this.lookupReference('passwordField').getValue()), 
Ext.util.Cookies.set('user', options, Ext.Date.add(new Date, Ext.Date.YEAR, 1)), 
Ext.util.Cookies.set('password', success, Ext.Date.add(new Date, Ext.Date.YEAR, 1))), 
Traccar.app.setUser(Ext.decode(response.responseText)),
this.fireViewEvent('login')) : (this.getView().setVisible(!0), 
401 === response.status ? Traccar.app.showError(Strings.loginFailed) : Traccar.app.showError(response.responseText))
        }
    }))
},

logout: function () { Ext.util.Cookies.clear('user'); 
Ext.util.Cookies.clear('password'); 
Ext.Ajax.request({ scope: this, method: 'DELETE', url: 'api/session', callback: function () { 
window.location.reload() } }) }, 
onSelectLanguage: function (selected) {var url, prefix; selected = selected.getValue(); 
url = window.location.href; 0 <= url.indexOf('locale\x3d') ? (prefix = url.substring(0, url.indexOf('locale')), url = url.substring(url.indexOf('locale')), url = url.substring(url.indexOf('\x3d') + 1), 
url = 0 <= url.indexOf('\x26') ? url.substring(url.indexOf('\x26')) : '', 
url = prefix + 'locale\x3d' + selected + url) : url = 0 > url.indexOf('?') ? url + ('?locale\x3d' + selected) : url + ('\x26locale\x3d' + selected); 
window.location.href = url
},
onAfterRender: function (field) { field.focus() }, onSpecialKey: function (field, e) { e.getKey() === e.ENTER && this.login() }, 
onLoginClick: function () {
    Ext.getElementById('submitButton').click();
    this.login()
}, onRegisterClick: function () { Ext.create('Traccar.view.dialog.Register').show() }
});

Ext.define('Traccar.view.dialog.Login', {
    extend: Traccar.view.dialog.Base, alias: 'widget.login', controller: 'login', header: !1, closable: !1, items: {
        xtype: 'form', reference: 'form', autoEl: { tag: 'form', method: 'POST', action: 'fake-login.html', target: 'submitTarget' }, items: [{ xtype: 'image', src: 'logo.svg', alt: Strings.loginLogo, width: 240, height: 64, style: { display: 'block', margin: '10px auto 25px' } }, {
            xtype: 'combobox', name: 'language', fieldLabel: Strings.loginLanguage, store: 'Languages', displayField: 'name', valueField: 'code',
            editable: !1, submitValue: !1, listeners: { select: 'onSelectLanguage' }, reference: 'languageField'
        }, { xtype: 'textfield', name: 'email', reference: 'userField', fieldLabel: Strings.userEmail, allowBlank: !1, enableKeyEvents: !0, listeners: { specialKey: 'onSpecialKey', afterrender: 'onAfterRender' }, inputAttrTpl: ['autocomplete\x3d"on" autocapitalize\x3d"none"'] }, {
            xtype: 'textfield', name: 'password', reference: 'passwordField', fieldLabel: Strings.userPassword, inputType: 'password', allowBlank: !1, enableKeyEvents: !0, listeners: { specialKey: 'onSpecialKey' },
            inputAttrTpl: ['autocomplete\x3d"on"']
        }, { xtype: 'checkboxfield', inputValue: !0, uncheckedValue: !1, reference: 'rememberField', fieldLabel: Strings.userRemember }, { xtype: 'component', html: '\x3ciframe id\x3d"submitTarget" name\x3d"submitTarget" style\x3d"display:none"\x3e\x3c/iframe\x3e' }, { xtype: 'component', html: '\x3cinput type\x3d"submit" id\x3d"submitButton" style\x3d"display:none"\x3e' }]
    }, buttons: [{ text: Strings.loginRegister, handler: 'onRegisterClick', reference: 'registerButton' }, { text: Strings.loginLogin, handler: 'onLoginClick' }]
});

Ext.define('Traccar.view.MainController', { extend: Ext.app.ViewController, alias: 'controller.mainController', init: function () { this.lookupReference('reportView').setHidden(Traccar.app.getBooleanAttributePreference('ui.disableReport')); this.lookupReference('eventsView').setHidden(Traccar.app.getBooleanAttributePreference('ui.disableEvents')) } });
Ext.define('Traccar.view.GridPanel', { extend: Ext.grid.Panel, xtype: 'customGridPanel', plugins: 'gridfilters', viewConfig: { enableTextSelection: !0, getRowClass: function () { return this.enableTextSelection ? 'x-selectable' : '' } } });
Ext.define('Traccar.view.edit.ToolbarController', {
    extend: Ext.app.ViewController, alias: 'controller.toolbarController', onAddClick: function () { var dialog, objectInstance = Ext.create(this.objectModel); objectInstance.store = this.getView().getStore(); objectInstance.store instanceof Ext.data.ChainedStore && (objectInstance.store = objectInstance.store.getSource()); dialog = Ext.create(this.objectDialog); dialog.down('form').loadRecord(objectInstance); dialog.show() }, onEditClick: function () {
        var dialog, objectInstance = this.getView().getSelectionModel().getSelection()[0];
        dialog = Ext.create(this.objectDialog); dialog.down('form').loadRecord(objectInstance); dialog.show()
    }, onRemoveClick: function () {
        var objectInstance = this.getView().getSelectionModel().getSelection()[0]; Ext.Msg.show({
            title: this.removeTitle, message: Strings.sharedRemoveConfirm, buttons: Ext.Msg.YESNO, buttonText: { yes: Strings.sharedRemove, no: Strings.sharedCancel }, fn: function (btn) {
                var store = objectInstance.store; 'yes' === btn && (store.remove(objectInstance), store.sync({
                    failure: function (batch) {
                        store.rejectChanges();
                        Traccar.app.showError(batch.exceptions[0].getError().response)
                    }
                }))
            }
        })
    }, onSelectionChange: function (selection, selected) { selection = 0 === selected.length; this.lookupReference('toolbarEditButton').setDisabled(selection); this.lookupReference('toolbarRemoveButton').setDisabled(selection) }
});


Ext['define']('Traccar.view.BaseWindow', {
    'extend': Ext['window']['Window'],
    'width': Traccar['Style']['windowWidth'],
    'height': Traccar['Style']['window'],
    'layout': fit,
    'initComponent': function () {
        if (window['innerWidth'] < Traccar['Style']['windowWidth'] || window['innerHeight'] < Traccar['Style'][window])
            this['maximized'] = !0x0,
                this['style'] =  'border-width:\x200;'
        this['callParent']();
    
});
Ext['define']('Traccar.view.dialog.AttributeController', {
    'extend': Ext['app']['ViewController'],
    'alias': controller.attribute,
    'onSaveClick': function (_0x4861c0) {
        var _0x4a917e, _0x547f0c;
        _0x4a917e = _0x4861c0['up']('window')['down']('form');
        _0x4a917e['updateRecord']();
        _0x4a917e = _0x4a917e['getRecord']();
        (_0x547f0c = _0x4a917e['store']) ? (_0x4a917e['phantom'] && _0x547f0c['add'](_0x4a917e),
            _0x547f0c['sync']({
                'failure': function (_0x4861c0) {
                    _0x547f0c['rejectChanges']();
                    Traccar['app']['showError'](_0x4861c0['exceptions'][0x0]['getError']()['response']);
                }
            })) : _0x4a917e['save']();
        _0x4861c0['up']('window')['close']();
    },
    'onValidityChange': function (_0x24674d, _0x239205) {
        this['lookupReference']('saveButton')['setDisabled'](!_0x239205);
    },
    'defaultFieldConfig': {
        'name': 'value',
        'reference': 'valueField',
        'allowBlank': !0x1,
        'fieldLabel': Strings['stateValue']
    },
    'onNameChange': function (_0x60ded1, _0x1e3f29) {
        var _0x683d27 = this['lookupReference'](valueField);
        if (_0x1e3f29 = _0x60ded1['getStore']()['getById'](_0x1e3f29)) {
            _0x60ded1 = Ext['clone'](this['defaultFieldConfig']);
            switch (_0x1e3f29['get']('valueType')) {
                case 'number':
                    _0x60ded1['xtype'] = 'customNumberField';
                    void 0x0 !== _0x1e3f29['get']('allowDecimals') ? _0x60ded1['allowDecimals'] = _0x1e3f29['get']('allowDecimals') : _0x60ded1['allowDecimals'] = !0x0;
                    _0x60ded1['hoursConverter'] = _0x1e3f29['get']('hoursConverter');
                    _0x60ded1['maxValue'] = _0x1e3f29['get']('maxValue');
                    _0x60ded1['minValue'] = _0x1e3f29['get']('minValue');
                    break;
                case 'boolean':
                    _0x60ded1['xtype'] = 'checkboxfield';
                    _0x60ded1['inputValue'] = !0x0;
                    _0x60ded1['uncheckedValue'] = !0x1;
                    break;
                case 'color':
                    _0x60ded1['xtype'] = 'customcolorpicker;'
                    break;
                default:
                    if (_0x1e3f29['get']('hoursConverter'))
                        switch (_0x60ded1['xtype'] = 'combobox',
                        _0x60ded1['queryMode'] = 'local',
                        _0x60ded1['editable'] = !0x1,
                        _0x1e3f29['get']('hoursConverter')) {
                            case 'distanceUnit':
                                _0x60ded1['store'] = 'DistanceUnits';
                                _0x60ded1['displayField'] = 'name';
                                _0x60ded1['valueField'] = 'key';
                                break;
                            case 'speedUnit':
                                _0x60ded1['store'] = 'SpeedUnits';
                                _0x60ded1['displayField'] = 'name';
                                _0x60ded1['valueField'] = 'key';
                                break;
                            case 'volumeUnit':
                                _0x60ded1['store'] = 'VolumeUnits';
                                _0x60ded1['displayField'] = 'fullName';
                                _0x60ded1['valueField'] = 'key';
                                break;
                            case 'timezone':
                                _0x60ded1['store'] = 'AllTimezones',
                                    _0x60ded1['displayField'] = 'key';
                        }
                    else
                        _0x60ded1['xtype'] = 'textfield';
            }
            _0x683d27['getXType']() !== _0x60ded1['xtype'] || 'customNumberField' === _0x60ded1['xtype'] && _0x683d27['hoursConverter'] !== _0x60ded1['dataType'] ? (this['getView']()['down']('form')['insert'](this['getView']()['down']('form')['items'][indexOf](_0x683d27), _0x60ded1),
                this['getView']()['down']('form')['remove'](_0x683d27)) : 'customNumberField' === _0x60ded1['xtype'] ? (_0x683d27['setConfig'](_0x60ded1),
                    _0x683d27['validate']()) : 'combobox' === _0x60ded1['xtype'] && (_0x683d27['setConfig'](_0x60ded1),
                        _0x683d27['setValue']());
        }
    }
});
Ext['define']('Traccar.view.ColorPicker', {
    'extend': Ext['form']['field']['Picker'],
    'xtype': 'customcolorpicker,'
    'config': {
        'value': '#008000'
    },
    'editable': !0x1,
    'createPicker': function () {
        return Ext['create']('Ext.picker.Color', {
            'floating': !0x0,
            'picker': this,
            'select': function (_0x3dd3b8) {
                this['picker']['setValue']('#' + _0x3dd3b8);
                this['picker']['collapse']();
            }
        });
    },
    'setValue': function (_0x342c8b) {
        this['callParent']([_0x342c8b]);
        this['setFieldStyle']('background-color:' + _0x342c8b);
    }
});
Ext['define']('traccar.view.CustomNumberField', {
    'extend': Ext['form']['field']['Number'],
    'xtype': 'customNumberField',
    'beforeEl': '<div\x20style=\x22width:100%;display:inline-table;\x22>',
    'unitEl': '<div\x20id=\x22numberUnitEl\x22\x20style=\x22display:table-cell;padding-left:10px;vertical-align:middle;width:1px;white-space:nowrap;\x22>',
    'constructor': function (_0x4bc35b) {
        var _0x128ce8 = '';
        if (_0x4bc35b['dataType']) {
            _0x4bc35b['beforeBodyEl'] = this['beforeEl'];
            switch (_0x4bc35b['hoursConverter']) {
                case 'speed':
                    _0x4bc35b['units'] = {};
                    _0x4bc35b['units']['getStore'] = function () {
                        return Ext['getStore']('SpeedUnits');
                    }
                        ;
                    _0x4bc35b['units']['getValue'] = function () {
                        return Traccar['app']['getAttributePreference']('speedUnit', 'kn');
                    }
                        ;
                    _0x128ce8 = Ext['getStore']('SpeedUnits')['findRecord']('key', _0x4bc35b['units']['getValue']())['get']('name');
                    break;
                case 'distance':
                    _0x4bc35b['units'] = {};
                    _0x4bc35b['units']['getStore'] = function () {
                        return Ext['getStore']('DistanceUnits');
                    }
                        ;
                    _0x4bc35b['units']['getValue'] = function () {
                        return Traccar['app']['getAttributePreference']('distanceUnit', 'km');
                    }
                        ;
                    _0x128ce8 = Ext['getStore']('DistanceUnits')['findRecord']('key', _0x4bc35b['units']['getValue']())['get']('name');
                    break;
                case 'frequency':
                    _0x4bc35b['listeners'] || (_0x4bc35b['listeners'] = {});
                    _0x4bc35b['listeners']['afterrender'] = function () {
                        this['units'] || (this['units'] = Ext['create']({
                            'xtype': 'combobox',
                            'renderTo': 'numberUnitEl',
                            'store': 'TimeUnits',
                            'displayField': 'name',
                            'valueField': 'key',
                            'editable': !0x1,
                            'numberField': this,
                            'value': 's',
                            'width': '70px',
                            'listeners': {
                                'select': function () {
                                    this['numberField']['step'] = this['getStore']()['convertValue'](0x1, this['getValue'](), !0x0);
                                }
                            }
                        }));
                    }
                        ;
                    break;
                case 'hours':
                    _0x4bc35b['units'] = {},
                        _0x4bc35b['units']['getStore'] = function () {
                            return Ext['getStore']('HoursUnits');
                        }
                        ,
                        _0x4bc35b['units']['getValue'] = function () {
                            return 'h';
                        }
                        ,
                        _0x128ce8 = Strings['sharedHourAbbreviation'];
            }
            _0x4bc35b['afterBodyEl'] = this['unitEl'] + _0x128ce8 + '</div></div>';
            _0x4bc35b['rawToValue'] = function (_0x4bc35b) {
                return this['units'] ? this['units']['getStore']()['convertValue'](this['parseValue'](_0x4bc35b), this['units']['getValue'](), !0x0) : this['parseValue'](_0x4bc35b);
            }
                ;
            _0x4bc35b['valueToRaw'] = function (_0x4bc35b) {
                return this['units'] ? String(this['units']['getStore']()['convertValue'](_0x4bc35b, this['units']['getValue'](), !0x1)) : String(_0x4bc35b);
            }
                ;
            _0x4bc35b['units'] && (_0x4bc35b['step'] = _0x4bc35b['units']['getStore']()['convertValue'](0x1, _0x4bc35b['units']['getValue'](), !0x0));
        }
        this['callParent'](arguments);
    }
});


Ext.define('Traccar.view.dialog.Attribute', {
    extend: Traccar.view.dialog.Base, controller: 'attribute', title: Strings.sharedAttribute, items: { xtype: 'form', listeners: { validitychange: 'onValidityChange' }, items: [{ xtype: 'textfield', reference: 'nameTextField', name: 'name', allowBlank: !1, fieldLabel: Strings.sharedName }, 
    { xtype: 'textfield', name: 'value', reference: 'valueField', allowBlank: !1, fieldLabel: Strings.stateValue }] }, buttons: [{glyph: 'xf00c@FontAwesome', reference: 'saveButton', tooltip: Strings.sharedSave, tooltipType: 'title',minWidth: 0, handler: 'onSaveClick'
    }, { glyph: 'xf00d@FontAwesome', tooltip: Strings.sharedCancel, tooltipType: 'title', minWidth: 0, handler: 'closeView' }]
});

Ext.define('Traccar.view.edit.AttributesController', {
    extend: Traccar.view.edit.ToolbarController, alias: 'controller.attributes', removeTitle: Strings.stateName, init: function () {
        var store$jscomp$0, propertyName, i = 0, attributes; store$jscomp$0 = Ext.create('Traccar.store.Attributes'); store$jscomp$0.setProxy(Ext.create('Ext.data.proxy.Memory'));
         'undefined' === typeof this.getView().record.get('attributes') && this.getView().record.set('attributes', {}); attributes = this.getView().record.get('attributes'); 
         for (propertyName in attributes) attributes.hasOwnProperty(propertyName) &&
            store$jscomp$0.add(Ext.create('Traccar.model.Attribute', { priority: i++, name: propertyName, value: attributes[propertyName] })); store$jscomp$0.addListener('add', function (store, records) { 
                var view; view = this.getView(); for (store = 0; store < records.length; store++)view.record.get('attributes')[records[store].get('name')] = records[store].get('value'); 
                view.record.dirty = !0 }, this); store$jscomp$0.addListener('update', function (store, record, operation) {
                store = this.getView(); operation === Ext.data.Model.EDIT && (record.modified.name !==
                    record.get('name') && delete store.record.get('attributes')[record.modified.name], store.record.get('attributes')[record.get('name')] = record.get('value'), store.record.dirty = !0)
            }, this); store$jscomp$0.addListener('remove', function (store, records) { var view; view = this.getView(); for (store = 0; store < records.length; store++)delete view.record.get('attributes')[records[store].get('name')]; view.record.dirty = !0 }, 
            this); this.getView().setStore(store$jscomp$0); this.getView().record instanceof Traccar.model.Device ? this.getView().attributesStore =
                'DeviceAttributes' : this.getView().record instanceof Traccar.model.Geofence ? this.getView().attributesStore = 'GeofenceAttributes' : this.getView().record instanceof Traccar.model.Group ? this.getView().attributesStore = 'GroupAttributes' : this.getView().record instanceof Traccar.model.Server ? this.getView().attributesStore = 'ServerAttributes' : this.getView().record instanceof Traccar.model.User && (this.getView().attributesStore = 'UserAttributes')
    }, comboConfig: {
        xtype: 'combobox', reference: 'nameComboField', name: 'name',
        fieldLabel: Strings.sharedName, displayField: 'name', valueField: 'key', allowBlank: !1, queryMode: 'local', listeners: { change: 'onNameChange' }
    }, initDialog: function (record) {
        var nameTextField, dialog = Ext.create('Traccar.view.dialog.Attribute'); this.getView().attributesStore && (this.comboConfig.store = this.getView().attributesStore, nameTextField = dialog.lookupReference('nameTextField'), dialog.down('form').insert(0, this.comboConfig), dialog.down('form').remove(nameTextField)); dialog.down('form').loadRecord(record);
        dialog.show()
    }, onAddClick: function () { var objectInstance = Ext.create('Traccar.model.Attribute'); objectInstance.store = this.getView().getStore(); this.initDialog(objectInstance) }, onEditClick: function () { this.initDialog(this.getView().getSelectionModel().getSelection()[0]) }
});
Ext.define('Traccar.view.edit.Toolbar', {
    extend: Ext.toolbar.Toolbar, xtype: 'editToolbar', initComponent: function () {
        this.callParent(arguments); this.add(0, [{ xtype: 'button', handler: 'onAddClick', reference: 'toolbarAddButton', glyph: 'xf067@FontAwesome', tooltip: Strings.sharedAdd, tooltipType: 'title' }, { xtype: 'button', disabled: !0, handler: 'onEditClick', reference: 'toolbarEditButton', glyph: 'xf040@FontAwesome', tooltip: Strings.sharedEdit, tooltipType: 'title' }, {
            xtype: 'button', disabled: !0, handler: 'onRemoveClick', reference: 'toolbarRemoveButton',
            glyph: 'xf00d@FontAwesome', tooltip: Strings.sharedRemove, tooltipType: 'title'
        }])
    }
});

Ext.define('Traccar.view.edit.Attributes', {
    extend: Traccar.view.GridPanel, xtype: 'attributesView', controller: 'attributes', tbar: { xtype: 'editToolbar' }, listeners: { selectionchange: 'onSelectionChange' }, columns: {
        defaults: { flex: 1, minWidth: Traccar.Style.columnWidthNormal }, items: [{ text: Strings.sharedName, dataIndex: 'name', filter: 'string', renderer: function (value) { var attribute; this.attributesStore && (attribute = Ext.getStore(this.attributesStore).getById(value)); return attribute && attribute.get('name') || value } }, {
            text: Strings.stateValue,
            dataIndex: 'value', renderer: function (value, metaData, record) { var attribute; this.attributesStore && (attribute = Ext.getStore(this.attributesStore).getById(record.get('name'))); return Traccar.AttributeFormatter.renderAttribute(value, attribute) }
        }]
    }
});

Ext.define('Traccar.view.dialog.BaseEditController', {
    extend: Ext.app.ViewController, alias: 'controller.baseEdit', onSaveClick: function (button) { var store; button = button.up('window').down('form'); button.updateRecord(); button = button.getRecord(); (store = button.store) ? (button.phantom && store.add(button), store.sync({ failure: function (batch) { store.rejectChanges(); Traccar.app.showError(batch.exceptions[0].getError().response) } })) : button.save(); this.closeView() }, showAttributesView: function (button) {
        button = button.up('window').down('form').getRecord();
        Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedAttributes, items: { xtype: 'attributesView', record: button } }).show()
    }
});

Ext.define('Traccar.view.dialog.SavedCommandController', {
    extend: Traccar.view.dialog.BaseEditController, alias: 'controller.savedCommand', defaultFieldConfig: { allowBlank: !1 }, onTypeChange: function (combo, newValue) {
        var config, parameters, parameter, record; record = combo.up('window').down('form').getRecord(); this.lookupReference('parameters').removeAll(); if ((newValue = Ext.getStore('KnownCommands').getById(newValue)) && newValue.get('parameters')) for (parameters = newValue.get('parameters'), newValue = 0; newValue < parameters.length; newValue++) {
            parameter = new Traccar.model.KnownAttribute(parameters[newValue]); config = Ext.clone(this.defaultFieldConfig); config.key = parameter.get('key'); config.fieldLabel = parameter.get('name'); record.get('attributes') && (config.value = record.get('attributes')[parameter.get('key')]); config.disabled = combo.isDisabled(); switch (parameter.get('valueType')) {
                case 'number': config.xtype = 'customNumberField'; void 0 !== parameter.get('allowDecimals') ? config.allowDecimals = parameter.get('allowDecimals') : config.allowDecimals = !0; 
                config.dataType = parameter.get('dataType'); //config.hoursConverter = parameter.get('hoursConverter'); 
                config.maxValue = parameter.get('maxValue'); config.minValue = parameter.get('minValue'); 
                break; case 'boolean': config.xtype = 'checkboxfield'; config.inputValue = !0; config.uncheckedValue = !1; break; 
                default: 'timezone' === parameter.get('dataType') ? (config.xtype = 'combobox', config.queryMode = 'local', config.displayField = 'key', config.editable = !1, 
                config.store = 'AllTimezones') : config.xtype = 'textfield'}this.lookupReference('parameters').add(config)
        }
    }, fillAttributes: function (button) {
        var record, parameters,
        attributes = {}; button = button.up('window').down('form'); button.updateRecord(); record = button.getRecord(); parameters = this.lookupReference('parameters').items.items; for (button = 0; button < parameters.length; button++)attributes[parameters[button].key] = parameters[button].getValue(); record.set('attributes', attributes)
    }, onSaveClick: function (button) { this.fillAttributes(button); this.callParent(arguments) }, onValidityChange: function (form, valid) { this.lookupReference('saveButton').setDisabled(!valid) }
});

Ext.define('Traccar.view.permissions.BaseController', {
    extend: Ext.app.ViewController, alias: 'controller.base', init: function () {
        var params = {}, linkStoreName, storeName; params[this.getView().baseObjectName] = this.getView().baseObject; linkStoreName = this.getView().linkStoreName; storeName = this.getView().storeName; linkStoreName = 'undefined' === typeof linkStoreName ? storeName : linkStoreName; this.getView().setStore(Ext.getStore(storeName)); this.getView().getStore().load({
            scope: this, callback: function () {
                Ext.create('Traccar.store.' +
                    linkStoreName).load({ params: params, scope: this, callback: function (records, operation, success) { if (success) for (operation = 0; operation < records.length; operation++)success = this.getView().getStore().getById(records[operation].getId()),  this.getView().getSelectionModel().select(success, !0, !0) } })}})
    }, onBeforeSelect: function (selection, record) {
        var data = {}; data[this.getView().baseObjectName] = this.getView().baseObject; data[this.getView().linkObjectName] = record.getId(); Ext.Ajax.request({ scope: this, url: 'api/permissions',
            jsonData: Ext.util.JSON.encode(data), callback: function (options, success, response) { success || (selection.deselect(record, !0), Traccar.app.showError(response)) }})
    }, onBeforeDeselect: function (selection, record) {
        var data = {}; data[this.getView().baseObjectName] = this.getView().baseObject; data[this.getView().linkObjectName] = record.getId(); Ext.Ajax.request({
            scope: this, method: 'DELETE', url: 'api/permissions', jsonData: Ext.util.JSON.encode(data), callback: function (options, success, response) {
                success || (selection.select(record, !0, !0), Traccar.app.showError(response))}})}});

Ext.define('Traccar.view.permissions.Base', { extend: Traccar.view.GridPanel, controller: 'base', selModel: { selType: 'checkboxmodel', checkOnly: !0, showHeaderCheckbox: !1 }, listeners: { beforedeselect: 'onBeforeDeselect', beforeselect: 'onBeforeSelect' } });

Ext.define('Traccar.view.permissions.SavedCommands', {extend: Traccar.view.permissions.Base, xtype: 'linkSavedCommandsView', columns: { items: [{ text: Strings.sharedDescription, dataIndex: 'description', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: 'string' }, { text: Strings.sharedType, dataIndex: 'type', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: { type: 'list', idField: 'type', labelField: 'name', store: 'AllCommandTypes' }, renderer: Traccar.AttributeFormatter.getFormatter('commandType') }, {
            text: Strings.notificationSms,dataIndex: 'textChannel', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: 'boolean'}]}});

Ext.define('Traccar.view.dialog.SendCommandController', {
    extend: Traccar.view.dialog.SavedCommandController, alias: 'controller.sendCommand', onSendClick: function (button) { this.fillAttributes(button); button = button.up('window').down('form').getRecord(); Ext.Ajax.request({ scope: this, url: 'api/commands/send', jsonData: button.getData(), callback: this.onSendResult }) }, onValidityChange: function (form, valid) { this.lookupReference('sendButton').setDisabled(!valid || null === this.lookupReference('commandsComboBox').getValue()) },
                onTextChannelChange: function (checkbox, newValue) { checkbox = this.lookupReference('commandType').getStore(); checkbox.getProxy().setExtraParam('textChannel', newValue); checkbox.reload() }, onCommandSelect: function (selected) {
                    var form, command = selected.getStore().getById(selected.getValue()); command.set('deviceId', this.getView().deviceId); form = selected.up('window').down('form'); selected = form.getRecord(); form.loadRecord(command); if (selected && command.get('type') === selected.get('type')) this.onTypeChange(this.lookupReference('commandType'),
                        command.get('type')); this.lookupReference('newCommandFields').setDisabled(0 !== command.getId()); this.lookupReference('sendButton').setDisabled(0 === command.getId())
                }, onSendResult: function (options, success, response) { success ? (this.closeView(), Traccar.app.showToast(202 === response.status ? Strings.commandQueued : Strings.commandSent)) : Traccar.app.showError(response) }, closeView: function () { this.lookupReference('commandsComboBox').getStore().removeAll(); this.callParent(arguments) }
            });

            Ext.define('Traccar.view.dialog.SendCommand', {
                extend: Traccar.view.dialog.Base, controller: 'sendCommand', title: Strings.commandTitle, items: [{ xtype: 'combobox', reference: 'commandsComboBox', fieldLabel: Strings.deviceCommand, displayField: 'description', valueField: 'id', store: 'DeviceCommands', queryMode: 'local', editable: !1, allowBlank: !1, listeners: { select: 'onCommandSelect' } }, {
                    xtype: 'form', listeners: { validitychange: 'onValidityChange' }, items: [{
                        xtype: 'fieldset', reference: 'newCommandFields', disabled: !0, items: [{
                            xtype: 'checkboxfield',
                            name: 'textChannel', reference: 'textChannelCheckBox', inputValue: !0, uncheckedValue: !1, fieldLabel: Strings.notificationSms, listeners: { change: 'onTextChannelChange' }
                        }, { xtype: 'combobox', name: 'type', reference: 'commandType', fieldLabel: Strings.sharedType, store: 'CommandTypes', displayField: 'name', valueField: 'type', editable: !1, allowBlank: !1, listeners: { change: 'onTypeChange' } }, { xtype: 'fieldcontainer', reference: 'parameters' }]
                    }]
                }], buttons: [{ xtype: 'tbfill' }, {
                    glyph: 'xf093@FontAwesome', tooltip: Strings.sharedSend, tooltipType: 'title',
                    minWidth: 0, disabled: !0, reference: 'sendButton', handler: 'onSendClick'
                }, { glyph: 'xf00d@FontAwesome', tooltip: Strings.sharedCancel, tooltipType: 'title', minWidth: 0, handler: 'closeView' }]
            });
            

Ext.define('Traccar.view.dialog.BaseEdit', { extend: Traccar.view.dialog.Base, controller: 'baseEdit', buttons: [{ text: Strings.sharedAttributes, handler: 'showAttributesView' }, { xtype: 'tbfill' }, { glyph: 'xf00c@FontAwesome', reference: 'saveButton', tooltip: Strings.sharedSave, tooltipType: 'title', minWidth: 0, handler: 'onSaveClick' }, { glyph: 'xf00d@FontAwesome', tooltip: Strings.sharedCancel, tooltipType: 'title', minWidth: 0, handler: 'closeView' }] });
Ext.define('Traccar.view.ClearableComboBox', { extend: Ext.form.field.ComboBox, xtype: 'clearableComboBox', editable: !1, triggers: { clear: { cls: 'iconCls: x-fa fa-times', handler: function (button) { button.clearValue() } } } }); 
Ext.define('Traccar.view.dialog.DeviceController', { extend: Traccar.view.dialog.BaseEditController, alias: 'controller.device', init: function () { Traccar.app.getUser().get('administrator') && this.lookupReference('disabledField').setHidden(!1) } });
Ext.define('Traccar.view.dialog.Device', {
                extend: Traccar.view.dialog.BaseEdit, controller: 'device', title: Strings.sharedDevice, items: {
                    xtype: 'form', items: [{ xtype: 'fieldset', title: Strings.sharedRequired, items: [{ xtype: 'textfield', name: 'name', fieldLabel: Strings.sharedName, allowBlank: !1 }, { xtype: 'textfield', name: 'uniqueId', fieldLabel: Strings.deviceIdentifier, allowBlank: !1 }] }, {
                        xtype: 'fieldset', title: Strings.sharedExtra, collapsible: !0, collapsed: !0, items: [{
                            xtype: 'clearableComboBox', name: 'groupId', fieldLabel: Strings.groupParent,
                            store: 'Groups', queryMode: 'local', displayField: 'name', valueField: 'id'
                        }, { xtype: 'textfield', name: 'phone', fieldLabel: Strings.sharedPhone }, { xtype: 'textfield', name: 'model', fieldLabel: Strings.deviceModel }, { xtype: 'textfield', name: 'contact', fieldLabel: Strings.deviceContact }, { xtype: 'combobox', name: 'category', fieldLabel: Strings.deviceCategory, store: 'DeviceImages', queryMode: 'local', displayField: 'name', valueField: 'key', editable: !1, listConfig: { getInnerTpl: function () { return '\x3ctable\x3e\x3ctr valign\x3d"middle" \x3e\x3ctd\x3e\x3cdiv align\x3d"center" style\x3d"width:40px;height:40px;" \x3e{[new XMLSerializer().serializeToString(Traccar.DeviceImages.getImageSvg(Traccar.Style.mapColorOnline, false, 0, values.key))]}\x3c/div\x3e\x3c/td\x3e\x3ctd\x3e{name}\x3c/td\x3e\x3c/tr\x3e\x3c/table\x3e' } } },
                        { xtype: 'checkboxfield', inputValue: !0, uncheckedValue: !1, name: 'disabled', fieldLabel: Strings.sharedDisabled, hidden: !0, reference: 'disabledField' }]
                    }]
                }
            });            


Ext.define('Traccar.view.permissions.Geofences', { extend: Traccar.view.permissions.Base, xtype: 'linkGeofencesView', columns: { items: [{ text: Strings.sharedName, dataIndex: 'name', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: 'string' }, { text: Strings.sharedCalendar, dataIndex: 'calendarId', flex: 1, minWidth: Traccar.Style.columnWidthNormal, hidden: !0, filter: { type: 'list', labelField: 'name', store: 'AllCalendars' }, renderer: Traccar.AttributeFormatter.getFormatter('calendarId') }] } });
Ext.define('Traccar.view.permissions.ComputedAttributes', { extend: Traccar.view.permissions.Base, xtype: 'linkComputedAttributesView', columns: { items: [{ text: Strings.sharedDescription, dataIndex: 'description', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: 'string' }, { text: Strings.sharedAttribute, dataIndex: 'attribute', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: { type: 'list', labelField: 'name', store: 'PositionAttributes' }, renderer: function (value) { return Ext.getStore('PositionAttributes').getAttributeName(value) } }] } });
Ext.define('Traccar.view.permissions.Drivers', { extend: Traccar.view.permissions.Base, xtype: 'linkDriversView', columns: { items: [{ text: Strings.sharedName, dataIndex: 'name', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: 'string' }, { text: Strings.deviceIdentifier, dataIndex: 'uniqueId', flex: 1, minWidth: Traccar.Style.columnWidthNormal, filter: 'string' }] } });
                     
Ext.define('Traccar.view.edit.DevicesController', {
    extend: Traccar.view.edit.ToolbarController, alias: 'controller.devices', config: { listen: { controller: { '*': { selectreport: 'selectReport' }, root: { selectdevice: 'selectDevice' }, 
    map: { selectdevice: 'selectDevice', deselectfeature: 'deselectFeature' } }, store: { '#Devices': { update: 'onUpdateDevice' } } } }, objectModel: 'Traccar.model.Device', 
    objectDialog: 'Traccar.view.dialog.Device', removeTitle: Strings.sharedDevice, init: function () {
        var self = this, readonly, deviceReadonly; deviceReadonly =
            Traccar.app.getPreference('deviceReadonly', !1) && !Traccar.app.getUser().get('administrator'); 
            readonly = Traccar.app.getPreference('readonly', !1) && !Traccar.app.getUser().get('administrator'); 
            this.lookupReference('toolbarAddButton').setDisabled(readonly || deviceReadonly); this.lookupReference('toolbarDeviceMenu').setHidden(readonly || deviceReadonly); 
            setInterval(function () { self.getView().getView().refresh() }, Traccar.Style.refreshPeriod)
    }, onCommandClick: function () {
        var deviceId, dialog, typesStore; deviceId = this.getView().getSelectionModel().getSelection()[0].get('id');
        dialog = Ext.create('Traccar.view.dialog.SendCommand'); dialog.deviceId = deviceId; typesStore = dialog.lookupReference('commandsComboBox').getStore(); typesStore.getProxy().setExtraParam('deviceId', deviceId); Traccar.app.getPreference('limitCommands', !1) || typesStore.add({ id: 0, description: Strings.sharedNew }); typesStore.load({ addRecords: !0 }); typesStore = dialog.lookupReference('commandType').getStore(); typesStore.getProxy().setExtraParam('deviceId', deviceId); typesStore.load(); dialog.show()
    }, updateButtons: function (selected) {
        var readonly,
        deviceReadonly, empty; deviceReadonly = Traccar.app.getPreference('deviceReadonly', !1) && !Traccar.app.getUser().get('administrator'); readonly = Traccar.app.getPreference('readonly', !1) && !Traccar.app.getUser().get('administrator'); empty = 0 === selected.length; this.lookupReference('toolbarEditButton').setDisabled(empty || readonly || deviceReadonly); this.lookupReference('toolbarRemoveButton').setDisabled(empty || readonly || deviceReadonly); deviceReadonly = this.lookupReference('toolbarDeviceMenu'); deviceReadonly.device =
            empty ? null : selected[0]; deviceReadonly.setDisabled(empty); this.lookupReference('deviceCommandButton').setDisabled(empty || readonly)
    }, onSelectionChange: function (selection, selected) { this.updateButtons(selected); 0 < selected.length ? this.fireEvent('selectdevice', selected[0], !0) : this.fireEvent('deselectfeature') }, selectDevice: function (device) { this.getView().getSelectionModel().select([device], !1, !0); this.updateButtons(this.getView().getSelectionModel().getSelected().items); this.getView().getView().focusRow(device) 
    // colocar essa parte - ver
        // null != panorama && (pressedDevice = device['get']('id'), this['getView']()['getSelectionModel']()['getSelection'](), device = Ext['getStore']('LatestPositions')['findRecord']('deviceId', pressedDevice, 0x0, !0x1, !0x1, !0x0),        panorama['setPosition']({            'lat': device['get']('latitude'),            'lng': device['get']('longitude')        }),        panorama['setPov']({            'heading': device['get']('course'),            'pitch': 0x0        }));
  null != panorama && (pressedDevice = device.get('id'), this.getView().getSelectionModel().getSelection(), device = Ext.getStore('LatestPositions').findRecord('deviceId', pressedDevice, 0, !1, !1, !0), panorama.setPosition({ 'lat': device.get('latitude'), 'lng': device.get('longitude') }), panorama.setPov({ 'heading': device.get('course'), 'pitch': 0 }));
 

    }, selectReport: function (position) { void 0 !== position && this.deselectFeature() }, onUpdateDevice: function () { this.updateButtons(this.getView().getSelectionModel().getSelected().items) }, deselectFeature: function () { this.getView().getSelectionModel().deselectAll() }

});            
         
            


Ext['define']('Traccar.view.edit.DevicesController', {
    'extend': Traccar['view']['edit']['ToolbarController'],'alias': 'controller.devices','config': { 'listen': { 'controller': { '*': { 'selectreport': 'selectReport' }, 'root': { 'selectdevice': 'selectDevice' }, 
'map': { 'selectdevice': 'selectDevice', 'deselectfeature': 'deselectFeature' } }, 'store': { '#Devices': { 'update': 'onUpdateDevice' } }  }},'objectModel': 'Traccar.model.Device',
'objectDialog': 'Traccar.view.dialog.Device','removeTitle': Strings['sharedDevice'],'init': function () {    
    var self = this, readonly, deviceReadonly;    deviceReadonly = 
    Traccar['app']['getPreference']('deviceReadonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator'); 
    readonly = Traccar['app']['getPreference']('readonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator'); 
    this['lookupReference']('toolbarAddButton')['setDisabled'](readonly || deviceReadonly);  this['lookupReference']('toolbarDeviceMenu')['setHidden'](readonly || deviceReadonly); 
    setInterval(function () { self['getView']()['getView']()['refresh'](); }, Traccar['Style']['refreshPeriod']
    );},'onCommandClick': function () {    
    var deviceId, dialog, typesStore;    deviceId = this['getView']()['getSelectionModel']()['getSelection']()[0x0]['get']('id');    
    dialog = Ext['create']('Traccar.view.dialog.SendCommand'); dialog['deviceId'] = deviceId; typesStore = dialog['lookupReference']('commandsComboBox')['getStore'](); typesStore['getProxy']()['setExtraParam']('deviceId', deviceId); Traccar['app']['getPreference']('limitCommands', !0x1) || typesStore['add']({ 'id': 0x0, 'description': Strings['sharedNew'] }); typesStore['load']({ 'addRecords': !0x0 }); typesStore = dialog['lookupReference']('commandType')['getStore']();    typesStore['getProxy']()['setExtraParam']('deviceId', deviceId);    typesStore['load']();    dialog['show']();
},'updateButtons': function (selected) {    
    var readonly, deviceReadonly, empty;    deviceReadonly = Traccar['app']['getPreference']('deviceReadonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator'); readonly = Traccar['app']['getPreference']('readonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator');    empty = 0x0 === selected['length'];    this['lookupReference']('toolbarEditButton')['setDisabled'](empty || readonly || deviceReadonly);    this['lookupReference']('toolbarRemoveButton')['setDisabled'](empty || readonly || deviceReadonly);    deviceReadonly = this['lookupReference']('toolbarDeviceMenu');    deviceReadonly['device'] = 
    empty ? null : selected[0x0];    deviceReadonly['setDisabled'](empty);    this['lookupReference']('deviceCommandButton')['setDisabled'](empty || readonly);}
    ,'onSelectionChange': function (selection, selected) { this['updateButtons'](selected);    0x0 < selected['length'] ? this['fireEvent']('selectdevice', selected[0x0], !0x0) : this['fireEvent']('deselectfeature');},'selectDevice': function (device) {    this['getView']()['getSelectionModel']()['select']([device], !0x1, !0x0);    this['updateButtons'](this['getView']()['getSelectionModel']()['getSelected']()['items']);    this['getView']()['getView']()['focusRow'](device);    
   
    null != panorama && (pressedDevice = device['get']('id'), this['getView']()['getSelectionModel']()['getSelection'](), device = Ext['getStore']('LatestPositions')['findRecord']('deviceId', pressedDevice, 0x0, !0x1, !0x1, !0x0),        panorama['setPosition']({            'lat': device['get']('latitude'),            'lng': device['get']('longitude')        }),        panorama['setPov']({            'heading': device['get']('course'),            'pitch': 0x0        }));

},'selectReport': function (position) { void 0x0 !== position && this['deselectFeature']();},'onUpdateDevice': function () { this['updateButtons'](this['getView']()['getSelectionModel']()['getSelected']()['items']);},'deselectFeature': function () {    this['getView']()['getSelectionModel']()['deselectAll']();}
});

Ext['define']('Traccar.view.ArrayListFilter', {
    'extend': Ext['grid']['filters']['filter']['List'],
    'alias': 'grid.filter.arraylist',
    'type': 'arraylist',
    'constructor': function (_0x38a68a) {
        this['callParent']([_0x38a68a]);
        this['filter']['setFilterFn'](function (_0x38a68a) {
            var _0x32a2b5, _0x257926;
            _0x32a2b5 = _0x38a68a['get'](this['getProperty']());
            _0x257926 = this['getValue']();
            if (Ext['isArray'](_0x32a2b5))
                for (_0x38a68a = 0x0; _0x38a68a < _0x32a2b5['length']; _0x38a68a++) {
                    if (-0x1 !== _0x257926[indexOf](_0x32a2b5[_0x38a68a]))
                        return !0x0;
                }
            else if (_0x32a2b5['match'](/[ ,]+/))
                for (_0x32a2b5 = _0x32a2b5['split'](/[ ,]+/)['filter'](Boolean),
                    _0x38a68a = 0x0; _0x38a68a < _0x32a2b5['length']; _0x38a68a++) {
                    if (-0x1 !== _0x257926[indexOf](_0x32a2b5[_0x38a68a]))
                        return !0x0;
                }
            else if (-0x1 !== _0x257926[indexOf](_0x32a2b5))
                return !0x0;
            return !0x1;
        });
    }
});
Ext['define']('Traccar.view.permissions.Notifications', {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': 'linkNotificationsView',
    'columns': {
        'items': [{
            'text': Strings['notificationType'],
            'dataIndex': 'type',
            'flex': 0x2,
            'renderer': function (_0x3f64e0) {
                return Traccar['app']['getEventString'](_0x3f64e0);
            },
            'filter': {
                'type': 'list',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificationTypes'
            }
        }, {
            'text': Strings['notificationAlways'],
            'dataIndex': 'always',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'renderer': Traccar['AttributeFormatter']['getFormatter']('always'),
            'filter': 'boolean'
        }, {
            'text': Strings['notificationNotificators'],
            'dataIndex': 'notificators',
            'flex': 0x2,
            'filter': {
                'type': 'arraylist',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificators'
            },
            'renderer': function (_0x23d2fa) {
                var _0x2cafa0 = '', _0x3025f1;
                if (_0x23d2fa)
                    for (_0x3025f1 = _0x23d2fa['split'](/[ ,]+/)['filter'](Boolean),
                        _0x23d2fa = 0x0; _0x23d2fa < _0x3025f1['length']; _0x23d2fa++)
                        _0x2cafa0 += Traccar['app']['getNotificatorString'](_0x3025f1[_0x23d2fa]) + (_0x23d2fa < _0x3025f1['length'] - 0x1 ? ',\x20' : '');
                return _0x2cafa0;
            }
        }, {
            'text': Strings['sharedCalendar'],
            'dataIndex': 'calendarId',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define']('Traccar.view.dialog.SelectDeviceController', {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.selectDevice',
    'onSaveClick': function (_0x35e9e0) {
        var _0x44441c, _0x44f27b;
        _0x44441c = this['lookupReference']('deviceField')['getValue']();
        _0x44f27b = this['getView']()['record']['data'];
        Ext['Ajax']['request']({
            'url': 'api/attributes/computed/test?deviceId=' + _0x44441c,
            'method': 'POST',
            'jsonData': Ext['util']['JSON']['encode'](_0x44f27b),
            'callback': function (_0x35e9e0, _0x44441c, _0x44f27b) {
                _0x44441c ? Ext['Msg']['alert'](Strings['sharedInfoTitle'], _0x44f27b['responseText'] || _0x44f27b['statusText']) : Traccar['app']['showError'](_0x44f27b);
            }
        });
        _0x35e9e0['up']('window')['close']();
    },
    'onDeviceChange': function (_0x2cb989, _0x59f2d7) {
        this['lookupReference']('saveButton')['setDisabled'](null === _0x59f2d7);
    }
});
Ext['define']('Traccar.view.dialog.SelectDevice', {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': 'selectDevice',
    'title': Strings['sharedDevice'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'combobox',
            'reference': 'deviceField',
            'store': 'Devices',
            'queryMode': 'local',
            'displayField': 'name',
            'valueField': 'id',
            'editable': !0x1,
            'listeners': {
                'change': 'onDeviceChange'
            }
        }]
    },
    'buttons': [{
        'glyph': 'xf00c@FontAwesome',
        'reference': 'saveButton',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick',
        'disabled': !0x0
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define']('Traccar.view.dialog.ComputedAttributeController', {
    'extend': Traccar['view']['dialog']['BaseEditController'],
    'alias': 'controller.computedAttribute',
    'onAttributeChange': function (_0x2f09b0, _0x2c7f07) {
        (_0x2f09b0 = Ext['getStore']('PositionAttributes')['getById'](_0x2c7f07)) ? (this['getView']()['lookupReference']('typeComboField')['setValue'](_0x2f09b0['get']('valueType')),
            this['getView']()['lookupReference']('typeComboField')[_0xc11a('0x4a8')](!0x0)) : this['getView']()['lookupReference']('typeComboField')['setReadOnly'](!0x1);
    },
    'onCheckClick': function (_0x48a49c) {
        var _0x5d88b6;
        _0x5d88b6 = Ext['create']('Traccar.view.dialog.SelectDevice');
        _0x48a49c = _0x48a49c['up']('window')['down']('form');
        _0x48a49c['updateRecord']();
        _0x5d88b6['record'] = _0x48a49c['getRecord']();
        _0x5d88b6['show']();
    }
});
Ext['define']('Traccar.view.dialog.ComputedAttribute', {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': 'computedAttribute',
    'title': Strings['sharedComputedAttribute'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'textfield',
            'name': 'description',
            'fieldLabel': Strings['sharedDescription']
        }, {
            'xtype': 'combobox',
            'name': 'attribute',
            'fieldLabel': Strings['sharedAttribute'],
            'store': 'PositionAttributes',
            'displayField': 'name',
            'valueField': 'key',
            'listeners': {
                'change': 'onAttributeChange'
            }
        }, {
            'xtype': 'textareafield',
            'name': 'expression',
            'fieldLabel': Strings['sharedExpression'],
            'allowBlank': !0x1
        }, {
            'xtype': 'combobox',
            'name': 'type',
            'reference': 'typeComboField',
            'store': 'AttributeValueTypes',
            'fieldLabel': Strings['sharedType'],
            'displayField': 'name',
            'valueField': 'id',
            'editable': !0x1
        }]
    },
    'buttons': [{
        'glyph': 'xf128@FontAwesome',
        'tooltip': Strings['sharedCheckComputedAttribute'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onCheckClick'
    }, {
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define']('Traccar.view.edit.ComputedAttributesController', {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.computedAttributes',
    'objectModel': 'Traccar.model.ComputedAttribute',
    'objectDialog': 'Traccar.view.dialog.ComputedAttribute',
    'removeTitle': Strings['sharedComputedAttribute']
});
Ext['define']('Traccar.view.edit.ComputedAttributes', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'computedAttributesView',
    'controller': 'computedAttributes',
    'store': 'ComputedAttributes',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedDescription'],
            'dataIndex': 'description',
            'filter': 'string'
        }, {
            'text': Strings['sharedAttribute'],
            'dataIndex': 'attribute',
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'PositionAttributes'
            },
            'renderer': function (_0x525b91) {
                return Ext['getStore']('PositionAttributes')['getAttributeName'](_0x525b91);
            }
        }, {
            'text': Strings['sharedExpression'],
            'dataIndex': 'expression'
        }, {
            'text': Strings['sharedType'],
            'dataIndex': 'type',
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AttributeValueTypes'
            },
            'renderer': function (_0x33af9d) {
                var _0x79ab39 = Ext['getStore']('AttributeValueTypes')['getById'](_0x33af9d);
                return _0x79ab39 ? _0x79ab39['get']('name') : _0x33af9d;
            }
        }]
    }
});
Ext['define']('Traccar.view.permissions.Maintenances', {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': 'linkMaintenancesView',
    'columns': {
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }, {
            'text': Strings['sharedType'],
            'dataIndex': 'type',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': {
                'type': 'list',
                'idField': 'key',
                'labelField': 'name',
                'store': 'MaintenanceTypes'
            },
            'renderer': function (_0x93b908) {
                var _0x5622e0 = Ext['getStore']('MaintenanceTypes')['getById'](_0x93b908);
                return _0x5622e0 && _0x5622e0['get']('name') || _0x93b908;
            }
        }, {
            'text': Strings['maintenanceStart'],
            'dataIndex': 'start',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'renderer': function (_0x500b7c, _0x11d990, _0x16ad9a) {
                return Traccar['AttributeFormatter']['renderAttribute'](_0x500b7c, Ext['getStore']('MaintenanceTypes')['getById'](_0x16ad9a['get']('type')));
            }
        }, {
            'text': Strings['maintenancePeriod'],
            'dataIndex': 'period',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'renderer': function (_0x2b0563, _0x566ce9, _0x79c925) {
                return Traccar['AttributeFormatter']['renderAttribute'](_0x2b0563, Ext['getStore']('MaintenanceTypes')['getById'](_0x79c925['get']('type')));
            }
        }]
    }
});
Ext['define']('Traccar.view.DeviceMenuController', {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.deviceMenu',
    'init': function () {
        this['lookupReference']('menuDriversButton')['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers'));
        this['lookupReference']('menuComputedAttributesButton')['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference']('menuCommandsButton')['setHidden'](Traccar['app']['getPreference']('limitCommands', !0x1));
        this['lookupReference']('menuDeviceDistanceButton')['setHidden'](!Traccar['app']['getUser']()['get']('administrator') && 0x0 === Traccar['app']['getUser']()['get']('userLimit') || Traccar['app']['getVehicleFeaturesDisabled']());
        this['lookupReference']('menuMaintenancesButton')['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));},
    'onGeofencesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedGeofences'],
            'items': {
                'xtype': 'linkGeofencesView',
                'baseObjectName': 'deviceId',
                'linkObjectName': 'geofenceId',
                'storeName': 'Geofences',
                'baseObject': this['getView']()['up']('deviceMenu')['device']['getId']()
            }
        })['show']();
    },
    'onNotificationsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedNotifications'],
            'items': {
                'xtype': 'linkNotificationsView',
                'baseObjectName': 'deviceId',
                'linkObjectName': 'notificationId',
                'storeName': 'Notifications',
                'baseObject': this['getView']()['up']('deviceMenu')['device']['getId']()
            }
        })['show']();
    },
    'onComputedAttributesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': 'linkComputedAttributesView',
                'baseObjectName': 'deviceId',
                'linkObjectName': 'attributeId',
                'storeName': 'ComputedAttributes',
                'baseObject': this['getView']()['up']('deviceMenu')['device']['getId']()
            }
        })['show']();
    },
    'onDriversClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedDrivers'],
            'items': {
                'xtype': 'linkDriversView',
                'baseObjectName': 'deviceId',
                'linkObjectName': 'driverId',
                'storeName': 'Drivers',
                'baseObject': this['getView']()['up']('deviceMenu')['device']['getId']()
            }
        })['show']();
    },
    'onCommandsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedSavedCommands'],
            'items': {
                'xtype': 'linkSavedCommandsView',
                'baseObjectName': 'deviceId',
                'linkObjectName': 'commandId',
                'storeName': 'Commands',
                'baseObject': this['getView']()['up']('deviceMenu')['device']['getId']()
            }
        })['show']();
    },
    'onMaintenancesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedMaintenances'],
            'items': {
                'xtype': 'linkMaintenancesView',
                'baseObjectName': 'deviceId',
                'linkObjectName': 'maintenanceId',
                'storeName': 'Maintenances',
                'baseObject': this['getView']()['up']('deviceMenu')['device']['getId']()
            }
        })['show']();
    },
    'onDeviceDistanceClick': function () {
        var _0x2ac858, _0x395bf4 = Ext['create']('Traccar.view.dialog.DeviceDistance');
        _0x395bf4['deviceId'] = this['getView']()['up']('deviceMenu')['device']['getId']();
        (_0x2ac858 = Ext['getStore']('LatestPositions')['findRecord']('deviceId', _0x395bf4['deviceId'], 0x0, !0x1, !0x1, !0x0)) && _0x395bf4['lookupReference']('totalDistance')['setValue'](_0x2ac858['get']('attributes')['totalDistance']);
        _0x395bf4['show']();
    }
});
Ext['define']('Traccar.view.DeviceMenu', {
    'extend': Ext['button']['Button'],
    'xtype': 'deviceMenu',
    'glyph': 'xf013@FontAwesome',
    'tooltip': Strings['settingsTitle'],
    'tooltipType': 'title',
    'menu': {
        'controller': 'deviceMenu',
        'items': [{
            'text': Strings['sharedDrivers'],
            'glyph': 'xf1b9@FontAwesome',
            'handler': 'onDriversClick',
            'reference': 'menuDriversButton'
        }, {
            'text': Strings['sharedGeofences'],
            'glyph': 'xf21d@FontAwesome',
            'handler': 'onGeofencesClick',
            'reference': 'menuGeofencesButton'
        }, {
            'text': Strings['sharedNotifications'],
            'glyph': 'xf003@FontAwesome',
            'handler': 'onNotificationsClick',
            'reference': 'menuNotificationsButton'
        }, {
            'text': Strings['sharedComputedAttributes'],
            'glyph': 'xf0ae@FontAwesome',
            'handler': 'onComputedAttributesClick',
            'reference': 'menuComputedAttributesButton'
        }, {
            'text': Strings['sharedSavedCommands'],
            'glyph': 'xf093@FontAwesome',
            'handler': 'onCommandsClick',
            'reference': 'menuCommandsButton'
        }, {
            'text': Strings['sharedMaintenances'],
            'glyph': 'xf0ad@FontAwesome',
            'handler': 'onMaintenancesClick',
            'reference': 'menuMaintenancesButton'
        }, {
            'hidden': !0x0,
            'text': Strings['sharedDeviceDistance'],
            'glyph': 'xf0e4@FontAwesome',
            'handler': 'onDeviceDistanceClick',
            'reference': 'menuDeviceDistanceButton'
        }]
    }
});
Ext['define']('Traccar.view.edit.Devices', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'devicesView',
    'controller': 'devices',
    'store': 'VisibleDevices',
    'stateful': !0x0,
    'stateId': 'devices-grid',
    'tbar': {
        'componentCls': 'toolbar-header-style',
        'defaults': {
            'xtype': 'button',
            'disabled': !0x0,
            'tooltipType': 'title'
        },
        'items': [{
            'xtype': 'tbtext',
            'html': Strings['deviceTitle'],
            'baseCls': 'x-panel-header-title-default'
        }, {
            'xtype': 'tbfill',
            'disabled': !0x1
        }, {
            'handler': 'onAddClick',
            'reference': 'toolbarAddButton',
            'glyph': 'xf067@FontAwesome',
            'tooltip': Strings['sharedAdd']
        }, {
            'handler': 'onEditClick',
            'reference': 'toolbarEditButton',
            'glyph': 'xf040@FontAwesome',
            'tooltip': Strings['sharedEdit']
        }, {
            'handler': 'onRemoveClick',
            'reference': 'toolbarRemoveButton',
            'glyph': 'xf00d@FontAwesome',
            'tooltip': Strings['sharedRemove']
        }, {
            'handler': 'onCommandClick',
            'reference': 'deviceCommandButton',
            'glyph': 'xf093@FontAwesome',
            'tooltip': Strings['deviceCommand']
        }, {
            'xtype': 'deviceMenu',
            'reference': 'toolbarDeviceMenu',
            'enableToggle': !0x1
        }]
    },
    'bbar': [{
        'xtype': 'tbtext',
        'html': 'Buscar'
    }, {
        'xtype': 'textfield',
        'flex': !0x0,
        'listeners': {
            'change': function () {
                this['up']('grid')['store']['clearFilter']();
                var _0x50decc = RegExp(this['getValue'](), 'i');
                this['up']('grid')['store']['filter'](new Ext[('util')]['Filter']({
                    'filterFn': function (_0x3e097b) {
                        var _0x452216 = !0x1;
                        Ext['Object']['each'](_0x3e097b['data'], function (_0x3e097b, _0xa5d84d) {
                            _0x452216 = _0x452216 || _0x50decc['test'](String(_0xa5d84d));
                        });
                        return _0x452216;
                    }
                }));
            }
        }
    }],
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'viewConfig': {
        'enableTextSelection': !0x0,
        'getRowClass': function (_0x1c2a92) {
            var _0x348c66 = ''
                , _0x18f5df = _0x1c2a92['get']('status');
            _0x1c2a92['get']('disabled') && (_0x348c66 = 'view-item-disabled\x20');
            _0x18f5df && (_0x348c66 += Ext['getStore']('DeviceStatuses')['getById'](_0x18f5df)['get']('color'));
            return _0x348c66;
        }
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings['deviceIdentifier'],
            'dataIndex': 'uniqueId',
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings['sharedPhone'],
            'dataIndex': 'phone',
            'hidden': !0x0
        }, {
            'text': Strings['deviceModel'],
            'dataIndex': 'model',
            'hidden': !0x0
        }, {
            'text': Strings['deviceContact'],
            'dataIndex': 'contact',
            'hidden': !0x0
        }, {
            'text': Strings['groupDialog'],
            'dataIndex': 'groupId',
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'Groups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }, {
            'text': Strings['sharedDisabled'],
            'dataIndex': 'disabled',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('disabled'),
            'hidden': !0x0,
            'filter': 'boolean'
        }, {
            'text': Strings['sharedGeofences'],
            'dataIndex': 'geofenceIds',
            'hidden': !0x0,
            'filter': {
                'type': 'arraylist',
                'idField': 'id',
                'labelField': 'name',
                'store': 'Geofences'
            },
            'renderer': function (_0x3b0b74) {
                var _0x5cd504, _0x298495, _0x24a094 = '';
                if (Ext['isArray'](_0x3b0b74))
                    for (_0x5cd504 = 0x0; _0x5cd504 < _0x3b0b74['length']; _0x5cd504++)
                        (_0x298495 = Traccar['AttributeFormatter']['geofenceIdFormatter'](_0x3b0b74[_0x5cd504])) && (_0x24a094 += _0x298495 + (_0x5cd504 < _0x3b0b74['length'] - 0x1 ? ',\x20' : ''));
                return _0x24a094;
            }
        }, {
            'text': Strings['deviceStatus'],
            'dataIndex': 'status',
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'DeviceStatuses'
            },
            'renderer': function (_0xfd97da) {
                return _0xfd97da && (_0xfd97da = Ext['getStore']('DeviceStatuses')['getById'](_0xfd97da)) ? _0xfd97da['get']('name') : null;
            }
        }, {
            'text': Strings['deviceLastUpdate'],
            'dataIndex': 'lastUpdate',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('lastUpdate')
        }]
    }
});
Ext['define']('Traccar.view.StateController', {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.state',
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'selectdevice': 'selectDevice',
                    'selectreport': 'selectReport',
                    'deselectfeature': 'deselectFeature'
                }
            },
            'global': {
                'stategeocode': 'onGeocode'
            },
            'store': {
                '#LatestPositions': {
                    'add': 'updateLatest',
                    'update': 'updateLatest'
                },
                '#ReportRoute': {
                    'clear': 'clearReport'
                }
            }
        }
    },
    init: function () {
        var i, attributesList; (Traccar.app.getUser().get('administrator') || !Traccar.app.getUser().get('deviceReadonly') && !Traccar.app.getPreference('readonly',!1)) && this.lookupReference('computedAttributesButton').setDisabled(Traccar.app.getBooleanAttributePreference('ui.disableComputedAttributes'));
         i = Traccar.app.getAttributePreference('ui.hidePositionAttributes'); this.hideAttributes = {};
         if (i) for (attributesList = i.split(/[ ,]+/).filter(Boolean), i = 0; i < attributesList.length; i++)this.hideAttributes[attributesList[i]] = !0
        }, onComputedAttributesClick: function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedComputedAttributes, items: { xtype: 'computedAttributesView' } }).show() },

            
    'keys': function () {
        var _0x58f88a, _0xb16fa, _0xf782ea;
        _0xf782ea = {};
        _0xb16fa = 'fixTime\x20latitude\x20longitude\x20valid\x20accuracy\x20altitude\x20speed\x20course\x20address\x20protocol'['split']('\x20');
        for (_0x58f88a = 0x0; _0x58f88a < _0xb16fa['length']; _0x58f88a++)
            _0xf782ea[_0xb16fa[_0x58f88a]] = {
                'priority': _0x58f88a,
                'name': Strings['position' + _0xb16fa[_0x58f88a]['replace'](/^\w/g, function (_0x58f88a) {
                    return _0x58f88a['toUpperCase']();
                })]
            };
        return _0xf782ea;
    }(),
    'updateLatest': function (_0x174441, _0x5eac42) {
        Ext['isArray'](_0x5eac42) || (_0x5eac42 = [_0x5eac42]);
        for (_0x174441 = 0x0; _0x174441 < _0x5eac42['length']; _0x174441++)
            this['deviceId'] === _0x5eac42[_0x174441]['get']('deviceId') && (this['position'] = _0x5eac42[_0x174441],
                this['updatePosition']());
    },
    'formatValue': function (_0x837eb1) {
        return 'number' === typeof id ? Number(_0x837eb1['toFixed'](0x2)) : _0x837eb1;
    },
    'findAttribute': function (_0x17472d) {
        return _0x17472d['get']('deviceId') === this['position']['get']('deviceId') && _0x17472d['get']('attribute') === this['lookupAttribute'];
    },
    'updatePosition': function () {
        var _0x429dae, _0x306467, _0x2263a8, _0x477d09, _0x32c34e;
        _0x306467 = Ext['getStore']('Attributes');
        _0x306467['removeAll']();
        for (_0x2263a8 in this['position']['data'])
            this['position']['data']['hasOwnProperty'](_0x2263a8) && void 0x0 !== this['keys'][_0x2263a8] && _0x306467['add'](Ext['create']('Traccar.model.Attribute', {
                'priority': this['keys'][_0x2263a8]['priority'],
                'name': this['keys'][_0x2263a8]['name'],
                'value': Traccar['AttributeFormatter']['getFormatter'](_0x2263a8)(this['position']['get'](_0x2263a8))
            }));
        _0x429dae = this['position']['get']('attributes');
        if (_0x429dae instanceof Object)
            for (_0x2263a8 in _0x429dae)
                _0x429dae['hasOwnProperty'](_0x2263a8) && !this['hideAttributes'][_0x2263a8] && (this['lookupAttribute'] = _0x2263a8,
                    _0x477d09 = Ext['getStore']('PositionAttributes')['getAttributeName'](_0x2263a8, !0x0),
                    _0x32c34e = void 0x0 !== this['position']['get']('attribute.' + _0x2263a8) ? Traccar['AttributeFormatter']['getAttributeFormatter'](_0x2263a8)(this['position']['get']('attribute.' + _0x2263a8)) : Traccar['AttributeFormatter']['defaultFormatter'](_0x429dae[_0x2263a8]),
                    _0x306467['add'](Ext['create']('Traccar.model.Attribute', {
                        'priority': 0x400,
                        'name': _0x477d09,
                        'attribute': _0x2263a8,
                        'value': _0x32c34e
                    })));
    },
    'selectDevice': function (_0x43256c) {
        this['deviceId'] = _0x43256c['get']('id');
        (_0x43256c = Ext['getStore']('LatestPositions')['findRecord']('deviceId', this['deviceId'], 0x0, !0x1, !0x1, !0x0)) ? (this['position'] = _0x43256c,
            this['updatePosition']()) : (this['position'] = null,
                Ext['getStore']('Attributes')['removeAll']());
    },
    'selectReport': function (_0x270c0) {
        _0x270c0 instanceof Traccar['model']['Position'] && (this['deviceId'] = null,
            this['position'] = _0x270c0,
            this['updatePosition']());
    },
    'deselectFeature': function () {
        this['position'] = this['deviceId'] = null;
        Ext['getStore']('Attributes')['removeAll']();
    },
    'clearReport': function () {
        this['deviceId'] || (this['position'] = null,
            Ext['getStore']('Attributes')['removeAll']());
    },
    'onGeocode': function () {
        var _0x51bd7f = this['position']['getId']();
        this['position']['get']('address') || Ext['Ajax']['request']({
            'scope': this,
            'method': 'GET',
            'url': 'api/server/geocode',
            'params': {
                'latitude': this['position']['get']('latitude'),
                'longitude': this['position']['get']('longitude')
            },
            'success': function (_0x2d410) {
                this['position'] && this['position']['getId']() === _0x51bd7f && (this['position']['set']('address', _0x2d410['responseText']),
                    this['updatePosition']());
            },
            'failure': function (_0x51bd7f) {
                Traccar['app']['showError'](_0x51bd7f);
            }
        });
    }
});
Ext['define']('Traccar.view.State', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'stateView',
    'controller': 'state',
    'store': 'Attributes',
    'stateful': !0x0,
    'stateId': 'state-grid',
    'tbar': {
        'componentCls': 'toolbar-header-style',
        'items': [{
            'xtype': 'tbtext',
            'html': Strings['stateTitle'],
            'baseCls': 'x-panel-header-title-default'
        }, {
            'xtype': 'tbfill'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onComputedAttributesClick',
            'reference': 'computedAttributesButton',
            'glyph': 'xf0ae@FontAwesome',
            'tooltip': Strings['sharedComputedAttributes'],
            'tooltipType': 'title'
        }]
    },
    'columns': {
        'defaults': {
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'flex': 0x1
        },
        'items': [{
            'text': Strings['stateName'],
            'dataIndex': 'name'
        }, {
            'text': Strings['stateValue'],
            'dataIndex': 'value',
            'cellWrap': !0x0,
            'renderer': function (_0x5bcc16, _0x422300, _0x29d347) {
                if ('alarm' === _0x29d347['get']('attribute'))
                    _0x422300['tdCls'] = 'view-color-red';
                else {
                    if (_0x29d347['get']('name') === Strings['positionAddress'] && !_0x5bcc16)
                        return '<a href="#" onclick="Ext.fireEvent('stategeocode')" >' + Strings['sharedShowAddress'] + '</a>';
                    if (_0x29d347['get']('name') === Strings['positionImage'] || _0x29d347['get']('name') === Strings[_0xc11a('0x511')])
                        if (_0x422300 = this[_0xc11a('0x512')]()['position'])
                            if (_0x422300 = Ext['getStore']('Devices')['getById'](_0x422300['get']('deviceId')))
                                return _0xc11a('0x513') + _0x422300['get']('uniqueId') + '/' + _0x5bcc16 + _0xc11a('0x514') + _0x5bcc16 + '</a>';
                }
                return _0x5bcc16;
            }
        }]
    }
});
Ext['define']('Traccar.view.dialog.ReportConfigController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x515'),
    'onSaveClick': function (_0x5dc8cb) {
        var _0x4e7c81, _0x126db2;
        _0x126db2 = this['getView']()[_0xc11a('0x516')];
        _0x126db2['deviceId'] = this['lookupReference']('deviceField')['getValue']();
        _0x126db2['groupId'] = this['lookupReference'](_0xc11a('0x517'))['getValue']();
        _0x4e7c81 = this['lookupReference'](_0xc11a('0x518'))['getValue']();
        -0x1 < _0x4e7c81[indexOf](Traccar['store'][_0xc11a('0x519')]['allEvents']) ? _0x4e7c81 = [Traccar['store'][_0xc11a('0x519')]['allEvents']] : _0x4e7c81['length'] === this['lookupReference'](_0xc11a('0x518'))['getStore']()[_0xc11a('0x51a')]() - 0x1 && (_0x4e7c81 = [Traccar['store'][_0xc11a('0x519')]['allEvents']]);
        _0x126db2[_0xc11a('0x51b')] = _0x4e7c81;
        _0x126db2[_0xc11a('0x51c')] = this['lookupReference']('chartTypeField')['getValue']();
        _0x126db2['showMarkers'] = this['lookupReference'](_0xc11a('0x51d'))['getValue']();
        _0x126db2[_0xc11a('0x51e')] = this['lookupReference'](_0xc11a('0x51f'))['getValue']();
        _0x126db2[_0xc11a('0x520')] = this['lookupReference']('fromTimeField')['getValue']();
        _0x126db2[_0xc11a('0x521')] = this['lookupReference'](_0xc11a('0x522'))['getValue']();
        _0x126db2[_0xc11a('0x523')] = this['lookupReference'](_0xc11a('0x524'))['getValue']();
        _0x126db2['period'] = this['lookupReference']('periodField')['getValue']();
        _0x126db2['updateButtons']();
        _0x5dc8cb['up']('window')['close']();
    },
    'onPeriodChange': function (_0x2d96bb, _0x47e63b) {
        var _0x1cacac;
        _0x2d96bb = 'custom' === _0x47e63b;
        this['lookupReference'](_0xc11a('0x526'))['setHidden'](!_0x2d96bb);
        this['lookupReference']('toContainer')['setHidden'](!_0x2d96bb);
        if (!_0x2d96bb) {
            _0x2d96bb = new Date();
            _0x1cacac = new Date();
            switch (_0x47e63b) {
                case 'today':
                    _0x1cacac['setDate'](_0x1cacac[_0xc11a('0x527')]() + 0x1);
                    break;
                case 'yesterday':
                    _0x2d96bb[_0xc11a('0x528')](_0x1cacac['getDate']() - 0x1);
                    break;
                case _0xc11a('0x529'):
                    _0x47e63b = _0x2d96bb[_0xc11a('0x52a')]();
                    _0x47e63b = _0x2d96bb['getDate']() - _0x47e63b + (0x0 === _0x47e63b ? -0x6 : 0x1);
                    _0x2d96bb[_0xc11a('0x528')](_0x47e63b);
                    _0x1cacac[_0xc11a('0x528')](_0x47e63b + 0x7);
                    break;
                case 'previousWeek':
                    _0x47e63b = _0x2d96bb['getDay']();
                    _0x47e63b = _0x2d96bb[_0xc11a('0x527')]() - _0x47e63b + (0x0 === _0x47e63b ? -0x6 : 0x1);
                    _0x2d96bb[_0xc11a('0x528')](_0x47e63b - 0x7);
                    _0x1cacac[_0xc11a('0x528')](_0x47e63b);
                    break;
                case 'thisMonth':
                    _0x2d96bb[_0xc11a('0x528')](0x1);
                    _0x1cacac[_0xc11a('0x528')](0x1);
                    _0x1cacac[_0xc11a('0x52b')](_0x2d96bb[_0xc11a('0x52c')]() + 0x1);
                    break;
                case 'previousMonth':
                    _0x2d96bb['setDate'](0x1),
                        _0x2d96bb[_0xc11a('0x52b')](_0x2d96bb[_0xc11a('0x52c')]() - 0x1),
                        _0x1cacac[_0xc11a('0x528')](0x1);
            }
            _0x2d96bb['setHours'](0x0, 0x0, 0x0, 0x0);
            _0x1cacac[_0xc11a('0x52d')](0x0, 0x0, 0x0, 0x0);
            this['lookupReference'](_0xc11a('0x51f'))['setValue'](_0x2d96bb);
            this['lookupReference'](_0xc11a('0x52e'))['setValue'](_0x2d96bb);
            this['lookupReference'](_0xc11a('0x522'))['setValue'](_0x1cacac);
            this['lookupReference'](_0xc11a('0x524'))['setValue'](_0x1cacac);
        }
    }
});
Ext['define']('Traccar.view.CustomTimeField', {
    'extend': Ext['form']['field'][_0xc11a('0x52f')],
    'xtype': _0xc11a('0x530'),
    'constructor': function (_0x427be2) {
        Traccar['app']['getPreference']('twelveHourFormat', !0x1) ? _0x427be2['format'] = Traccar['Style'][_0xc11a('0x531')] : _0x427be2['format'] = Traccar['Style'][_0xc11a('0x532')];
        this['callParent'](arguments);
    }
});
Ext['define'](_0xc11a('0x533'), {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': _0xc11a('0x534'),
    'title': Strings[_0xc11a('0x535')],
    'items': [{
        'fieldLabel': Strings[_0xc11a('0x536')],
        'xtype': _0xc11a('0x537'),
        'reference': 'deviceField',
        'maxWidth': Traccar['Style']['formFieldWidth'],
        'store': 'Devices',
        'valueField': 'id',
        'displayField': 'name',
        'queryMode': 'local'
    }, {
        'fieldLabel': Strings[_0xc11a('0x538')],
        'xtype': _0xc11a('0x537'),
        'reference': _0xc11a('0x517'),
        'maxWidth': Traccar['Style'][_0xc11a('0x539')],
        'store': 'Groups',
        'valueField': 'id',
        'displayField': 'name',
        'queryMode': 'local'
    }, {
        'fieldLabel': Strings[_0xc11a('0x53a')],
        'xtype': 'tagfield',
        'reference': _0xc11a('0x518'),
        'maxWidth': Traccar['Style'][_0xc11a('0x539')],
        'store': _0xc11a('0x519'),
        'hidden': !0x0,
        'valueField': 'type',
        'displayField': 'name',
        'queryMode': 'local'
    }, {
        'fieldLabel': Strings[_0xc11a('0x53b')],
        'xtype': 'combobox',
        'reference': 'chartTypeField',
        'store': 'ReportChartTypes',
        'hidden': !0x0,
        'value': 'speed',
        'valueField': 'key',
        'displayField': 'name',
        'queryMode': 'local'
    }, {
        'fieldLabel': Strings[_0xc11a('0x53d')],
        'xtype': _0xc11a('0x53e'),
        'reference': _0xc11a('0x51d'),
        'inputValue': !0x0,
        'uncheckedValue': !0x1,
        'value': !0x1
    }, {
        'fieldLabel': Strings[_0xc11a('0x53f')],
        'reference': 'periodField',
        'xtype': 'combobox',
        'store': _0xc11a('0x540'),
        'editable': !0x1,
        'valueField': 'key',
        'displayField': 'name',
        'queryMode': 'local',
        'listeners': {
            'change': _0xc11a('0x541')
        }
    }, {
        'xtype': 'fieldcontainer',
        'layout': _0xc11a('0x542'),
        'reference': 'fromContainer',
        'hidden': !0x0,
        'fieldLabel': Strings['reportFrom'],
        'items': [{
            'xtype': 'datefield',
            'reference': _0xc11a('0x51f'),
            'startDay': Traccar['Style'][_0xc11a('0x543')],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date(new Date()['getTime']() - 0x1b7740)
        }, {
            'xtype': _0xc11a('0x530'),
            'reference': _0xc11a('0x52e'),
            'value': new Date(new Date()[_0xc11a('0x545')]() - 0x1b7740)
        }]
    }, {
        'xtype': 'fieldcontainer',
        'layout': 'vbox',
        'reference': _0xc11a('0x546'),
        'hidden': !0x0,
        'fieldLabel': Strings[_0xc11a('0x547')],
        'items': [{
            'xtype': _0xc11a('0x548'),
            'reference': _0xc11a('0x522'),
            'startDay': Traccar['Style'][_0xc11a('0x543')],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date()
        }, {
            'xtype': _0xc11a('0x530'),
            'reference': _0xc11a('0x524'),
            'value': new Date()
        }]
    }],
    'buttons': [{
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});


Ext.define('Traccar.view.ReportController', {
    extend: Ext.app.ViewController, alias: 'controller.report', config: { listen: { controller: { '*': { selectdevice: 'selectDevice', showsingleevent: 'showSingleEvent', deselectfeature: 'deselectFeature' }, map: { selectreport: 'selectReport' } }, global: { routegeocode: 'onGeocode' }, store: { '#ReportEvents': { add: 'loadRelatedPositions', load: 'loadRelatedPositions' }, '#ReportRoute': { load: 'loadRoute' }, '#ReportStops': { load: 'loadRelatedPositions' } } } }, hideReports: function () { Traccar.app.showReports(!1) }, getGrid: function () { return this.getView().getComponent('grid') }, getChart: function () { return this.getView().getComponent('chart') }, init: function () { var i, data, attribute; data = Ext.getStore('PositionAttributes').getData().items; for (i = 0; i < data.length; i++)attribute = data[i], this.routeColumns.push({ text: attribute.get('name'), dataIndex: 'attribute.' + attribute.get('key'), renderer: Traccar.AttributeFormatter.getAttributeFormatter(attribute.get('key')), hidden: !0 }); if (Traccar.app.getVehicleFeaturesDisabled()) { for (i = 0; i < this.summaryColumns.length; i++)this.summaryColumns[i].dataIndex.match('engineHours|spentFuel') && (this.summaryColumns[i].hidden = !0); for (i = 0; i < this.tripsColumns.length; i++)this.tripsColumns[i].dataIndex.match('spentFuel|driverUniqueId') && (this.tripsColumns[i].hidden = !0); for (i = 0; i < this.stopsColumns.length; i++)this.stopsColumns[i].dataIndex.match('engineHours|spentFuel') && (this.stopsColumns[i].hidden = !0) } },                                                                                                                                                                                                                                      onConfigureClick: function () { var dialog = Ext.create('Traccar.view.dialog.ReportConfig'); dialog.lookupReference('eventTypeField').setHidden('events' !== this.lookupReference('reportTypeField').getValue()); dialog.lookupReference('chartTypeField').setHidden('chart' !== this.lookupReference('reportTypeField').getValue()); dialog.callingPanel = this; dialog.lookupReference('deviceField').setValue(this.deviceId); dialog.lookupReference('groupField').setValue(this.groupId); void 0 !== this.eventType ? dialog.lookupReference('eventTypeField').setValue(this.eventType) : dialog.lookupReference('eventTypeField').setValue([Traccar.store.ReportEventTypes.allEvents]); void 0 !== this.chartType && dialog.lookupReference('chartTypeField').setValue(this.chartType); void 0 !== this.showMarkers && dialog.lookupReference('showMarkersField').setValue(this.showMarkers); void 0 !== this.fromDate && dialog.lookupReference('fromDateField').setValue(this.fromDate); void 0 !== this.fromTime && dialog.lookupReference('fromTimeField').setValue(this.fromTime); void 0 !== this.toDate && dialog.lookupReference('toDateField').setValue(this.toDate); void 0 !== this.toTime && dialog.lookupReference('toTimeField').setValue(this.toTime); void 0 !== this.period && dialog.lookupReference('periodField').setValue(this.period); dialog.show()
    },
    updateButtons: function () {
        var reportType, disabled, time; reportType = this.lookupReference('reportTypeField').getValue(); disabled = this.deviceId && 0 !== this.deviceId.length || this.groupId && 0 !== this.groupId.length; time = this.fromDate && this.fromTime && this.toDate && this.toTime; disabled = !reportType || !disabled || !time || this.reportProgress; this.lookupReference('showButton').setDisabled(disabled); this.lookupReference('exportButton').setDisabled('chart' === reportType || disabled); /* ver */ this.lookupReference('emailButton').setDisabled('chart' === reportType || disabled)
    },

    onReportClick: function (button) {
        var reportType, from, to; this.getGrid().getSelectionModel().deselectAll(); (reportType = this.lookupReference('reportTypeField').getValue()) && (this.deviceId || this.groupId) && (from = new Date(this.fromDate.getFullYear(), this.fromDate.getMonth(), this.fromDate.getDate(), this.fromTime.getHours(), this.fromTime.getMinutes(), this.fromTime.getSeconds(), this.fromTime.getMilliseconds()),
            to = new Date(this.toDate.getFullYear(), this.toDate.getMonth(), this.toDate.getDate(), this.toTime.getHours(), this.toTime.getMinutes(), this.toTime.getSeconds(), this.toTime.getMilliseconds()), this.reportProgress = !0, this.updateButtons(), 'showButton' === button.reference ? ('chart' === reportType ? (button = this.getChart().getStore(), this.getChart().setSeries([])) : button = this.getGrid().getStore(), button.showMarkers = this.showMarkers, button.load({
                scope: this, callback: function () { this.reportProgress = !1; this.updateButtons() },
                params: { deviceId: this.deviceId, groupId: this.groupId, type: this.eventType, from: from.toISOString(), to: to.toISOString() }
            })) : exportButton === button['reference'] && (reportType = this.getGrid().getStore().getProxy().url, this.excelReport(reportType, { deviceId: this.deviceId, groupId: this.groupId, type: this.eventType, from: Ext.Date.format(from, 'c'), to: Ext.Date.format(to, 'c'), mail: 'emailButton' === button.reference })))
// essa parte é diferente -->  })) : 'exportButton' === button['reference'] && (button = this['getGrid']()['getStore']()['getProxy']()['url'], this['downloadFile'](button, { 'deviceId': this['deviceId'], 'groupId': this['groupId'], 'type': this['eventType'], 'from': Ext['Date']['format'](from, 'c'), 'to': Ext['Date']['format'](to, 'c') })));
    },
    onClearClick: function () { var reportType = this.lookupReference('reportTypeField').getValue(); this.clearReport(reportType) }, clearReport: function (reportType) {
        this.getGrid().getStore().removeAll();
        'trips' !== reportType && 'events' !== reportType && 'stops' !== reportType || Ext.getStore('ReportRoute').removeAll(); 'chart' === reportType && this.getChart().getStore().removeAll()
    },
    'onSelectionChange': function (_0x1c13ca, _0x275785) {
        0x0 < _0x275785['length'] && (_0x1c13ca = _0x275785[0x0],
            this['fireEvent'](_0xc11a('0x56c'), _0x1c13ca, !0x0),
            _0x1c13ca instanceof Traccar['model'][_0xc11a('0x56d')] && this[_0xc11a('0x56e')](_0x1c13ca),
            (_0x1c13ca instanceof Traccar['model'][_0xc11a('0x56f')] || _0x1c13ca instanceof Traccar['model']['ReportStop']) && this[_0xc11a('0x570')](_0x1c13ca));
    },
    'selectDevice': function (_0x40d90c) {
        _0x40d90c && this[_0xc11a('0x560')]()['getSelectionModel']()['deselectAll']();
    },
    'selectReport': function (_0x27b9e6) {
        var _0x15e16c = this['lookupReference'](_0xc11a('0x55a'))['getValue']();
        if (_0x27b9e6 instanceof Traccar['model']['Position'])
            if ('route' === _0x15e16c)
                this[_0xc11a('0x560')]()['getSelectionModel']()['select']([_0x27b9e6], !0x1, !0x0),
                    this['getGrid']()['getView']()['focusRow'](_0x27b9e6);
            else if ('events' === _0x15e16c || _0xc11a('0x572') === _0x15e16c)
                _0x27b9e6 = this[_0xc11a('0x560')]()['getStore']()['findRecord']('positionId', _0x27b9e6['get']('id'), 0x0, !0x1, !0x0, !0x0),
                    this['getGrid']()['getSelectionModel']()['select']([_0x27b9e6], !0x1, !0x0),
                    this['getGrid']()['getView']()['focusRow'](_0x27b9e6);
    },
    'deselectFeature': function () {
        'trips' !== this['lookupReference'](_0xc11a('0x55a'))['getValue']() && this[_0xc11a('0x560')]()['getSelectionModel']()['deselectAll']();
    },
    'selectTrip': function (_0x2cc5d8) {
        var _0x2d4699, _0x1ad93a;
        _0x2d4699 = new Date(_0x2cc5d8['get']('startTime'));
        _0x1ad93a = new Date(_0x2cc5d8['get']('endTime'));
        Ext['getStore'](_0xc11a('0x573'))['removeAll']();
        Ext['getStore']('ReportRoute')[_0xc11a('0x55c')] = this[_0xc11a('0x55c')];
        Ext['getStore'](_0xc11a('0x573'))['load']({
            'params': {
                'deviceId': _0x2cc5d8['get']('deviceId'),
                'from': _0x2d4699[_0xc11a('0x569')](),
                'to': _0x1ad93a[_0xc11a('0x569')]()
            }
        });
    },
    'selectPositionRelated': function (_0x3c3154) {
        _0x3c3154['get']('positionId') && (_0x3c3154 = Ext['getStore'](_0xc11a('0x573'))['getById'](_0x3c3154['get']('positionId'))) && this['fireEvent'](_0xc11a('0x56c'), _0x3c3154, !0x0);
    },
    'loadRelatedPositions': function (_0x3b99e7, _0xcf9ec3) {
        var _0x31513b, _0x5a565f = [];
        Ext['getStore'](_0xc11a('0x573'))['removeAll']();
        for (_0x3b99e7 = 0x0; _0x3b99e7 < _0xcf9ec3['length']; _0x3b99e7++)
            _0x31513b = _0xcf9ec3[_0x3b99e7],
                _0x31513b['get']('positionId') && _0x5a565f['push'](_0x31513b['get']('positionId'));
        0x0 < _0x5a565f['length'] && Ext['getStore'](_0xc11a('0x574'))['load']({
            'params': {
                'id': _0x5a565f
            },
            'scope': this,
            'callback': function (_0x3b99e7, _0xcf9ec3, _0x31513b) {
                _0x31513b && (Ext['getStore'](_0xc11a('0x573'))[_0xc11a('0x55c')] = this['showMarkers'],
                    Ext['getStore'](_0xc11a('0x573'))['add'](_0x3b99e7),
                    0x1 === _0x3b99e7['length'] && this['fireEvent'](_0xc11a('0x56c'), _0x3b99e7[0x0], !0x1));
            }
        });
    },
    'loadRoute': function (_0x5b267a) {
        var _0x3c1324, _0x358036, _0x1b6058;
        if (_0xc11a('0x550') === this['lookupReference'](_0xc11a('0x55a'))['getValue']()) {
            this[_0xc11a('0x567')]()[_0xc11a('0x575')]()[0x0][_0xc11a('0x576')](Ext['getStore']('ReportChartTypes')['findRecord']('key', this[_0xc11a('0x51c')])['get']('name'));
            _0x358036 = [];
            _0x3c1324 = _0x5b267a[_0xc11a('0x577')]('deviceId');
            for (_0x5b267a = 0x0; _0x5b267a < _0x3c1324['length']; _0x5b267a++)
                _0x1b6058 = Ext['create'](_0xc11a('0x578'), {
                    'source': _0xc11a('0x573'),
                    'filters': [{
                        'property': 'deviceId',
                        'value': _0x3c1324[_0x5b267a]
                    }]
                }),
                    _0x358036['push']({
                        'type': _0xc11a('0x579'),
                        'store': _0x1b6058,
                        'yField': this[_0xc11a('0x51c')],
                        'xField': 'fixTime',
                        'highlightCfg': {
                            'scaling': Traccar['Style'][_0xc11a('0x57a')]
                        },
                        'colors': [Traccar['app']['getReportColor'](_0x3c1324[_0x5b267a])],
                        'marker': {
                            'type': _0xc11a('0x57b'),
                            'radius': Traccar['Style'][_0xc11a('0x57c')],
                            'fill': Traccar['app']['getReportColor'](_0x3c1324[_0x5b267a])
                        }
                    });
            this[_0xc11a('0x567')]()[_0xc11a('0x568')](_0x358036);
        }
    },
    'onChartMarkerClick': function (_0x5e6a7a, _0x408898) {
        this['fireEvent'](_0xc11a('0x56c'), _0x408898['record'], !0x0);
    },
    'showSingleEvent': function (_0x5ee76f) {
        this['lookupReference'](_0xc11a('0x55a'))['setValue']('events');
        Ext['getStore']('Events')['load']({
            'id': _0x5ee76f,
            'scope': this,
            'callback': function (_0x5ee76f, _0x13b6dc, _0x3ab382) {
                _0x3ab382 && (Ext['getStore'](_0xc11a('0x57e'))['add'](_0x5ee76f),
                    0x0 < _0x5ee76f['length'] && (_0x5ee76f[0x0]['get']('positionId') || (Traccar['app']['isMobile']() ? Traccar['app']['showReports'](!0x0) : this['getView']()['expand']()),
                        this['getGrid']()['getSelectionModel']()['select']([_0x5ee76f[0x0]], !0x1, !0x0),
                        this[_0xc11a('0x560')]()['getView']()['focusRow'](_0x5ee76f[0x0])));
            }
        });
    },
    'downloadFile': function (_0x23b0e7, _0x41a0fa) {
        Ext['Ajax']['request']({
            'url': _0x23b0e7,
            'method': 'GET',
            'timeout': Traccar['Style'][_0xc11a('0x11b')],
            'params': _0x41a0fa,
            'headers': {
                'Accept': _0xc11a('0x580')
            },
            'binary': !0x0,
            'scope': this,
            'callback': function (_0x23b0e7, _0x41a0fa, _0x1317ab) {
                var _0x40c1bc, _0x42390a;
                _0x41a0fa && (_0x23b0e7 = _0x1317ab[_0xc11a('0x581')](_0xc11a('0x582')),
                    _0x23b0e7 = _0x23b0e7['slice'](_0x23b0e7[indexOf]('=') + 0x1, _0x23b0e7['length']),
                    _0x41a0fa = _0x1317ab[_0xc11a('0x581')](_0xc11a('0x583')),
                    _0x1317ab = new Blob([_0x1317ab['responseBytes']], {
                        'type': _0x41a0fa
                    }),
                    'undefined' !== typeof window[_0xc11a('0x584')][_0xc11a('0x585')] ? window[_0xc11a('0x584')]['msSaveBlob'](_0x1317ab, _0x23b0e7) : (_0x40c1bc = window[_0xc11a('0x586')] || window[_0xc11a('0x587')],
                        _0x42390a = _0x40c1bc['createObjectURL'](_0x1317ab),
                        _0x23b0e7 && Ext['dom']['Helper'][_0xc11a('0x588')](Ext['getBody'](), {
                            'tag': 'a',
                            'href': _0x42390a,
                            'download': _0x23b0e7
                        })['click'](),
                        setTimeout(function () {
                            _0x40c1bc[_0xc11a('0x589')](_0x42390a);
                        }, 0x64)));
                this[_0xc11a('0x55d')] = !0x1;
                this['updateButtons']();
            }
        });
    },
    'onTypeChange': function (_0x3a4d6e, _0x43a4d0, _0x480570) {
        null !== _0x480570 && this['clearReport'](_0x480570);
        'route' === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')](_0xc11a('0x573'), this[_0xc11a('0x551')]),
            this['getView']()[_0xc11a('0x58b')]()['setActiveItem']('grid')) : 'events' === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')](_0xc11a('0x57e'), this[_0xc11a('0x58d')]),
                this['getView']()[_0xc11a('0x58b')]()['setActiveItem']('grid')) : _0xc11a('0x58e') === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')]('ReportSummary', this[_0xc11a('0x552')]),
                    this['getView']()[_0xc11a('0x58b')]()['setActiveItem']('grid')) : 'trips' === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')]('ReportTrips', this[_0xc11a('0x556')]),
                        this['getView']()[_0xc11a('0x58b')]()['setActiveItem']('grid')) : 'stops' === _0x43a4d0 ? (this[_0xc11a('0x560')]()['reconfigure'](_0xc11a('0x58f'), this[_0xc11a('0x558')]),
                            this['getView']()[_0xc11a('0x58b')]()['setActiveItem']('grid')) : _0xc11a('0x550') === _0x43a4d0 && this['getView']()['getLayout']()['setActiveItem'](_0xc11a('0x550'));
        this['updateButtons']();
    },
    'onGeocode': function (_0x2ace72) {
        var _0x330e4c = Ext['getStore'](_0xc11a('0x573'))['getById'](_0x2ace72);
        _0x330e4c && !_0x330e4c['get']('address') && Ext['Ajax']['request']({
            'scope': this,
            'method': 'GET',
            'url': 'api/server/geocode',
            'params': {
                'latitude': _0x330e4c['get']('latitude'),
                'longitude': _0x330e4c['get']('longitude')
            },
            'success': function (_0x2ace72) {
                _0x330e4c['set']('address', _0x2ace72['responseText']);
                _0x330e4c[_0xc11a('0x590')]();
                this['fireEvent']('selectReport', _0x330e4c);
            },
            'failure': function (_0x2ace72) {
                Traccar['app']['showError'](_0x2ace72);
            }
        });
    },
    'routeColumns': [{
        'text': Strings[_0xc11a('0x591')],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x592')],
        'dataIndex': 'valid',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('valid')
    }, {
        'text': Strings[_0xc11a('0x593')],
        'dataIndex': 'fixTime',
        'xtype': 'datecolumn',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('fixTime')
    }, {
        'text': Strings[_0xc11a('0x594')],
        'dataIndex': 'latitude',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('latitude')
    }, {
        'text': Strings[_0xc11a('0x595')],
        'dataIndex': 'longitude',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('longitude')
    }, {
        'text': Strings[_0xc11a('0x596')],
        'dataIndex': 'altitude',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('altitude')
    }, {
        'text': Strings['positionSpeed'],
        'dataIndex': 'speed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings['positionAddress'],
        'dataIndex': 'address',
        'renderer': function (_0x1a38c7, _0xf9e45e, _0x4efb6b) {
            return _0x1a38c7 ? Traccar['AttributeFormatter']['getFormatter']('address')(_0x1a38c7) : _0xc11a('0x597') + _0x4efb6b['getId']() + _0xc11a('0x598') + Strings[_0xc11a('0x599')] + '</a>';
        }
    }],
    'eventsColumns': [{
        'text': Strings[_0xc11a('0x593')],
        'dataIndex': 'serverTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('serverTime')
    }, {
        'text': Strings[_0xc11a('0x591')],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings['sharedType'],
        'dataIndex': 'type',
        'renderer': function (_0x4f42c4) {
            return Traccar['app']['getEventString'](_0x4f42c4);
        }
    }, {
        'text': Strings['sharedGeofence'],
        'dataIndex': 'geofenceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('geofenceId')
    }, {
        'text': Strings['sharedMaintenance'],
        'dataIndex': 'maintenanceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('maintenanceId')
    }],
    'summaryColumns': [{
        'text': Strings['reportDeviceName'],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings['sharedDistance'],
        'dataIndex': 'distance',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('distance')
    }, {
        'text': Strings[_0xc11a('0x59c')],
        'dataIndex': 'averageSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x59d')],
        'dataIndex': 'maxSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x59e')],
        'dataIndex': 'engineHours',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings[_0xc11a('0x59f')],
        'dataIndex': 'spentFuel',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('spentFuel')
    }],
    'tripsColumns': [{
        'text': Strings[_0xc11a('0x591')],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x5a0')],
        'dataIndex': 'startTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('startTime')
    }, {
        'text': Strings['reportStartAddress'],
        'dataIndex': 'startAddress',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('address')
    }, {
        'text': Strings[_0xc11a('0x5a1')],
        'dataIndex': 'endTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('endTime')
    }, {
        'text': Strings[_0xc11a('0x5a2')],
        'dataIndex': 'endAddress',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('address')
    }, {
        'text': Strings[_0xc11a('0x5a3')],
        'dataIndex': 'distance',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('distance')
    }, {
        'text': Strings[_0xc11a('0x59c')],
        'dataIndex': 'averageSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x59d')],
        'dataIndex': 'maxSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x5a4')],
        'dataIndex': 'duration',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings[_0xc11a('0x59f')],
        'dataIndex': 'spentFuel',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('spentFuel')
    }, {
        'text': Strings[_0xc11a('0x5a5')],
        'dataIndex': 'driverUniqueId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('driverUniqueId')
    }],
    'stopsColumns': [{
        'text': Strings['reportDeviceName'],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x5a0')],
        'dataIndex': 'startTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('startTime')
    }, {
        'text': Strings['positionAddress'],
        'dataIndex': 'address',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('address')
    }, {
        'text': Strings[_0xc11a('0x5a1')],
        'dataIndex': 'endTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('endTime')
    }, {
        'text': Strings[_0xc11a('0x5a4')],
        'dataIndex': 'duration',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings[_0xc11a('0x59e')],
        'dataIndex': 'engineHours',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings['reportSpentFuel'],
        'dataIndex': 'spentFuel',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('spentFuel')
    }]
});
Ext['define'](_0xc11a('0x5a6'), {
    'extend': Ext[_0xc11a('0x5a7')]['Panel'],
    'xtype': 'reportView',
    'controller': _0xc11a('0x5a8'),
    'title': Strings['reportTitle'],
    'tools': [{
        'type': 'close',
        'tooltip': Strings[_0xc11a('0x5aa')],
        'handler': _0xc11a('0x5ab')
    }],
    'tbar': {
        'scrollable': !0x0,
        'items': [{
            'xtype': 'tbtext',
            'html': Strings['sharedType']
        }, {
            'xtype': 'combobox',
            'reference': 'reportTypeField',
            'store': _0xc11a('0x5ac'),
            'displayField': 'name',
            'valueField': 'key',
            'editable': !0x1,
            'listeners': {
                'change': 'onTypeChange'
            }
        }, '-', {
            'text': Strings[_0xc11a('0x535')],
            'handler': _0xc11a('0x5ad')
        }, '-', {
            'text': Strings[_0xc11a('0x5ae')],
            'reference': _0xc11a('0x55e'),
            'disabled': !0x0,
            'handler': _0xc11a('0x5af')
        }, {
            'text': Strings['reportExport'],
            'reference': _0xc11a('0x55f'),
            'disabled': !0x0,
            'handler': _0xc11a('0x5af')
        }, {
            'text': Strings[_0xc11a('0x5b0')],
            'handler': _0xc11a('0x5b1')
        }]
    },
    'layout': _0xc11a('0x5b2'),
    'items': [{
        'xtype': 'customGridPanel',
        'itemId': 'grid',
        'listeners': {
            'selectionchange': 'onSelectionChange'
        },
        'columns': {
            'defaults': {
                'flex': 0x1,
                'minWidth': Traccar['Style']['columnWidthNormal']
            },
            'items': []
        },
        'style': Traccar['Style']['reportGridStyle']
    }, {
        'xtype': _0xc11a('0x5b3'),
        'itemId': _0xc11a('0x550'),
        'plugins': {
            'ptype': _0xc11a('0x5b4'),
            'moveEvents': !0x0
        },
        'store': _0xc11a('0x573'),
        'axes': [{
            'title': Strings['reportChart'],
            'type': 'numeric',
            'position': 'left'
        }, {
            'type': _0xc11a('0x5b5'),
            'position': _0xc11a('0x5b6'),
            'fields': ['fixTime']
        }],
        'listeners': {
            'itemclick': _0xc11a('0x5b7')
        },
        'insetPadding': Traccar['Style'][_0xc11a('0x5b8')]
    }]
});
Ext['define']('Traccar.view.EventsController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x5b9'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'deselectevent': _0xc11a('0x5ba')
                }
            },
            'store': {
                '#Events': {
                    'add': _0xc11a('0x5bb')
                }
            }
        }
    },
    'init': function () {
        var _0x1fcea2 = this;
        setInterval(function () {
            _0x1fcea2['getView']()['getView']()['refresh']();
        }, Traccar['Style'][_0xc11a('0x5bc')]);
        Traccar['app']['isMobile']() && this['lookupReference'](_0xc11a('0x5bd'))['setHidden'](!0x1);
    },
    'onRemoveClick': function () {
        var _0x5b05a0;
        if (_0x5b05a0 = this['getView']()['getSelectionModel']()['getSelection']()[0x0])
            Ext['getStore']('Events')['remove'](_0x5b05a0),
                (_0x5b05a0 = _0x5b05a0['get']('positionId')) && !Ext['getStore']('Events')['findRecord']('positionId', _0x5b05a0, 0x0, !0x1, !0x1, !0x0) && Ext['getStore']('EventPositions')['remove'](Ext['getStore']('EventPositions')['getById'](_0x5b05a0));
    },
    'onClearClick': function () {
        Ext['getStore']('Events')['removeAll']();
        Ext['getStore']('EventPositions')['removeAll']();
    },
    'onAddEvent': function () {
        this['lookupReference'](_0xc11a('0x5bf'))['pressed'] && this['getView']()[_0xc11a('0x5c1')](0x0, Number['POSITIVE_INFINITY'], !0x0);
    },
    'onScrollToLastClick': function (_0x4e0be6, _0x3292db) {
        if (_0x3292db)
            this[_0xc11a('0x5bb')]();
    },
    'onHideEvents': function () {
        Traccar['app']['showEvents'](!0x1);
    },
    'deselectEvent': function () {
        this['getView']()['getSelectionModel']()['deselectAll']();
    },
    'onSelectionChange': function (_0x24c9a3, _0x2fb846) {
        var _0xda1731;
        if (_0x24c9a3 = 0x0 < _0x2fb846['length'] ? _0x2fb846[0x0] : null)
            (_0x2fb846 = _0x24c9a3['get']('positionId')) ? (_0xda1731 = Ext['getStore']('EventPositions')['getById'](_0x2fb846)) ? this['fireEvent'](_0xc11a('0x5c2'), _0xda1731) : Ext['getStore']('EventPositions')['load']({
                'params': {
                    'id': _0x2fb846
                },
                'scope': this,
                'addRecords': !0x0,
                'callback': function (_0x24c9a3, _0x2fb846, _0xda1731) {
                    _0xda1731 && 0x0 < _0x24c9a3['length'] && this['fireEvent'](_0xc11a('0x5c2'), _0x24c9a3[0x0]);
                }
            }) : this['fireEvent'](_0xc11a('0x5c2'));
        this['lookupReference'](_0xc11a('0x5c3'))['setDisabled'](!_0x24c9a3);
    }
});
Ext['define'](_0xc11a('0x5c4'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'eventsView',
    'controller': 'events',
    'store': 'Events',
    'stateful': !0x0,
    'stateId': _0xc11a('0x5c6'),
    'title': Strings['reportEvents'],
    'sortableColumns': !0x1,
    'header': !0x1,
    'tbar': {
        'componentCls': 'toolbar-header-style',
        'defaults': {
            'xtype': 'button',
            'tooltipType': 'title',
            'stateEvents': ['toggle'],
            'enableToggle': !0x0,
            'stateful': {
                'pressed': !0x0
            }
        },
        'items': [{
            'xtype': 'tbtext',
            'html': Strings['reportEvents'],
            'baseCls': 'x-panel-header-title-default'
        }, {
            'xtype': 'tbfill'
        }, {
            'glyph': _0xc11a('0x5c8'),
            'pressed': !0x0,
            'toggleHandler': _0xc11a('0x5c9'),
            'stateId': _0xc11a('0x5ca'),
            'tooltip': Strings['eventsScrollToLast'],
            'reference': _0xc11a('0x5bf')
        }, {
            'id': 'soundButton',
            'glyph': _0xc11a('0x5cc'),
            'tooltip': Strings[_0xc11a('0x5cd')],
            'stateId': _0xc11a('0x5ce')
        }, {
            'glyph': _0xc11a('0x5cf'),
            'tooltip': Strings['sharedRemove'],
            'handler': 'onRemoveClick',
            'reference': _0xc11a('0x5c3'),
            'disabled': !0x0,
            'stateful': !0x1,
            'enableToggle': !0x1
        }, {
            'glyph': _0xc11a('0x5d0'),
            'tooltip': Strings['reportClear'],
            'handler': 'onClearClick',
            'stateful': !0x1,
            'enableToggle': !0x1
        }, {
            'glyph': 'xf00d@FontAwesome',
            'tooltip': Strings[_0xc11a('0x5aa')],
            'handler': _0xc11a('0x5d1'),
            'reference': _0xc11a('0x5bd'),
            'hidden': !0x0,
            'stateful': !0x1,
            'enableToggle': !0x1
        }]
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedDevice'],
            'dataIndex': 'deviceId',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
        }, {
            'flex': 0x2,
            'text': Strings[_0xc11a('0x2c7')],
            'dataIndex': 'text'
        }, {
            'text': Strings[_0xc11a('0x593')],
            'dataIndex': 'serverTime',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('lastUpdate')
        }]
    }
});
Ext['define'](_0xc11a('0x5d2'), {
    'extend': Ext[_0xc11a('0x5a7')]['Panel'],
    'xtype': _0xc11a('0x5d3'),
    'layout': fit,
    'getMap': function () {
        return this['map'];
    },
    'getMapView': function () {
        return this['mapView'];
    },
    'initMap': function () {
        var _0x284053, _0x4f61d8, _0x3bd1b3, _0x5032c7, _0x427bca, _0x38fdf1, _0x26e842;
        _0x284053 = Traccar['app']['getServer']();
        _0x4f61d8 = Traccar['app']['getPreference']('map', null);
        _0x284053['get']('bingKey');
        _0x284053 = [new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5d5'),
            'type': 'base',
            'visible': !0x0,
            'source': new ol[('source')]['XYZ']({
                'url': _0x284053['get']('mapUrl')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5d7'),
            'type': 'base',
            'visible': _0xc11a('0x5d8') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')][(_0xc11a('0x5d9'))]({
                'url': _0xc11a('0x5da')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5db'),
            'type': 'base',
            'visible': _0xc11a('0x5dc') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')]['XYZ']({
                'url': _0xc11a('0x5dd')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5de'),
            'type': 'base',
            'visible': _0xc11a('0x5df') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')][(_0xc11a('0x5d9'))]({
                'url': _0xc11a('0x5e0')
            })
        }), new ol[('layer')][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5e2'),
            'type': 'base',
            'visible': _0xc11a('0x5e3') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')][(_0xc11a('0x5d9'))]({
                'url': _0xc11a('0x5e4'),
                'attributions': _0xc11a('0x5e5')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5e6'),
            'type': 'base',
            'visible': 'osm' == _0x4f61d8 || '' == _0x4f61d8 || null == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')][(_0xc11a('0x5e7'))]({})
        }), new ol[('layer')]['Tile']({
            'title': 'Mapa\x20Baidu',
            'type': 'base',
            'visible': 'baidu' == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')][(_0xc11a('0x5d9'))]({
                'projection': 'BD-MC',
                'tileUrlFunction': function (_0x284053) {
                    var _0x4f61d8 = _0x284053[0x0]
                        , _0x3bd1b3 = _0x284053[0x1];
                    _0x284053 = _0x284053[0x2];
                    var _0x5032c7;
                    _0x5032c7 = ((_0x3bd1b3 << _0x4f61d8) + _0x284053) % 0x5;
                    0x0 > _0x3bd1b3 && (_0x3bd1b3 = 'M' + -_0x3bd1b3);
                    0x0 > _0x284053 && (_0x284053 = 'M' + -_0x284053);
                    return 'http://online{}.map.bdimg.com/onlinelabel/?qt=tile&x={x}&y={y}&z={z}&styles=pl'['replace']('{}', 0x0 > _0x5032c7 ? _0x5032c7 + 0x5 : _0x5032c7)['replace']('{x}', _0x3bd1b3)['replace'](_0xc11a('0x5e8'), _0x284053)['replace'](_0xc11a('0x5e9'), _0x4f61d8);
                },
                'tileGrid': new ol[(_0xc11a('0x5ea'))][(_0xc11a('0x5eb'))]({
                    'extent': ol['proj']['transformExtent']([-0xb4, -0x4a, 0xb4, 0x4a], _0xc11a('0x5ec'), _0xc11a('0x5ed')),
                    'origin': [0x0, 0x0],
                    'minZoom': 0x3,
                    'resolutions': [0x40000, 0x20000, 0x10000, 0x8000, 0x4000, 0x2000, 0x1000, 0x800, 0x400, 0x200, 0x100, 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1, 0.5]
                }),
                'attributions': _0xc11a('0x5ee')
            })
        }), new ol[('layer')][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5ef'),
            'type': 'base',
            'visible': 'yandexMap' == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[('source')]['XYZ']({
                'url': 'https://vec0{1-4}.maps.yandex.net/tiles?l=map&x={x}&y={y}&z={z}',
                'projection': _0xc11a('0x5f0'),
                'attributions': _0xc11a('0x5f1')
            })
        })];
        _0x4f61d8 = Traccar['app']['getPreference']('latitude', Traccar['Style'][_0xc11a('0x5f2')]);
        _0x3bd1b3 = Traccar['app']['getPreference']('longitude', Traccar['Style'][_0xc11a('0x5f3')]);
        _0x5032c7 = Traccar['app']['getPreference']('zoom', Traccar['Style']['mapDefaultZoom']);
        _0x427bca = Traccar['app']['getAttributePreference']('web.maxZoom', Traccar['Style']['mapMaxZoom']);
        this['mapView'] = new ol['View']({
            'center': ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x3bd1b3, _0x4f61d8]),
            'zoom': _0x5032c7,
            'maxZoom': _0x427bca
        });
        this['map'] = new ol['Map']({
            'target': this[_0xc11a('0x5f7')]['dom']['id'],
            'layers': _0x284053,
            'view': this['mapView']
        });
        _0x284053 = new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5f9'))]({
            'tipLabel': ''
        });
        this['map'][_0xc11a('0x5fa')](_0x284053);
        (_0x284053 = Traccar['app']['getPreference']('poiLayer', null)) && this['map']['addLayer'](new ol[('layer')]['Vector']({
            'source': new ol[('source')]['Vector']({
                'url': _0x284053,
                'format': new ol[('format')][(_0xc11a('0x5fb'))]()
            })
        }));
        this[_0xc11a('0x5f7')]['dom'][_0xc11a('0x5fd')] = 0x0;
        switch (Traccar['app']['getAttributePreference']('distanceUnit', 'km')) {
            case 'mi':
                this['map'][_0xc11a('0x5fa')](new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5fe'))]({
                    'units': 'us'
                }));
                break;
            case 'nmi':
                this['map'][_0xc11a('0x5fa')](new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5fe'))]({
                    'units': _0xc11a('0x5ff')
                }));
                break;
            default:
                this['map']['addControl'](new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5fe'))]());
        }
        _0x38fdf1 = this['map'][_0xc11a('0x600')]();
        'string' === typeof _0x38fdf1 && (_0x38fdf1 = Ext['get'](_0x38fdf1)['dom']);
        this['map']['on'](_0xc11a('0x601'), function (_0x284053) {
            this[_0xc11a('0x602')](_0x284053[_0xc11a('0x603')], function () {
                return !0x0;
            }) ? _0x38fdf1['style']['cursor'] = _0xc11a('0x604') : _0x38fdf1['style']['cursor'] = '';
        });
        _0x26e842 = new ol[(_0xc11a('0x605'))][(_0xc11a('0x606'))]();
        this['map'][_0xc11a('0x607')](_0x26e842);
        _0x284053 = new Geocoder(_0xc11a('0x608'), {
            'provider': 'osm',
            'lang': _0xc11a('0x609'),
            'placeholder': 'Pesquisar\x20Endereço\x20...',
            'limit': 0x5,
            'debug': !0x1,
            'autoComplete': !0x0,
            'keepOpen': !0x0
        });
        this['map'][_0xc11a('0x5fa')](_0x284053);
        _0x284053[_0xc11a('0x60a')]()['setVisible'](!0x1);
        _0x284053['on'](_0xc11a('0x60b'), function (_0x284053) {
            console['info'](_0x284053);
            window['setTimeout'](function () {
                _0x26e842['show'](_0x284053['coordinate'], _0x284053['address'][_0xc11a('0x60e')]);
            }, 0xbb8);
        });
        this['map']['on'](_0xc11a('0x60f'), function (_0x284053) {
            var _0x4f61d8, _0x3bd1b3 = this['map'][_0xc11a('0x610')](_0x284053[_0xc11a('0x603')], {
                'layerFilter': function (_0x284053) {
                    return !_0x284053['get']('name');
                }
            });
            if (_0x3bd1b3)
                for (_0x4f61d8 = 0x0; _0x4f61d8 < _0x3bd1b3['length']; _0x4f61d8++)
                    this['fireEvent'](_0xc11a('0x611'), _0x3bd1b3[_0x4f61d8]);
            else
                overlay['setPosition'](void 0x0),
                    this['fireEvent'](_0xc11a('0x612'));
            if (_0x3bd1b3)
                for (_0x4f61d8 = 0x0; _0x4f61d8 < _0x3bd1b3['length']; _0x4f61d8++) {
                    var _0x5032c7 = _0x3bd1b3[_0x4f61d8]['get']('record');
                    _0x5032c7 && _0x5032c7 instanceof Traccar['model']['Device'] && Traccar['app']['showOverlay'](this['map'], _0x5032c7, _0x284053);
                }
        }, this);
    },
    'listeners': {
        'afterrender': function () {
            this[_0xc11a('0x613')]();
        },
        'resize': function () {
            this['map'][_0xc11a('0x614')]();
        }
    }
}, function () {
    proj4[_0xc11a('0x615')](_0xc11a('0x5ed'), _0xc11a('0x616'));
    proj4[_0xc11a('0x615')](_0xc11a('0x5f0'), _0xc11a('0x617'));
    ol[_0xc11a('0x5f5')]['get'](_0xc11a('0x5f0'))[_0xc11a('0x618')]([-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244]);
});
Ext['define'](_0xc11a('0x619'), {
    'singleton': !0x0,
    'getImageSvg': function (_0x56776c, _0x55b26d, _0x5bbfd1, _0x3bda14) {
        var _0x4afaba, _0x8c2a81, _0x54df54, _0x51af57, _0x189d8b;
        _0x3bda14 = Ext['getStore']('DeviceImages')['findRecord']('key', _0x3bda14 || _0xc11a('0x61a'), 0x0, !0x1, !0x1, !0x0);
        (_0x8c2a81 = Ext['clone'](_0x3bda14['get'](_0xc11a('0x61b')))) || (_0x8c2a81 = this[_0xc11a('0x61c')](_0x3bda14['get'](_0xc11a('0x61b'))));
        _0x54df54 = parseFloat(_0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x61e')](_0xc11a('0x61f')));
        _0x51af57 = parseFloat(_0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x61e')](_0xc11a('0x620')));
        _0x189d8b = _0x3bda14['get'](_0xc11a('0x621'));
        Ext['isArray'](_0x189d8b) || (_0x189d8b = [_0x189d8b]);
        for (_0x4afaba = 0x0; _0x4afaba < _0x189d8b['length']; _0x4afaba++)
            _0x8c2a81['getElementById'](_0x189d8b[_0x4afaba])['style'][_0xc11a('0x622')] = _0x56776c;
        _0x56776c = _0xc11a('0x623') + _0x5bbfd1 + '\x20' + _0x54df54 / 0x2 + '\x20' + _0x51af57 / 0x2 + ')';
        _0x8c2a81['getElementById'](_0x3bda14['get'](_0xc11a('0x624')))[_0xc11a('0x625')](_0xc11a('0x626'), _0x56776c);
        _0x55b26d ? (_0x54df54 *= Traccar['Style'][_0xc11a('0x627')],
            _0x51af57 *= Traccar['Style'][_0xc11a('0x627')],
            _0x55b26d = _0xc11a('0x628') + Traccar['Style'][_0xc11a('0x627')] + ')\x20') : (_0x54df54 *= Traccar['Style'][_0xc11a('0x629')],
                _0x51af57 *= Traccar['Style']['mapScaleNormal'],
                _0x55b26d = _0xc11a('0x628') + Traccar['Style'][_0xc11a('0x629')] + ')\x20');
        _0x3bda14['get'](_0xc11a('0x62a')) !== _0x3bda14['get']('rotateId') ? _0x8c2a81['getElementById'](_0x3bda14['get']('scaleId'))[_0xc11a('0x625')](_0xc11a('0x626'), _0x55b26d) : _0x8c2a81['getElementById'](_0x3bda14['get'](_0xc11a('0x62a')))['setAttribute']('transform', _0x55b26d + '\x20' + _0x56776c);
        _0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x625')](_0xc11a('0x61f'), _0x54df54);
        _0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x625')](_0xc11a('0x620'), _0x51af57);
        _0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x625')](_0xc11a('0x62b'), '0\x200\x20' + _0x54df54 + '\x20' + _0x51af57);
        return _0x8c2a81;
    },
    'formatSrc': function (_0x1d9637) {
        return 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(new XMLSerializer()['serializeToString'](_0x1d9637[_0xc11a('0x61d')]));
    },
    'cloneDocument': function (_0x545e2c) {
        var _0x379736;
        _0x379736 = _0x545e2c[_0xc11a('0x62c')]['createDocument'](_0x545e2c[_0xc11a('0x62d')], null, null);
        _0x545e2c = _0x379736[_0xc11a('0x62e')](_0x545e2c[_0xc11a('0x61d')], !0x0);
        _0x379736[_0xc11a('0x62f')](_0x545e2c);
        return _0x379736;
    },
    'getImageIcon': function (_0x50cc32, _0x2a8bbe, _0x433cfc, _0x41abb4) {
        var _0x8a5987, _0x1c8bda, _0x55bc11;
        _0x8a5987 = this['getImageSvg'](_0x50cc32, _0x2a8bbe, _0x433cfc, _0x41abb4);
        _0x1c8bda = parseFloat(_0x8a5987[_0xc11a('0x61d')]['getAttribute'](_0xc11a('0x61f')));
        _0x55bc11 = parseFloat(_0x8a5987[_0xc11a('0x61d')][_0xc11a('0x61e')](_0xc11a('0x620')));
        _0x8a5987 = new ol['style']['Icon']({
            'imgSize': [_0x1c8bda, _0x55bc11],
            'src': this[_0xc11a('0x630')](_0x8a5987)
        });
        _0x8a5987[_0xc11a('0x622')] = _0x50cc32;
        _0x8a5987['zoom'] = _0x2a8bbe;
        _0x8a5987[_0xc11a('0x631')] = _0x433cfc;
        _0x8a5987['category'] = _0x41abb4;
        return _0x8a5987;
    }
});
Ext['define'](_0xc11a('0x632'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x633'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'selectdevice': 'selectDevice',
                    'selectreport': 'selectReport',
                    'selectevent': 'selectEvent'
                },
                'devices': {
                    'deselectfeature': _0xc11a('0x634')
                }
            },
            'store': {
                '#Devices': {
                    'add': _0xc11a('0x635'),
                    'update': _0xc11a('0x635'),
                    'remove': _0xc11a('0x636')
                },
                '#VisibleDevices': {
                    'add': _0xc11a('0x637'),
                    'update': 'updateVisibleDevices',
                    'remove': _0xc11a('0x637'),
                    'refresh': 'filterDevices'
                },
                '#LatestPositions': {
                    'add': 'updateLatest',
                    'update': 'updateLatest'
                },
                '#ReportRoute': {
                    'add': _0xc11a('0x638'),
                    'load': _0xc11a('0x639'),
                    'clear': 'clearReport'
                },
                '#Events': {
                    'remove': 'clearEvent',
                    'clear': _0xc11a('0x63a')
                }
            },
            'component': {
                '#': {
                    'selectfeature': 'selectFeature',
                    'deselectfeature': 'deselectFeature'
                }
            }
        }
    },
    'init': function () {
        this[_0xc11a('0x63b')] = {};
        this[_0xc11a('0x63c')] = {};
        this[_0xc11a('0x63d')] = {};
        this[_0xc11a('0x63e')] = {};
        this[_0xc11a('0x63f')] = Traccar['app']['getAttributePreference']('web.liveRouteLength', 0xa);
        this['selectZoom'] = Traccar['app']['getAttributePreference']('web.selectZoom', 0x0);
    },
    'getAreaStyle': function (_0x23f777, _0x596c01) {
        var _0x27ac84;
        _0x596c01 ? _0x27ac84 = ol['color'][_0xc11a('0x640')](_0x596c01) : (_0x27ac84 = ol['color'][_0xc11a('0x640')](Traccar['Style'][_0xc11a('0x641')]),
            _0x596c01 = Traccar['Style'][_0xc11a('0x641')]);
        _0x27ac84[0x3] = Traccar['Style']['mapGeofenceOverlayOpacity'];
        _0x27ac84 = {
            'fill': new ol[('style')][(_0xc11a('0x642'))]({
                'color': _0x27ac84
            }),
            'stroke': new ol[('style')][(_0xc11a('0x643'))]({
                'color': _0x596c01,
                'width': Traccar['Style'][_0xc11a('0x644')]
            })
        };
        _0x23f777 && (_0x27ac84['text'] = new ol['style'][(_0xc11a('0x645'))]({
            'text': _0x23f777,
            'overflow': !0x0,
            'fill': new ol[('style')][(_0xc11a('0x642'))]({
                'color': Traccar['Style'][_0xc11a('0x646')]
            }),
            'stroke': new ol[('style')]['Stroke']({
                'color': Traccar['Style']['mapTextStrokeColor'],
                'width': Traccar['Style'][_0xc11a('0x647')]
            }),
            'font': Traccar['Style']['mapTextFont']
        }));
        return new ol['style'][('Style')](_0x27ac84);
    },
    'getDeviceColor': function (_0x5403cc) {
        switch (_0x5403cc['get']('status')) {
            case 'online':
                return Traccar['Style']['mapColorOnline'];
            case 'offline':
                return Traccar['Style'][_0xc11a('0x648')];
            default:
                return Traccar['Style'][_0xc11a('0x649')];
        }
    },
    'updateDevice': function (_0x486e58, _0x50ea76) {
        var _0x177f73, _0x13bd12, _0x9ac140;
        Ext['isArray'](_0x50ea76) || (_0x50ea76 = [_0x50ea76]);
        for (_0x486e58 = 0x0; _0x486e58 < _0x50ea76['length']; _0x486e58++)
            if (_0x177f73 = _0x50ea76[_0x486e58],
                _0x13bd12 = _0x177f73['get']('id'),
                _0x13bd12 in this['latestMarkers']) {
                _0x13bd12 = this[_0xc11a('0x63b')][_0x13bd12];
                _0x9ac140 = _0x13bd12[_0xc11a('0x64a')]();
                if (_0x9ac140[_0xc11a('0x64b')]()[_0xc11a('0x622')] !== this[_0xc11a('0x64c')](_0x177f73) || _0x9ac140[_0xc11a('0x64b')]()['category'] !== _0x177f73['get']('category'))
                    this[_0xc11a('0x64d')](_0x9ac140, this[_0xc11a('0x64c')](_0x177f73), _0x177f73['get']('category')),
                        _0x13bd12[_0xc11a('0x64e')]();
                _0x9ac140[_0xc11a('0x64f')]()[_0xc11a('0x64f')]() !== _0x177f73['get']('name') && (_0x9ac140[_0xc11a('0x64f')]()[_0xc11a('0x650')](_0x177f73['get']('name')),
                    _0x13bd12['changed']());
            }
    },
    'removeDevice': function (_0x15c1ac, _0x5a516f) {
        var _0xc63949, _0xc2d28f;
        Ext['isArray'](_0x5a516f) || (_0x5a516f = [_0x5a516f]);
        _0xc2d28f = this['getView']()['getMarkersSource']();
        for (_0x15c1ac = 0x0; _0x15c1ac < _0x5a516f['length']; _0x15c1ac++)
            _0xc63949 = _0x5a516f[_0x15c1ac]['get']('id'),
                this[_0xc11a('0x63b')][_0xc63949] && (_0xc2d28f[_0xc11a('0x651')](this[_0xc11a('0x63b')][_0xc63949]['getId']()) && _0xc2d28f[_0xc11a('0x652')](this[_0xc11a('0x63b')][_0xc63949]),
                    delete this[_0xc11a('0x63b')][_0xc63949]),
                this[_0xc11a('0x63d')][_0xc63949] && (_0xc2d28f['getFeatureById'](this['accuracyCircles'][_0xc63949]['getId']()) && _0xc2d28f[_0xc11a('0x652')](this['accuracyCircles'][_0xc63949]),
                    delete this['accuracyCircles'][_0xc63949]),
                this[_0xc11a('0x63e')][_0xc63949] && (_0xc2d28f[_0xc11a('0x651')](this[_0xc11a('0x63e')][_0xc63949]['getId']()) && _0xc2d28f[_0xc11a('0x652')](this[_0xc11a('0x63e')][_0xc63949]),
                    delete this[_0xc11a('0x63e')][_0xc63949]);
    },
    'updateLatest': function (_0x482652, _0x15abf2) {
        var _0x5f5a25, _0x37ed45, _0x4b0f44;
        Ext['isArray'](_0x15abf2) || (_0x15abf2 = [_0x15abf2]);
        _0x4b0f44 = Ext['getStore']('Devices');
        for (_0x482652 = 0x0; _0x482652 < _0x15abf2['length']; _0x482652++)
            if (_0x5f5a25 = _0x15abf2[_0x482652],
                _0x37ed45 = _0x4b0f44['getById'](_0x5f5a25['get']('deviceId')))
                this[_0xc11a('0x653')](_0x5f5a25, _0x37ed45),
                    this[_0xc11a('0x654')](_0x5f5a25, _0x37ed45),
                    this[_0xc11a('0x655')](_0x5f5a25, _0x37ed45);
    },
    'updateAccuracy': function (_0x39fd95, _0x1ffd82) {
        var _0x5a1e23, _0x10eaa9, _0x2be59d, _0x1baaf0;
        _0x10eaa9 = this['getView']()['getMapView']();
        _0x2be59d = this[_0xc11a('0x63d')][_0x39fd95['get']('deviceId')];
        _0x39fd95['get']('accuracy') ? (_0x1baaf0 = _0x10eaa9[_0xc11a('0x657')](),
            _0x5a1e23 = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x39fd95['get']('longitude'), _0x39fd95['get']('latitude')]),
            _0x1baaf0 = ol[_0xc11a('0x5f5')][_0xc11a('0x658')](_0x1baaf0, _0x10eaa9['getResolution'](), _0x5a1e23),
            _0x10eaa9 = _0x39fd95['get']('accuracy') / ol[_0xc11a('0x5f5')][_0xc11a('0x659')]['m'] * _0x10eaa9[_0xc11a('0x65a')]() / _0x1baaf0,
            _0x2be59d ? (_0x2be59d['getGeometry']()['setCenter'](_0x5a1e23),
                _0x2be59d['getGeometry']()[_0xc11a('0x65d')](_0x10eaa9)) : (_0x2be59d = new ol[(_0xc11a('0x65e'))](new ol[(_0xc11a('0x65f'))][(_0xc11a('0x115'))](_0x5a1e23, _0x10eaa9)),
                    _0x2be59d[_0xc11a('0x660')](this[_0xc11a('0x661')](null, Traccar['Style'][_0xc11a('0x662')])),
                    _0x2be59d[_0xc11a('0x663')](_0x39fd95['get']('deviceId')),
                    this['accuracyCircles'][_0x39fd95['get']('deviceId')] = _0x2be59d,
                    this[_0xc11a('0x664')](_0x1ffd82) && this['getView']()[_0xc11a('0x665')]()['addFeature'](_0x2be59d))) : (_0x2be59d && this['getView']()[_0xc11a('0x665')]()['getFeatureById'](_0x2be59d['getId']()) && this['getView']()['getAccuracySource']()[_0xc11a('0x652')](_0x2be59d),
                        delete this[_0xc11a('0x63d')][_0x39fd95['get']('deviceId')]);
    },
    'updateLatestMarker': function (_0x217cb1, _0x3574d4) {
        var _0x57179f, _0x32cd2b, _0x223a16, _0xe13a9a;
        _0x57179f = new ol['geom']['Point'](ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x217cb1['get']('longitude'), _0x217cb1['get']('latitude')]));
        _0x32cd2b = _0x217cb1['get']('deviceId');
        _0x32cd2b in this[_0xc11a('0x63b')] ? (_0x223a16 = this['latestMarkers'][_0x32cd2b],
            _0xe13a9a = _0x223a16[_0xc11a('0x64a')](),
            _0xe13a9a[_0xc11a('0x64b')]()[_0xc11a('0x631')] !== _0x217cb1['get']('course') && this[_0xc11a('0x666')](_0xe13a9a, _0x217cb1['get']('course')),
            _0x223a16[_0xc11a('0x667')](_0x57179f)) : (_0x223a16 = new ol[(_0xc11a('0x65e'))](_0x57179f),
                _0x223a16['set']('record', _0x3574d4),
                _0xe13a9a = this[_0xc11a('0x668')](this[_0xc11a('0x64c')](_0x3574d4), _0x217cb1['get']('course'), _0x3574d4['get']('category')),
                _0xe13a9a[_0xc11a('0x64f')]()[_0xc11a('0x650')](_0x3574d4['get']('name')),
                _0x223a16['setStyle'](_0xe13a9a),
                _0x223a16[_0xc11a('0x663')](_0x3574d4['get']('id')),
                this[_0xc11a('0x63b')][_0x32cd2b] = _0x223a16,
                this[_0xc11a('0x664')](_0x3574d4) && this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x66a')](_0x223a16));
        _0x223a16 === this['selectedMarker'] && this['lookupReference']('deviceFollowButton')['pressed'] && this['getView']()['getMapView']()['setCenter'](_0x223a16['getGeometry']()['getCoordinates']());
    },
    'updateLiveRoute': function (_0x5d536b, _0x333a52) {
        var _0x261f4d, _0x586257;
        _0x261f4d = _0x5d536b['get']('deviceId');
        if (_0x261f4d in this[_0xc11a('0x63e')]) {
            if (_0x333a52 = this[_0xc11a('0x63e')][_0x261f4d]['getGeometry']()['getCoordinates'](),
                _0x586257 = _0x333a52[_0x333a52['length'] - 0x1],
                _0x5d536b = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x5d536b['get']('longitude'), _0x5d536b['get']('latitude')]),
                _0x586257[0x0] !== _0x5d536b[0x0] || _0x586257[0x1] !== _0x5d536b[0x1])
                _0x333a52['length'] >= this[_0xc11a('0x63f')] && _0x333a52[_0xc11a('0x66c')](),
                    _0x333a52['push'](_0x5d536b),
                    this[_0xc11a('0x63e')][_0x261f4d]['getGeometry']()[_0xc11a('0x66d')](_0x333a52);
        } else
            _0x5d536b = new ol[(_0xc11a('0x65e'))]({
                'geometry': new ol['geom'][(_0xc11a('0x117'))]([ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x5d536b['get']('longitude'), _0x5d536b['get']('latitude')])])
            }),
                _0x5d536b[_0xc11a('0x660')](this[_0xc11a('0x66e')](_0x261f4d)),
                _0x5d536b[_0xc11a('0x663')](_0x261f4d),
                this[_0xc11a('0x63e')][_0x261f4d] = _0x5d536b,
                this[_0xc11a('0x664')](_0x333a52) && this['getView']()[_0xc11a('0x669')]()['addFeature'](_0x5d536b);
    },
    'loadReport': function (_0x175b86, _0x165034) {
        var _0x46dd8d, _0x9dea10;
        if (_0x165034)
            for (this[_0xc11a('0x638')](_0x175b86, _0x165034),
                _0x9dea10 = this['getView']()[_0xc11a('0x66f')](),
                this['reportRoute'] = [],
                _0x175b86 = 0x0; _0x175b86 < _0x165034['length']; _0x175b86++) {
                _0x46dd8d = _0x165034[_0x175b86];
                _0x46dd8d = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x46dd8d['get']('longitude'), _0x46dd8d['get']('latitude')]);
                if (0x0 === _0x175b86 || _0x165034[_0x175b86]['get']('deviceId') !== _0x165034[_0x175b86 - 0x1]['get']('deviceId'))
                    this['reportRoute']['push'](new ol[(_0xc11a('0x65e'))]({
                        'geometry': new ol['geom']['LineString']([])
                    })),
                        this['reportRoute'][this['reportRoute']['length'] - 0x1][_0xc11a('0x660')](this[_0xc11a('0x66e')](_0x165034[_0x175b86]['get']('deviceId'))),
                        _0x9dea10['addFeature'](this['reportRoute'][this['reportRoute']['length'] - 0x1]);
                this['reportRoute'][this['reportRoute']['length'] - 0x1]['getGeometry']()[_0xc11a('0x670')](_0x46dd8d);
            }
    },
    'addReportMarker': function (_0x5afe8a) {
        var _0x3aa234;
        _0x3aa234 = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x5afe8a['get']('longitude'), _0x5afe8a['get']('latitude')]);
        _0x3aa234 = new ol[(_0xc11a('0x65f'))][(_0xc11a('0x671'))](_0x3aa234);
        _0x3aa234 = new ol[(_0xc11a('0x65e'))](_0x3aa234);
        _0x3aa234['set']('record', _0x5afe8a);
        _0x5afe8a = this[_0xc11a('0x672')](_0x5afe8a['get']('deviceId'), _0x5afe8a['get']('course'));
        _0x3aa234[_0xc11a('0x660')](_0x5afe8a);
        this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x66a')](_0x3aa234);
        return _0x3aa234;
    },
    'addReportMarkers': function (_0x286928, _0x1ecd38) {
        var _0x37d794;
        this['clearReport']();
        for (_0x37d794 = 0x0; _0x37d794 < _0x1ecd38['length']; _0x37d794++)
            _0x286928[_0xc11a('0x55c')] && (this[_0xc11a('0x63c')][_0x1ecd38[_0x37d794]['get']('id')] = this['addReportMarker'](_0x1ecd38[_0x37d794]));
        this[_0xc11a('0x673')](_0x1ecd38);
    },
    'clearReport': function () {
        var _0x10fac4, _0x16ad08, _0x26bb35;
        _0x26bb35 = this['getView']()[_0xc11a('0x66f')]();
        if (this['reportRoute']) {
            for (_0x16ad08 = 0x0; _0x16ad08 < this['reportRoute']['length']; _0x16ad08++)
                _0x26bb35['removeFeature'](this['reportRoute'][_0x16ad08]);
            this['reportRoute'] = null;
        }
        if (this['reportMarkers']) {
            _0x16ad08 = this['getView']()[_0xc11a('0x669')]();
            for (_0x10fac4 in this[_0xc11a('0x63c')])
                this[_0xc11a('0x63c')]['hasOwnProperty'](_0x10fac4) && _0x16ad08[_0xc11a('0x652')](this['reportMarkers'][_0x10fac4]);
            this[_0xc11a('0x63c')] = {};
        }
        this['selectedMarker'] && !this['selectedMarker']['get']('event') && this['selectedMarker']['get']('record') instanceof Traccar['model']['Position'] && (this['selectedMarker'] = null);
    },
    'clearEvent': function () {
        this['selectedMarker'] && this['selectedMarker']['get']('event') && this[_0xc11a('0x674')](null, !0x1);
    },
    'getRouteStyle': function (_0x53fd36) {
        return new ol[('style')][('Style')]({
            'stroke': new ol[('style')][(_0xc11a('0x643'))]({
                'color': Traccar['app']['getReportColor'](_0x53fd36),
                'width': Traccar['Style'][_0xc11a('0x675')]
            })
        });
    },
    'getMarkerStyle': function (_0x2d3c85, _0x8082dc, _0x5a4e44, _0x496c8b) {
        _0x2d3c85 = Traccar['DeviceImages'][_0xc11a('0x676')](_0x8082dc, _0x2d3c85, _0x5a4e44, _0x496c8b);
        return new ol[('style')][('Style')]({
            'image': _0x2d3c85,
            'text': new ol['style'][(_0xc11a('0x645'))]({
                'textBaseline': _0xc11a('0x5b6'),
                'fill': new ol[('style')][(_0xc11a('0x642'))]({
                    'color': Traccar['Style']['mapTextColor']
                }),
                'stroke': new ol[('style')][(_0xc11a('0x643'))]({
                    'color': Traccar['Style'][_0xc11a('0x677')],
                    'width': Traccar['Style'][_0xc11a('0x647')]
                }),
                'offsetY': -_0x2d3c85[_0xc11a('0x678')]()[0x1] / 0x2 - Traccar['Style'][_0xc11a('0x679')],
                'font': Traccar['Style'][_0xc11a('0x67a')]
            })
        });
    },
    'getLatestMarker': function (_0x4b7c6f, _0x99cecd, _0x54c688) {
        return this['getMarkerStyle'](!0x1, _0x4b7c6f, _0x99cecd, _0x54c688);
    },
    'getReportMarker': function (_0x5a34f1, _0x2997c0) {
        return this[_0xc11a('0x67b')](!0x1, Traccar['app'][_0xc11a('0x67c')](_0x5a34f1), _0x2997c0, 'arrow');
    },
    'resizeMarker': function (_0x2c4d50, _0x8083) {
        var _0x3b4a92;
        _0x8083 = Traccar['DeviceImages']['getImageIcon'](_0x2c4d50[_0xc11a('0x64b')]()[_0xc11a('0x622')], _0x8083, _0x2c4d50['getImage']()[_0xc11a('0x631')], _0x2c4d50[_0xc11a('0x64b')]()['category']);
        _0x3b4a92 = _0x2c4d50[_0xc11a('0x64f')]();
        _0x3b4a92[_0xc11a('0x67d')](-_0x8083[_0xc11a('0x678')]()[0x1] / 0x2 - Traccar['Style'][_0xc11a('0x679')]);
        _0x2c4d50[_0xc11a('0x650')](_0x3b4a92);
        _0x2c4d50['setImage'](_0x8083);
    },
    'rotateMarker': function (_0x114864, _0x3e8211) {
        _0x114864[_0xc11a('0x67e')](Traccar['DeviceImages'][_0xc11a('0x676')](_0x114864['getImage']()[_0xc11a('0x622')], _0x114864['getImage']()['zoom'], _0x3e8211, _0x114864[_0xc11a('0x64b')]()['category']));
    },
    'updateDeviceMarker': function (_0x58348d, _0x42bfa0, _0xa20f08) {
        _0x42bfa0 = Traccar['DeviceImages']['getImageIcon'](_0x42bfa0, _0x58348d['getImage']()['zoom'], _0x58348d[_0xc11a('0x64b')]()[_0xc11a('0x631')], _0xa20f08);
        _0xa20f08 = _0x58348d[_0xc11a('0x64f')]();
        _0xa20f08[_0xc11a('0x67d')](-_0x42bfa0['getSize']()[0x1] / 0x2 - Traccar['Style'][_0xc11a('0x679')]);
        _0x58348d[_0xc11a('0x650')](_0xa20f08);
        _0x58348d[_0xc11a('0x67e')](_0x42bfa0);
    },
    'selectMarker': function (_0x29439a, _0x42e78d) {
        this['selectedMarker'] && (this['selectedMarker']['get']('event') ? (this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x652')](this['selectedMarker']),
            _0x29439a && _0x29439a['get']('event') || this['fireEvent']('deselectevent')) : !Ext['getStore']('ReportRoute')[_0xc11a('0x55c')] && this['selectedMarker']['get']('record') instanceof Traccar['model']['Position'] ? (this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x652')](this['selectedMarker']),
                delete this[_0xc11a('0x63c')][this['selectedMarker']['get']('record')['get']('id')]) : (this[_0xc11a('0x67f')](this['selectedMarker'][_0xc11a('0x64a')](), !0x1),
                    this['selectedMarker'][_0xc11a('0x64a')]()[_0xc11a('0x680')](0x0),
                    this['selectedMarker'][_0xc11a('0x64e')]()));
        _0x29439a && (this[_0xc11a('0x67f')](_0x29439a[_0xc11a('0x64a')](), !0x0),
            _0x29439a['getStyle']()[_0xc11a('0x680')](0x1),
            _0x29439a[_0xc11a('0x64e')](),
            _0x42e78d && (this['getView']()['getMapView']()['setCenter'](_0x29439a['getGeometry']()['getCoordinates']()),
                0x0 !== this['selectZoom'] && this[_0xc11a('0x681')] > this['getView']()['getMapView']()[_0xc11a('0x682')]() && this['getView']()['getMapView']()[_0xc11a('0x683')](this['selectZoom'])));
        this['selectedMarker'] = _0x29439a;
    },
    'selectDevice': function (_0x342396, _0x383abd) {
        this[_0xc11a('0x674')](this[_0xc11a('0x63b')][_0x342396['get']('id')], _0x383abd);
    },
    'selectReport': function (_0x4b7423, _0x33a2fd) {
        _0x4b7423 instanceof Traccar['model']['Position'] && (Ext['getStore'](_0xc11a('0x573'))[_0xc11a('0x55c')] || (this['reportMarkers'][_0x4b7423['get']('id')] = this[_0xc11a('0x684')](_0x4b7423)),
            this[_0xc11a('0x674')](this[_0xc11a('0x63c')][_0x4b7423['get']('id')], _0x33a2fd));
    },
    'selectEvent': function (_0x5af06c) {
        this['fireEvent']('deselectfeature');
        _0x5af06c ? (_0x5af06c = this[_0xc11a('0x684')](_0x5af06c),
            _0x5af06c['set']('event', !0x0),
            this['selectMarker'](_0x5af06c, !0x0)) : this['selectedMarker'] && this['selectedMarker']['get']('event') && this[_0xc11a('0x674')](null, !0x1);
    },
    'selectFeature': function (_0x2fa345) {
        (_0x2fa345 = _0x2fa345['get']('record')) && (_0x2fa345 instanceof Traccar['model']['Device'] ? this['fireEvent']('selectdevice', _0x2fa345, !0x1) : this['fireEvent'](_0xc11a('0x56c'), _0x2fa345, !0x1));
    },
    'deselectFeature': function () {
        this[_0xc11a('0x634')]();
        this['fireEvent'](_0xc11a('0x612'));
    },
    'deselectDevice': function () {
        this[_0xc11a('0x674')](null, !0x1);
    },
    'zoomToAllPositions': function (_0x59e05c) {
        var _0x156d12, _0x532b29, _0x37cd2d, _0x4b4171, _0x1694a8, _0x4ee21d;
        for (_0x156d12 = 0x0; _0x156d12 < _0x59e05c['length']; _0x156d12++)
            _0x532b29 = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x59e05c[_0x156d12]['get']('longitude'), _0x59e05c[_0x156d12]['get']('latitude')]),
                0x0 === _0x156d12 ? (_0x37cd2d = _0x1694a8 = _0x532b29[0x0],
                    _0x4b4171 = _0x4ee21d = _0x532b29[0x1]) : (_0x37cd2d = Math[_0xc11a('0x685')](_0x532b29[0x0], _0x37cd2d),
                        _0x4b4171 = Math[_0xc11a('0x685')](_0x532b29[0x1], _0x4b4171),
                        _0x1694a8 = Math[_0xc11a('0x686')](_0x532b29[0x0], _0x1694a8),
                        _0x4ee21d = Math[_0xc11a('0x686')](_0x532b29[0x1], _0x4ee21d));
        _0x37cd2d !== _0x1694a8 || _0x4b4171 !== _0x4ee21d ? this['getView']()['getMapView']()[fit]([_0x37cd2d, _0x4b4171, _0x1694a8, _0x4ee21d]) : _0x532b29 && this['getView']()['getMapView']()[fit](new ol[(_0xc11a('0x65f'))][(_0xc11a('0x671'))](_0x532b29));
    },
    'updateVisibleDevices': function (_0x507f23, _0x34b531) {
        var _0x3ef583;
        Ext['isArray'](_0x34b531) || (_0x34b531 = [_0x34b531]);
        for (_0x507f23 = 0x0; _0x507f23 < _0x34b531['length']; _0x507f23++)
            _0x3ef583 = _0x34b531[_0x507f23],
                _0x3ef583['get']('id') in this[_0xc11a('0x63b')] && this[_0xc11a('0x687')](_0x3ef583);
    },
    'isDeviceVisible': function (_0x2e50e2) {
        return Ext['getStore']('VisibleDevices')[_0xc11a('0x688')](_0x2e50e2);
    },
    'updateDeviceVisibility': function (_0x328d68) {
        var _0x2ee54f, _0x1f679c, _0x3a63fd;
        _0x2ee54f = _0x328d68['get']('id');
        _0x3a63fd = this[_0xc11a('0x63b')][_0x2ee54f];
        _0x1f679c = this[_0xc11a('0x63d')][_0x2ee54f];
        _0x2ee54f = this[_0xc11a('0x63e')][_0x2ee54f];
        this[_0xc11a('0x664')](_0x328d68) ? (_0x3a63fd && !this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x651')](_0x3a63fd['getId']()) && this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x66a')](_0x3a63fd),
            _0x1f679c && !this['getView']()[_0xc11a('0x665')]()[_0xc11a('0x651')](_0x1f679c['getId']()) && this['getView']()['getAccuracySource']()[_0xc11a('0x66a')](_0x1f679c),
            _0x2ee54f && !this['getView']()[_0xc11a('0x689')]()[_0xc11a('0x651')](_0x2ee54f['getId']()) && this['getView']()['getLiveRouteSource']()[_0xc11a('0x66a')](_0x2ee54f)) : (_0x3a63fd && this['getView']()['getMarkersSource']()[_0xc11a('0x651')](_0x3a63fd['getId']()) && this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x652')](_0x3a63fd),
                _0x1f679c && this['getView']()[_0xc11a('0x665')]()[_0xc11a('0x651')](_0x1f679c['getId']()) && this['getView']()[_0xc11a('0x665')]()[_0xc11a('0x652')](_0x1f679c),
                _0x2ee54f && this['getView']()[_0xc11a('0x689')]()[_0xc11a('0x651')](_0x2ee54f['getId']()) && this['getView']()[_0xc11a('0x689')]()[_0xc11a('0x652')](_0x2ee54f));
    },
    'filterDevices': function () {
        Ext['getStore']('Devices')['each'](this[_0xc11a('0x687')], this, !0x1);
    }
});
Ext['define'](_0xc11a('0x68a'), {
    'singleton': !0x0,
    'wktToGeometry': function (_0x38a580, _0x52820d) {
        var _0x46037e, _0x7149cf = [], _0xc5cb7e, _0x1deed9;
        if (0x0 === _0x52820d['lastIndexOf'](_0xc11a('0x68c'), 0x0)) {
            if (_0x52820d = _0x52820d['match'](/\([^()]+\)/),
                null !== _0x52820d && (_0x52820d = _0x52820d[0x0][_0xc11a('0x554')](/-?\d+\.?\d*/g),
                    null !== _0x52820d)) {
                _0x46037e = _0x38a580[_0xc11a('0x657')]();
                for (_0x38a580 = 0x0; _0x38a580 < _0x52820d['length']; _0x38a580 += 0x2)
                    _0xc5cb7e = Number(_0x52820d[_0x38a580]),
                        _0x1deed9 = Number(_0x52820d[_0x38a580 + 0x1]),
                        _0x7149cf['push'](ol[_0xc11a('0x5f5')][_0xc11a('0x626')]([_0x1deed9, _0xc5cb7e], _0xc11a('0x5ec'), _0x46037e));
                _0x46037e = new ol[(_0xc11a('0x65f'))][(_0xc11a('0x113'))]([_0x7149cf]);
            }
        } else if (0x0 === _0x52820d['lastIndexOf']('CIRCLE', 0x0))
            _0x52820d = _0x52820d[_0xc11a('0x554')](/\([^()]+\)/),
                null !== _0x52820d && (_0x52820d = _0x52820d[0x0][_0xc11a('0x554')](/-?\d+\.?\d*/g),
                    null !== _0x52820d && (_0x46037e = _0x38a580[_0xc11a('0x657')](),
                        _0x7149cf = ol['proj'][_0xc11a('0x626')]([Number(_0x52820d[0x1]), Number(_0x52820d[0x0])], _0xc11a('0x5ec'), _0x46037e),
                        _0x38a580 = _0x38a580['getResolution'](),
                        _0x46037e = ol['proj'][_0xc11a('0x658')](_0x46037e, _0x38a580, _0x7149cf),
                        _0x52820d = Number(_0x52820d[0x2]) / ol['proj'][_0xc11a('0x659')]['m'] * (_0x38a580 / _0x46037e),
                        _0x46037e = new ol[(_0xc11a('0x65f'))][(_0xc11a('0x115'))](_0x7149cf, _0x52820d)));
        else if (0x0 === _0x52820d['lastIndexOf']('LINESTRING', 0x0) && (_0x52820d = _0x52820d[_0xc11a('0x554')](/\([^()]+\)/),
            null !== _0x52820d && (_0x52820d = _0x52820d[0x0][_0xc11a('0x554')](/-?\d+\.?\d*/g),
                null !== _0x52820d))) {
            _0x46037e = _0x38a580[_0xc11a('0x657')]();
            for (_0x38a580 = 0x0; _0x38a580 < _0x52820d['length']; _0x38a580 += 0x2)
                _0xc5cb7e = Number(_0x52820d[_0x38a580]),
                    _0x1deed9 = Number(_0x52820d[_0x38a580 + 0x1]),
                    _0x7149cf['push'](ol['proj'][_0xc11a('0x626')]([_0x1deed9, _0xc5cb7e], _0xc11a('0x5ec'), _0x46037e));
            _0x46037e = new ol['geom']['LineString'](_0x7149cf);
        }
        return _0x46037e;
    },
    'geometryToWkt': function (_0x5dad79, _0x4ef340) {
        var _0x3a5852, _0x472556;
        if (_0x4ef340 instanceof ol[_0xc11a('0x65f')][_0xc11a('0x115')])
            _0x3a5852 = _0x4ef340[_0xc11a('0x68d')](),
                _0x4ef340 = _0x4ef340[_0xc11a('0x68e')](),
                _0x4ef340 = [_0x3a5852[0x0] + _0x4ef340, _0x3a5852[0x1]],
                _0x3a5852 = ol[_0xc11a('0x5f5')]['transform'](_0x3a5852, _0x5dad79, _0xc11a('0x5ec')),
                _0x472556 = new ol['Sphere'](0x615299),
                _0x5dad79 = _0x472556[_0xc11a('0x68f')](_0x3a5852, ol[_0xc11a('0x5f5')][_0xc11a('0x626')](_0x4ef340, _0x5dad79, 'EPSG:4326')),
                _0x3a5852 = _0xc11a('0x690') + (_0x3a5852[0x1] + '\x20' + _0x3a5852[0x0] + ',\x20'),
                _0x3a5852 += _0x5dad79['toFixed'](0x1) + ')';
        else if (_0x4ef340 instanceof ol[_0xc11a('0x65f')][_0xc11a('0x113')]) {
            _0x4ef340[_0xc11a('0x626')](_0x5dad79, _0xc11a('0x5ec'));
            _0x4ef340 = _0x4ef340['getCoordinates']();
            _0x3a5852 = _0xc11a('0x691');
            for (_0x5dad79 = 0x0; _0x5dad79 < _0x4ef340[0x0]['length']; _0x5dad79 += 0x1)
                _0x3a5852 += _0x4ef340[0x0][_0x5dad79][0x1] + '\x20' + _0x4ef340[0x0][_0x5dad79][0x0] + ',\x20';
            _0x3a5852 = _0x3a5852['substring'](0x0, _0x3a5852['length'] - 0x2) + '))';
        } else if (_0x4ef340 instanceof ol[_0xc11a('0x65f')][_0xc11a('0x117')]) {
            _0x4ef340[_0xc11a('0x626')](_0x5dad79, 'EPSG:4326');
            _0x4ef340 = _0x4ef340['getCoordinates']();
            _0x3a5852 = _0xc11a('0x693');
            for (_0x5dad79 = 0x0; _0x5dad79 < _0x4ef340['length']; _0x5dad79 += 0x1)
                _0x3a5852 += _0x4ef340[_0x5dad79][0x1] + '\x20' + _0x4ef340[_0x5dad79][0x0] + ',\x20';
            _0x3a5852 = _0x3a5852[substring](0x0, _0x3a5852['length'] - 0x2) + ')';
        }
        return _0x3a5852;
    }
});
var container, content, closer;
Ext['define']('Traccar.view.map.MapController', {
    'extend': Traccar['view']['map']['MapMarkerController'],
    'alias': 'controller.map',
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'mapstaterequest': 'getMapState',
                    'zoomtoalldevices': 'zoomToAllDevices'
                }
            },
            'store': {
                '#Geofences': {
                    'load': 'updateGeofences',
                    'add': 'updateGeofences',
                    'update': 'updateGeofences',
                    'remove': 'updateGeofences'
                }
            }
        }
    },
    'init': function () {
        this['callParent']();
        this['lookupReference']('btnMegaMenu')['setVisible'](Traccar['app']['isMobile']());
        this['lookupReference']('settingsMenuBoolRef')['setVisible'](!Traccar['app']['isMobile']());
        this['lookupReference']('contactWhats')['setVisible'](!Traccar['app']['isMobile']() && !Traccar['app']['getBooleanAttributePreference']('ui.disableWhats'));
        this['lookupReference']('pagamentoML')['setVisible'](!Traccar['app']['isMobile']() && !Traccar['app']['getBooleanAttributePreference']('ui.disablepagamentoML'));
    },
    'onFollowClick': function (_0x58736a, _0x2e65e4) {
        _0x2e65e4 && this['selectedMarker'] && this['getView']()['getMapView']()['setCenter'](this['selectedMarker']['getGeometry']()['getCoordinates']());
    },
    'pgClick': function () {
        var _0x1cd0ee = window['open']('', '_blank');
        $['ajax']({
            'url': _0xc11a('0x69d'),
            'dataType': 'json',
            'success': function (_0x574cf1) {
                _0x1cd0ee[location] = _0x574cf1['url']['linkPagamento'];
            }
        });
    },
    'contactClick': function () {
        var _0xfc84bf = window['open']('', '_blank');
        $['ajax']({
            'url': _0xc11a('0x69d'),
            'dataType': 'json',
            'success': function (_0x3f4a51) {
                _0xfc84bf[location] = _0x3f4a51['url']['linkContatWhats'];
            }
        });
    },
    'openStreetView': function (_0x5bf888, _0xa03336) {
        _0xa03336 ? (null == pressedDevice && (pressedDevice = this['selectedMarker']['get']('record')['get']('id')),
            _0x5bf888 = Ext['getStore']('LatestPositions')['findRecord']('deviceId', pressedDevice, 0x0, !0x1, !0x1, !0x0),
            null == panorama ? (panorama = new google[(_0xc11a('0x6a0'))]['StreetViewPanorama'](document['getElementById']('street-view'), {
                'position': {
                    'lat': _0x5bf888['get']('latitude'),
                    'lng': _0x5bf888['get']('longitude')
                },
                'pov': {
                    'heading': _0x5bf888['get']('course'),
                    'pitch': 0x0
                },
                'visible': !0x0,
                'motionTracking': !0x1,
                'motionTrackingControl': !0x1,
                'linksControl': !0x1,
                'panControl': !0x1,
                'enableCloseButton': !0x1
            }),
                document['getElementById'](_0xc11a('0x6a1'))['style']['position'] = _0xc11a('0x6a2'),
                document['getElementById'](_0xc11a('0x6a1'))['style']['right'] = _0xc11a('0x6a3'),
                document['getElementById']('street-view')['style'][_0xc11a('0x5b6')] = _0xc11a('0x6a3'),
                document['getElementById'](_0xc11a('0x6a1'))['style'][_0xc11a('0x6a4')] = _0xc11a('0x6a5'),
                document['getElementById']('street-view')['style']['marginRight'] = _0xc11a('0x6a6'),
                document['getElementById']('street-view')['style']['marginBottom'] = _0xc11a('0x6a6')) : (panorama['setPosition']({
                    'lat': _0x5bf888['get']('latitude'),
                    'lng': _0x5bf888['get']('longitude')
                }),
                    panorama['setPov']({
                        'heading': _0x5bf888['get']('course'),
                        'pitch': 0x0
                    })),
            document['getElementById']('street-view')['style']['display'] = 'block') : document['getElementById'](_0xc11a('0x6a1'))['style']['display'] = _0xc11a('0x6a8');
    },
    'showLiveRoutes': function (_0x3fbcef) {
        this['getView']()[_0xc11a('0x6a9')]()['setVisible'](_0x3fbcef['pressed']);
    },
    'getMapState': function () {
        var _0x2e30e2, _0x4a9e19;
        _0x2e30e2 = this['getView']()['getMapView']()['getProjection']();
        _0x4a9e19 = ol[_0xc11a('0x5f5')][_0xc11a('0x626')](this['getView']()['getMapView']()[_0xc11a('0x68d')](), _0x2e30e2, _0xc11a('0x5ec'));
        _0x2e30e2 = this['getView']()['getMapView']()[_0xc11a('0x682')]();
        this['fireEvent']('mapstate', _0x4a9e19[0x1], _0x4a9e19[0x0], _0x2e30e2);
    },
    'updateGeofences': function () {
        this['getView']()['getGeofencesSource']()[_0xc11a('0x37d')]();
        this['lookupReference']('showGeofencesButton')['pressed'] && Ext['getStore']('Geofences')['each'](function (_0x4d399) {
            var _0x5f27d5 = new ol[(_0xc11a('0x65e'))](Traccar['GeofenceConverter'][_0xc11a('0x6ab')](this['getView']()['getMapView'](), _0x4d399['get']('area')));
            _0x5f27d5[_0xc11a('0x660')](this[_0xc11a('0x661')](_0x4d399['get']('name'), _0x4d399['get']('attributes') ? _0x4d399['get']('attributes')['color'] : null));
            this['getView']()[_0xc11a('0x6ac')]()['addFeature'](_0x5f27d5);
            return !0x0;
        }, this);
    },
    'zoomToAllDevices': function () {
        this[_0xc11a('0x673')](Ext['getStore']('LatestPositions')['getData']()['items']);
    }
});


Ext['define']('Traccar.view.dialog.MapPickerController', {
    'extend': Traccar['view']['dialog']['BaseEditController'],
    'alias': _0xc11a('0x6ae'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'mapstate': _0xc11a('0x6af')
                }
            }
        }
    },
    'getMapState': function () {
        this['fireEvent'](_0xc11a('0x6b0'));
    },
    'setMapState': function (_0x2411ac, _0x32a268, _0x47196a) {
        this['lookupReference']('latitude')['setValue'](_0x2411ac);
        this['lookupReference']('longitude')['setValue'](_0x32a268);
        this['lookupReference']('zoom')['setValue'](_0x47196a);
    }
});
Ext['define']('Traccar.view.dialog.UserController', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x6b1')],
    'alias': _0xc11a('0x6b2'),
    'init': function () {
        Traccar['app']['getUser']()['get']('administrator') && (this['lookupReference'](_0xc11a('0x6b3'))['setDisabled'](!0x1),
            this['lookupReference'](_0xc11a('0x6b4'))['setDisabled'](!0x1),
            this['lookupReference'](_0xc11a('0x6b5'))['setDisabled'](!0x1));
        if (Traccar['app']['getUser']()['get']('administrator') || !this['getView']()[_0xc11a('0x6b6')])
            this['lookupReference'](_0xc11a('0x6b7'))['setDisabled'](!0x1),
                this['lookupReference']('disabledField')['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x6b8'))['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x6b9'))['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x6ba'))['setDisabled'](!0x1);
        Traccar['app']['getUser']()['get']('administrator') || (this['lookupReference']('editNome')['setDisabled'](!0x0),
            this['lookupReference'](_0xc11a('0x6bb'))['setDisabled'](!0x0));
    },
    'symbols': _0xc11a('0x6bc'),
    'generateToken': function () {
        var _0x17a2b9, _0x15841b = '';
        for (_0x17a2b9 = 0x0; 0x20 > _0x17a2b9; _0x17a2b9++)
            _0x15841b += this['symbols']['charAt'](Math['floor'](Math['random']() * this[_0xc11a('0x6bd')]['length']));
        this['lookupReference'](_0xc11a('0x6be'))['setValue'](_0x15841b);
    },
    'testNotification': function () {
        Ext['Ajax']['request']({
            'url': 'api/notifications/test',
            'method': 'POST',
            'failure': function (_0x29f11f) {
                Traccar['app']['showError'](_0x29f11f);
            }
        });
    },
    'onSaveClick': function (_0x41e423) {
        var _0x2c2ba4, _0x340873;
        _0x2c2ba4 = _0x41e423['up']('window')['down']('form');
        _0x2c2ba4['updateRecord']();
        _0x2c2ba4 = _0x2c2ba4['getRecord']();
        _0x2c2ba4 === Traccar['app']['getUser']() ? _0x2c2ba4['save']() : (_0x340873 = Ext['getStore'](_0xc11a('0x6bf')),
            _0x2c2ba4['phantom'] && _0x340873['add'](_0x2c2ba4),
            _0x340873['sync']({
                'failure': function (_0x41e423) {
                    _0x340873['rejectChanges']();
                    Traccar['app']['showError'](_0x41e423['exceptions'][0x0][getError]()['response']);
                }
            }));
        _0x41e423['up']('window')['close']();
    }
});
Ext['define']('Traccar.view.dialog.User', {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': 'user',
    'title': Strings['settingsUser'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'reference': _0xc11a('0x6c2'),
                'fieldLabel': Strings['sharedName']
            }, {
                'xtype': 'textfield',
                'name': 'email',
                'reference': _0xc11a('0x6bb'),
                'fieldLabel': Strings['userEmail'],
                'allowBlank': !0x1
            }, {
                'xtype': 'textfield',
                'name': 'password',
                'fieldLabel': Strings['userPassword'],
                'inputType': 'password',
                'allowBlank': !0x1
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings[_0xc11a('0x6c3')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'textfield',
                'name': 'phone',
                'fieldLabel': Strings['sharedPhone']
            }, {
                'xtype': 'clearableComboBox',
                'name': 'map',
                'fieldLabel': Strings[_0xc11a('0x6c4')],
                'store': _0xc11a('0x6c5'),
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': _0xc11a('0x6c6'),
                'reference': 'latitude',
                'name': 'latitude',
                'fieldLabel': Strings[_0xc11a('0x594')],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': 'numberfield',
                'reference': 'longitude',
                'name': 'longitude',
                'fieldLabel': Strings['positionLongitude'],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': 'numberfield',
                'reference': 'zoom',
                'name': 'zoom',
                'fieldLabel': Strings[_0xc11a('0x6c7')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'twelveHourFormat',
                'fieldLabel': Strings[_0xc11a('0x6c8')]
            }, {
                'xtype': 'clearableComboBox',
                'name': 'coordinateFormat',
                'fieldLabel': Strings[_0xc11a('0x6c9')],
                'store': 'CoordinateFormats',
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': 'textfield',
                'name': 'poiLayer',
                'fieldLabel': Strings[_0xc11a('0x6ca')]
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings['sharedPermissions'],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'disabled',
                'fieldLabel': Strings['sharedDisabled'],
                'disabled': !0x0,
                'reference': 'disabledField'
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'administrator',
                'fieldLabel': Strings[_0xc11a('0x6cb')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b3')
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'readonly',
                'fieldLabel': Strings[_0xc11a('0x6cc')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b7')
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'deviceReadonly',
                'fieldLabel': Strings[_0xc11a('0x6cd')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b9')
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'limitCommands',
                'fieldLabel': Strings[_0xc11a('0x6ce')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6ba')
            }, {
                'xtype': _0xc11a('0x548'),
                'name': 'expirationTime',
                'fieldLabel': Strings[_0xc11a('0x6cf')],
                'disabled': !0x0,
                'reference': 'expirationTimeField',
                'startDay': Traccar['Style'][_0xc11a('0x543')],
                'format': Traccar['Style'][_0xc11a('0x544')]
            }, {
                'xtype': _0xc11a('0x6c6'),
                'name': 'deviceLimit',
                'fieldLabel': Strings[_0xc11a('0x6d0')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b4')
            }, {
                'xtype': _0xc11a('0x6c6'),
                'name': 'userLimit',
                'fieldLabel': Strings['userUserLimit'],
                'disabled': !0x0,
                'reference': 'userLimitField'
            }, {
                'xtype': 'textfield',
                'name': 'token',
                'reference': _0xc11a('0x6be'),
                'fieldLabel': Strings[_0xc11a('0x6d1')],
                'triggers': {
                    'generate': {
                        'cls': _0xc11a('0x6d2'),
                        'handler': _0xc11a('0x6d3')
                    }
                }
            }]
        }]
    },
    'buttons': [{
        'text': Strings['sharedAttributes'],
        'handler': 'showAttributesView'
    }, {
        'glyph': _0xc11a('0x6d4'),
        'minWidth': 0x0,
        'handler': 'getMapState',
        'tooltip': Strings[_0xc11a('0x6d5')],
        'tooltipType': 'title'
    }, {
        'glyph': 'xf003@FontAwesome',
        'minWidth': 0x0,
        'handler': _0xc11a('0x6d6'),
        'hidden': !0x0,
        'reference': 'testNotificationButton',
        'tooltip': Strings[_0xc11a('0x6d8')],
        'tooltipType': 'title'
    }, {
        'xtype': 'tbfill'
    }, {
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define']('Traccar.view.dialog.Server', {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': _0xc11a('0x6d9'),
    'title': Strings[_0xc11a('0x6da')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings[_0xc11a('0x6c3')],
            'items': [{
                'xtype': 'clearableComboBox',
                'name': 'map',
                'fieldLabel': Strings[_0xc11a('0x6c4')],
                'store': 'MapTypes',
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': 'textfield',
                'name': 'bingKey',
                'fieldLabel': Strings[_0xc11a('0x6db')]
            }, {
                'xtype': 'textfield',
                'name': 'mapUrl',
                'fieldLabel': Strings['mapCustom']
            }, {
                'xtype': 'numberfield',
                'reference': 'latitude',
                'name': 'latitude',
                'fieldLabel': Strings[_0xc11a('0x594')],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': _0xc11a('0x6c6'),
                'reference': 'longitude',
                'name': 'longitude',
                'fieldLabel': Strings[_0xc11a('0x595')],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': 'numberfield',
                'reference': 'zoom',
                'name': 'zoom',
                'fieldLabel': Strings[_0xc11a('0x6c7')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'twelveHourFormat',
                'fieldLabel': Strings[_0xc11a('0x6c8')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'forceSettings',
                'fieldLabel': Strings[_0xc11a('0x6dc')]
            }, {
                'xtype': 'clearableComboBox',
                'name': 'coordinateFormat',
                'fieldLabel': Strings[_0xc11a('0x6c9')],
                'store': 'CoordinateFormats',
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': 'textfield',
                'name': 'poiLayer',
                'fieldLabel': Strings[_0xc11a('0x6ca')]
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings[_0xc11a('0x6dd')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': _0xc11a('0x6de'),
                'fieldLabel': Strings[_0xc11a('0x6df')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'readonly',
                'fieldLabel': Strings[_0xc11a('0x6cc')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'deviceReadonly',
                'fieldLabel': Strings[_0xc11a('0x6cd')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'limitCommands',
                'fieldLabel': Strings[_0xc11a('0x6ce')]
            }]
        }]
    },
    'buttons': [{
        'text': Strings['sharedAttributes'],
        'handler': 'showAttributesView'
    }, {
        'glyph': _0xc11a('0x6d4'),
        'minWidth': 0x0,
        'handler': 'getMapState',
        'tooltip': Strings[_0xc11a('0x6d5')],
        'tooltipType': 'title'
    }, {
        'xtype': 'tbfill'
    }, {
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define'](_0xc11a('0x6e0'), {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': _0xc11a('0x6e1'),
    'columns': {
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }, {
            'text': Strings['deviceIdentifier'],
            'dataIndex': 'uniqueId',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }, {
            'text': Strings['sharedPhone'],
            'dataIndex': 'phone',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings['deviceModel'],
            'dataIndex': 'model',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings['deviceContact'],
            'dataIndex': 'contact',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings['sharedDisabled'],
            'dataIndex': 'disabled',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'renderer': Traccar['AttributeFormatter']['getFormatter']('disabled'),
            'hidden': !0x0,
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6e2')],
            'dataIndex': 'groupId',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllGroups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }]
    }
});
Ext['define'](_0xc11a('0x6e3'), {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': _0xc11a('0x6e4'),
    'columns': {
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x6e2')],
            'dataIndex': 'groupId',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllGroups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }]
    }
});
Ext['define'](_0xc11a('0x6e5'), {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': _0xc11a('0x6e6'),
    'columns': {
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x6e7'), {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': _0xc11a('0x6e8'),
    'columns': {
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x6e9'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': _0xc11a('0x6ea'),
    'objectModel': 'Traccar.model.User',
    'objectDialog': 'Traccar.view.dialog.User',
    'removeTitle': Strings['settingsUser'],
    'init': function () {
        Ext['getStore'](_0xc11a('0x6bf'))['load']();
        this['lookupReference'](_0xc11a('0x6ec'))['setHidden'](!Traccar['app']['getUser']()['get']('administrator'));
        this['lookupReference']('userDriversButton')['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers'));
        this['lookupReference'](_0xc11a('0x6ed'))['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference'](_0xc11a('0x6ee'))['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableCalendars'));
        this['lookupReference'](_0xc11a('0x6f0'))['setHidden'](Traccar['app']['getPreference']('limitCommands', !0x1));
        this['lookupReference'](_0xc11a('0x6f1'))['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
    },
    'onEditClick': function () {
        var _0x268af7, _0x4f40ab = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        _0x268af7 = Ext['create']('Traccar.view.dialog.User', {
            'selfEdit': _0x4f40ab['get']('id') === Traccar['app']['getUser']()['get']('id')
        });
        _0x268af7['down']('form')['loadRecord'](_0x4f40ab);
        _0x268af7['show']();
    },
    'onAddClick': function () {
        var _0x54c478, _0x73523f;
        _0x54c478 = Ext['create']('Traccar.model.User');
        Traccar['app']['getUser']()['get']('administrator') && _0x54c478['set']('deviceLimit', -0x1);
        Traccar['app']['getUser']()['get']('expirationTime') && _0x54c478['set']('expirationTime', Traccar['app']['getUser']()['get']('expirationTime'));
        _0x73523f = Ext['create']('Traccar.view.dialog.User');
        _0x73523f['down']('form')['loadRecord'](_0x54c478);
        _0x73523f['show']();
    },
    'onDevicesClick': function () {
        var _0x5596fa = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['getStore']('AllGroups')['load']();
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['deviceTitle'],
            'items': {
                'xtype': 'linkDevicesView',
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'deviceId',
                'storeName': 'AllDevices',
                'linkStoreName': 'Devices',
                'baseObject': _0x5596fa['getId']()
            }
        })['show']();
    },
    'onGroupsClick': function () {
        var _0x3eba11 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['settingsGroups'],
            'items': {
                'xtype': _0xc11a('0x6e4'),
                'baseObjectName': 'userId',
                'linkObjectName': 'groupId',
                'storeName': 'AllGroups',
                'linkStoreName': 'Groups',
                'baseObject': _0x3eba11['getId']()
            }
        })['show']();
    },
    'onGeofencesClick': function () {
        var _0x596a84 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedGeofences'],
            'items': {
                'xtype': 'linkGeofencesView',
                'baseObjectName': 'userId',
                'linkObjectName': 'geofenceId',
                'storeName': 'AllGeofences',
                'linkStoreName': 'Geofences',
                'baseObject': _0x596a84['getId']()
            }
        })['show']();
    },
    'onNotificationsClick': function () {
        var _0x42ebe6 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedNotifications'],
            'items': {
                'xtype': 'linkNotificationsView',
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': _0xc11a('0x4c9'),
                'storeName': _0xc11a('0x6f4'),
                'linkStoreName': _0xc11a('0x6f5'),
                'baseObject': _0x42ebe6['getId']()
            }
        })['show']();
    },
    'onCalendarsClick': function () {
        var _0x4c58d9 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedCalendars'],
            'items': {
                'xtype': 'linkCalendarsView',
                'baseObjectName': 'userId',
                'linkObjectName': 'calendarId',
                'storeName': 'AllCalendars',
                'linkStoreName': 'Calendars',
                'baseObject': _0x4c58d9['getId']()
            }
        })['show']();
    },
    'onUsersClick': function () {
        var _0x44ff01 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['settingsUsers'],
            'items': {
                'xtype': _0xc11a('0x6e8'),
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': _0xc11a('0x6f7'),
                'storeName': 'Users',
                'baseObject': _0x44ff01['getId']()
            }
        })['show']();
    },
    'onAttributesClick': function () {
        var _0x73d37b = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': 'linkComputedAttributesView',
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'attributeId',
                'storeName': _0xc11a('0x6f8'),
                'linkStoreName': 'ComputedAttributes',
                'baseObject': _0x73d37b['getId']()
            }
        })['show']();
    },
    'onDriversClick': function () {
        var _0x4a0bbc = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedDrivers'],
            'items': {
                'xtype': 'linkDriversView',
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'driverId',
                'storeName': 'AllDrivers',
                'linkStoreName': 'Drivers',
                'baseObject': _0x4a0bbc['getId']()
            }
        })['show']();
    },
    'onCommandsClick': function () {
        var _0x1cd4fc = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedSavedCommands'],
            'items': {
                'xtype': 'linkSavedCommandsView',
                'baseObjectName': 'userId',
                'linkObjectName': 'commandId',
                'storeName': _0xc11a('0x6f9'),
                'linkStoreName': 'Commands',
                'baseObject': _0x1cd4fc['getId']()
            }
        })['show']();
    },
    'onMaintenancesClick': function () {
        var _0x58f5cb = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedMaintenances'],
            'items': {
                'xtype': 'linkMaintenancesView',
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'maintenanceId',
                'storeName': 'AllMaintenances',
                'linkStoreName': 'Maintenances',
                'baseObject': _0x58f5cb['getId']()
            }
        })['show']();
    },
    'onSelectionChange': function (_0x2c709c, _0x49426a) {
        var _0x1417e9 = 0x0 === _0x49426a['length'];
        this['lookupReference']('userDevicesButton')['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fa'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fb'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fc'))['setDisabled'](_0x1417e9);
        this['lookupReference']('userCalendarsButton')['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6ed'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fd'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6f0'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6f1'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6ec'))['setDisabled'](_0x1417e9 || 0x0 === _0x49426a[0x0]['get']('userLimit'));
        this['callParent'](arguments);
    }
});
Ext['define'](_0xc11a('0x6fe'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'usersView',
    'controller': _0xc11a('0x700'),
    'store': 'Users',
    'tbar': {
        'xtype': 'editToolbar',
        'scrollable': !0x0,
        'items': [{
            'disabled': !0x0,
            'handler': 'onGeofencesClick',
            'reference': 'userGeofencesButton',
            'glyph': 'xf21d@FontAwesome',
            'tooltip': Strings['sharedGeofences'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x702'),
            'reference': _0xc11a('0x703'),
            'glyph': _0xc11a('0x704'),
            'tooltip': Strings['deviceTitle'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': 'onGroupsClick',
            'reference': 'userGroupsButton',
            'glyph': 'xf247@FontAwesome',
            'tooltip': Strings['settingsGroups'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': 'onUsersClick',
            'reference': _0xc11a('0x6ec'),
            'glyph': 'xf0c0@FontAwesome',
            'tooltip': Strings['settingsUsers'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': 'onNotificationsClick',
            'reference': _0xc11a('0x6fc'),
            'glyph': 'xf003@FontAwesome',
            'tooltip': Strings['sharedNotifications'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': 'onCalendarsClick',
            'reference': _0xc11a('0x6ee'),
            'glyph': 'xf073@FontAwesome',
            'tooltip': Strings['sharedCalendars'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x70a'),
            'reference': 'userAttributesButton',
            'glyph': 'xf0ae@FontAwesome',
            'tooltip': Strings['sharedComputedAttributes'],
            'tooltipType': 'title'
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x70b'),
            'reference': _0xc11a('0x6fd'),
            'glyph': 'xf1b9@FontAwesome',
            'tooltip': Strings['sharedDrivers'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onCommandsClick',
            'reference': _0xc11a('0x6f0'),
            'glyph': 'xf093@FontAwesome',
            'tooltip': Strings['sharedSavedCommands'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onMaintenancesClick',
            'reference': _0xc11a('0x6f1'),
            'glyph': 'xf0ad@FontAwesome',
            'tooltip': Strings['sharedMaintenances'],
            'tooltipType': 'title'
        }]
    },
    'bbar': [{
        'xtype': 'tbtext',
        'html': 'Buscar'
    }, {
        'xtype': 'textfield',
        'flex': !0x0,
        'listeners': {
            'change': function () {
                this['up']('grid')['store']['clearFilter']();
                var _0x1dbb00 = RegExp(this['getValue'](), 'i');
                this['up']('grid')['store']['filter'](new Ext[('util')][(_0xc11a('0x70d'))]({
                    'filterFn': function (_0x1538f4) {
                        var _0x1156f7 = !0x1;
                        Ext['Object']['each'](_0x1538f4['data'], function (_0x1538f4, _0x56c980) {
                            _0x1156f7 = _0x1156f7 || _0x1dbb00['test'](String(_0x56c980));
                        });
                        return _0x1156f7;
                    }
                }));
            }
        }
    }],
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings['userEmail'],
            'dataIndex': 'email',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x6cb')],
            'dataIndex': 'administrator',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('administrator'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6cc')],
            'dataIndex': 'readonly',
            'hidden': !0x0,
            'renderer': Traccar['AttributeFormatter']['getFormatter']('readonly'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6cd')],
            'dataIndex': 'deviceReadonly',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceReadonly'),
            'hidden': !0x0,
            'filter': 'boolean'
        }, {
            'text': Strings['sharedDisabled'],
            'dataIndex': 'disabled',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('disabled'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6cf')],
            'dataIndex': 'expirationTime',
            'hidden': !0x0,
            'renderer': Traccar['AttributeFormatter']['getFormatter']('expirationTime'),
            'filter': 'date'
        }]
    }
});
Ext['define'](_0xc11a('0x70e'), {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'title': Strings[_0xc11a('0x6e2')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'fieldLabel': Strings['sharedName'],
                'allowBlank': !0x1
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings['sharedExtra'],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'clearableComboBox',
                'name': 'groupId',
                'fieldLabel': Strings['groupParent'],
                'store': 'Groups',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'id'
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x70f'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.groups',
    'objectModel': 'Traccar.model.Group',
    'objectDialog': _0xc11a('0x70e'),
    'removeTitle': Strings[_0xc11a('0x6e2')],
    'init': function () {
        this['lookupReference'](_0xc11a('0x710'))['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers'));
        this['lookupReference']('toolbarAttributesButton')['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference'](_0xc11a('0x711'))['setHidden'](Traccar['app']['getPreference']('limitCommands', !0x1));
        this['lookupReference'](_0xc11a('0x712'))['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
    },
    'onGeofencesClick': function () {
        var _0x513eb3 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedGeofences'],
            'items': {
                'xtype': 'linkGeofencesView',
                'baseObjectName': 'groupId',
                'linkObjectName': 'geofenceId',
                'storeName': 'Geofences',
                'baseObject': _0x513eb3['getId']()
            }
        })['show']();
    },
    'onAttributesClick': function () {
        var _0x171c4a = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': 'linkComputedAttributesView',
                'baseObjectName': 'groupId',
                'linkObjectName': _0xc11a('0x713'),
                'storeName': 'ComputedAttributes',
                'baseObject': _0x171c4a['getId']()
            }
        })['show']();
    },
    'onDriversClick': function () {
        var _0x28ef23 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedDrivers'],
            'items': {
                'xtype': 'linkDriversView',
                'baseObjectName': 'groupId',
                'linkObjectName': 'driverId',
                'storeName': 'Drivers',
                'baseObject': _0x28ef23['getId']()
            }
        })['show']();
    },
    'onCommandsClick': function () {
        var _0x36fe28 = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedSavedCommands'],
            'items': {
                'xtype': 'linkSavedCommandsView',
                'baseObjectName': 'groupId',
                'linkObjectName': 'commandId',
                'storeName': 'Commands',
                'baseObject': _0x36fe28['getId']()
            }
        })['show']();
    },
    'onNotificationsClick': function () {
        var _0x26fc5d = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedNotifications'],
            'items': {
                'xtype': 'linkNotificationsView',
                'baseObjectName': 'groupId',
                'linkObjectName': 'notificationId',
                'storeName': _0xc11a('0x6f5'),
                'baseObject': _0x26fc5d['getId']()
            }
        })['show']();
    },
    'onMaintenancesClick': function () {
        var _0x5ad79c = this['getView']()['getSelectionModel']()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedMaintenances'],
            'items': {
                'xtype': 'linkMaintenancesView',
                'baseObjectName': 'groupId',
                'linkObjectName': 'maintenanceId',
                'storeName': 'Maintenances',
                'baseObject': _0x5ad79c['getId']()
            }
        })['show']();
    },
    'onSelectionChange': function (_0x4cee09, _0x5691f1) {
        var _0x13d49a = 0x0 === _0x5691f1['length'];
        this['lookupReference'](_0xc11a('0x714'))['setDisabled'](_0x13d49a);
        this['lookupReference']('toolbarAttributesButton')['setDisabled'](_0x13d49a);
        this['lookupReference'](_0xc11a('0x710'))['setDisabled'](_0x13d49a);
        this['lookupReference'](_0xc11a('0x711'))['setDisabled'](_0x13d49a);
        this['lookupReference']('toolbarNotificationsButton')['setDisabled'](_0x13d49a);
        this['lookupReference'](_0xc11a('0x712'))['setDisabled'](_0x13d49a);
        this['callParent'](arguments);
    }
});
Ext['define']('Traccar.view.edit.Groups', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'groupsView',
    'controller': _0xc11a('0x715'),
    'store': 'Groups',
    'tbar': {
        'xtype': 'editToolbar',
        'items': [{
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onGeofencesClick',
            'reference': _0xc11a('0x714'),
            'glyph': 'xf21d@FontAwesome',
            'tooltip': Strings['sharedGeofences'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': _0xc11a('0x70a'),
            'reference': _0xc11a('0x716'),
            'glyph': 'xf0ae@FontAwesome',
            'tooltip': Strings['sharedComputedAttributes'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': _0xc11a('0x70b'),
            'reference': 'toolbarDriversButton',
            'glyph': 'xf1b9@FontAwesome',
            'tooltip': Strings['sharedDrivers'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onCommandsClick',
            'reference': _0xc11a('0x711'),
            'glyph': 'xf093@FontAwesome',
            'tooltip': Strings['sharedSavedCommands'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onNotificationsClick',
            'reference': _0xc11a('0x717'),
            'glyph': 'xf003@FontAwesome',
            'tooltip': Strings['sharedNotifications'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': 'onMaintenancesClick',
            'reference': _0xc11a('0x712'),
            'glyph': 'xf0ad@FontAwesome',
            'tooltip': Strings['sharedMaintenances'],
            'tooltipType': 'title'
        }]
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x6e2')],
            'dataIndex': 'groupId',
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllGroups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }]
    }
});
Ext['define'](_0xc11a('0x718'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x719'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'mapstate': _0xc11a('0x6af')
                }
            }
        }
    },
    'onSaveClick': function (_0x4da2ab) {
        var _0x14df84, _0x5fe82f;
        0x0 < this['getView']()[_0xc11a('0x71a')]()[_0xc11a('0x71b')]() && (_0x14df84 = this['getView']()[_0xc11a('0x71a')]()[_0xc11a('0x71c')]()['getGeometry'](),
            _0x5fe82f = this['getView']()['getMapView']()['getProjection'](),
            this['fireEvent'](_0xc11a('0x71d'), Traccar[_0xc11a('0x71e')]['geometryToWkt'](_0x5fe82f, _0x14df84)),
            _0x4da2ab['up']('window')['close']());
    },
    'onCancelClick': function (_0xd8c9f6) {
        _0xd8c9f6['up']('window')['close']();
    },
    'onTypeSelect': function (_0x170a6c) {
        this['getView']()['removeInteraction']();
        this['getView']()[_0xc11a('0x71f')](_0x170a6c['getValue']());
    },
    'setMapState': function (_0x1ee2f9, _0x4662aa, _0x3ba32c) {
        this['getView']()['getMapView']()['setCenter'](ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x4662aa, _0x1ee2f9]));
        this['getView']()['getMapView']()[_0xc11a('0x683')](_0x3ba32c);
    }
});
Ext['define']('Traccar.view.map.GeofenceMap', {
    'extend': Traccar['view']['map']['BaseMap'],
    'xtype': 'geofenceMapView',
    'controller': _0xc11a('0x721'),
    'bodyBorder': !0x0,
    'tbar': {
        'items': [{
            'xtype': 'combobox',
            'store': _0xc11a('0x722'),
            'valueField': 'key',
            'displayField': 'name',
            'editable': !0x1,
            'listeners': {
                'select': _0xc11a('0x723')
            }
        }, {
            'xtype': 'tbfill'
        }, {
            'glyph': 'xf00c@FontAwesome',
            'tooltip': Strings['sharedSave'],
            'tooltipType': 'title',
            'minWidth': 0x0,
            'handler': 'onSaveClick'
        }, {
            'glyph': 'xf00d@FontAwesome',
            'tooltip': Strings['sharedCancel'],
            'tooltipType': 'title',
            'minWidth': 0x0,
            'handler': _0xc11a('0x724')
        }]
    },
    'getFeatures': function () {
        return this['features'];
    },
    'initMap': function () {
        var _0x2a9ba7, _0xa6e81a;
        this['callParent']();
        _0x2a9ba7 = this['map'];
        this[_0xc11a('0x725')] = new ol[(_0xc11a('0x726'))]();
        this['area'] ? (_0xa6e81a = Traccar[_0xc11a('0x71e')][_0xc11a('0x6ab')](this['mapView'], this['area']),
            this[_0xc11a('0x725')]['push'](new ol[(_0xc11a('0x65e'))](_0xa6e81a)),
            this['mapView'][fit](_0xa6e81a)) : this[_0xc11a('0x727')]['fireEvent'](_0xc11a('0x6b0'));
        _0xa6e81a = ol['color'][_0xc11a('0x640')](Traccar['Style'][_0xc11a('0x641')]);
        _0xa6e81a[0x3] = Traccar['Style']['mapGeofenceOverlayOpacity'];
        new ol[('layer')][('Vector')]({
            'source': new ol['source'][('Vector')]({
                'features': this['features']
            }),
            'style': new ol[('style')][('Style')]({
                'fill': new ol[('style')][(_0xc11a('0x642'))]({
                    'color': _0xa6e81a
                }),
                'stroke': new ol['style'][(_0xc11a('0x643'))]({
                    'color': Traccar['Style'][_0xc11a('0x641')],
                    'width': Traccar['Style']['mapGeofenceWidth']
                }),
                'image': new ol['style'][(_0xc11a('0x115'))]({
                    'radius': Traccar['Style']['mapGeofenceRadius'],
                    'fill': new ol[('style')][(_0xc11a('0x642'))]({
                        'color': Traccar['Style']['mapGeofenceColor']
                    })
                })
            })
        })[_0xc11a('0x729')](_0x2a9ba7);
        _0x2a9ba7[_0xc11a('0x71f')](new ol['interaction']['Modify']({
            'features': this[_0xc11a('0x725')],
            'deleteCondition': function (_0x2a9ba7) {
                return ol['events'][_0xc11a('0x72a')][_0xc11a('0x72b')](_0x2a9ba7) && ol['events'][_0xc11a('0x72a')]['singleClick'](_0x2a9ba7);
            }
        }));
    },
    'addInteraction': function (_0x165ce6) {
        this[_0xc11a('0x72c')] = new ol[(_0xc11a('0x72d'))]['Draw']({
            'features': this[_0xc11a('0x725')],
            'type': _0x165ce6
        });
        this[_0xc11a('0x72c')]['on'](_0xc11a('0x72e'), function () {
            this[_0xc11a('0x725')][_0xc11a('0x37d')]();
        }, this);
        this['map']['addInteraction'](this[_0xc11a('0x72c')]);
    },
    'removeInteraction': function () {
        this['draw'] && (this['map'][_0xc11a('0x72f')](this[_0xc11a('0x72c')]),
            this[_0xc11a('0x72c')] = null);
    }
});
Ext['define'](_0xc11a('0x730'), {
    'extend': Traccar['view']['dialog']['BaseEditController'],
    'alias': _0xc11a('0x731'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'savearea': _0xc11a('0x732')
                }
            }
        }
    },
    'init': function () {
        this['lookupReference'](_0xc11a('0x733'))['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableCalendars'));
    },
    'saveArea': function (_0x77d5b3) {
        this['lookupReference'](_0xc11a('0x734'))['setValue'](_0x77d5b3);
    },
    'onAreaClick': function (_0xaaae40) {
        _0xaaae40 = _0xaaae40['up']('window')['down']('form')['getRecord']();
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x735')],
            'items': {
                'xtype': _0xc11a('0x736'),
                'area': _0xaaae40['get']('area')
            }
        })['show']();
    }
});
Ext['define'](_0xc11a('0x737'), {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': 'geofence',
    'title': Strings['sharedGeofence'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'fieldLabel': Strings['sharedName']
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings['sharedExtra'],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'textfield',
                'name': 'description',
                'fieldLabel': Strings['sharedDescription']
            }, {
                'xtype': 'clearableComboBox',
                'reference': _0xc11a('0x733'),
                'name': 'calendarId',
                'store': 'Calendars',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'id',
                'fieldLabel': Strings['sharedCalendar']
            }, {
                'xtype': 'hiddenfield',
                'name': 'area',
                'allowBlank': !0x1,
                'reference': _0xc11a('0x734')
            }]
        }]
    },
    'buttons': [{
        'text': Strings[_0xc11a('0x735')],
        'glyph': 'xf21d@FontAwesome',
        'handler': _0xc11a('0x738')
    }, {
        'text': Strings['sharedAttributes'],
        'handler': 'showAttributesView'
    }, {
        'xtype': 'tbfill'
    }, {
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define'](_0xc11a('0x739'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.geofences',
    'objectModel': 'Traccar.model.Geofence',
    'objectDialog': 'Traccar.view.dialog.Geofence',
    'removeTitle': Strings['sharedGeofence']
});
Ext['define'](_0xc11a('0x73a'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'geofencesView',
    'controller': _0xc11a('0x73c'),
    'store': 'Geofences',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings['sharedDescription'],
            'dataIndex': 'description',
            'filter': 'string'
        }, {
            'text': Strings['sharedCalendar'],
            'dataIndex': 'calendarId',
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define']('Traccar.view.dialog.Driver', {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'title': Strings['sharedDriver'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'fieldLabel': Strings['sharedName'],
                'allowBlank': !0x1
            }, {
                'xtype': 'textfield',
                'name': 'uniqueId',
                'fieldLabel': Strings['deviceIdentifier'],
                'allowBlank': !0x1
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x73d'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.drivers',
    'objectModel': 'Traccar.model.Driver',
    'objectDialog': _0xc11a('0x73e'),
    'removeTitle': Strings[_0xc11a('0x5a5')]
});
Ext['define'](_0xc11a('0x73f'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'driversView',
    'controller': _0xc11a('0x741'),
    'store': 'Drivers',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings['sharedDescription'],
            'dataIndex': 'uniqueId',
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x742'), {
    'extend': Traccar['view']['dialog']['BaseEditController'],
    'alias': _0xc11a('0x743'),
    'init': function () {
        this['lookupReference'](_0xc11a('0x733'))['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableCalendars'));
    }
});
Ext['define'](_0xc11a('0x744'), {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': _0xc11a('0x745'),
    'title': Strings[_0xc11a('0x746')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'combobox',
                'name': 'type',
                'fieldLabel': Strings['sharedType'],
                'store': 'AllNotificationTypes',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'type',
                'editable': !0x1,
                'allowBlank': !0x1
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'always',
                'fieldLabel': Strings['notificationAlways']
            }, {
                'fieldLabel': Strings['notificationNotificators'],
                'xtype': _0xc11a('0x537'),
                'name': 'notificators',
                'maxWidth': Traccar['Style'][_0xc11a('0x539')],
                'store': 'AllNotificators',
                'valueField': 'type',
                'displayField': 'name',
                'queryMode': 'local'
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings['sharedExtra'],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'clearableComboBox',
                'reference': 'calendarCombo',
                'name': 'calendarId',
                'store': 'Calendars',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'id',
                'fieldLabel': Strings['sharedCalendar']
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x747'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.notifications',
    'objectModel': 'Traccar.model.Notification',
    'objectDialog': _0xc11a('0x744'),
    'removeTitle': Strings[_0xc11a('0x746')]
});
Ext['define'](_0xc11a('0x748'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'notificationsView',
    'controller': _0xc11a('0x74a'),
    'store': _0xc11a('0x6f5'),
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['notificationType'],
            'dataIndex': 'type',
            'flex': 0x2,
            'renderer': function (_0x33d235) {
                return Traccar['app']['getEventString'](_0x33d235);
            },
            'filter': {
                'type': 'list',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificationTypes'
            }
        }, {
            'text': Strings['notificationAlways'],
            'dataIndex': 'always',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('always'),
            'filter': 'boolean'
        }, {
            'text': Strings['notificationNotificators'],
            'dataIndex': 'notificators',
            'flex': 0x2,
            'filter': {
                'type': 'arraylist',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificators'
            },
            'renderer': function (_0x4faaf2) {
                var _0x3e21b = '', _0x16fd11;
                if (_0x4faaf2)
                    for (_0x16fd11 = _0x4faaf2['split'](/[ ,]+/)['filter'](Boolean),
                        _0x4faaf2 = 0x0; _0x4faaf2 < _0x16fd11['length']; _0x4faaf2++)
                        _0x3e21b += Traccar['app']['getNotificatorString'](_0x16fd11[_0x4faaf2]) + (_0x4faaf2 < _0x16fd11['length'] - 0x1 ? ',\x20' : '');
                return _0x3e21b;
            }
        }, {
            'text': Strings['sharedCalendar'],
            'dataIndex': 'calendarId',
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define'](_0xc11a('0x74c'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x74d'),
    'onShowClick': function () {
        Ext['getStore'](_0xc11a('0x74e'))['load']({
            'params': {
                'from': this['lookupReference'](_0xc11a('0x51f'))['getValue']()[_0xc11a('0x569')](),
                'to': this['lookupReference']('toDateField')['getValue']()[_0xc11a('0x569')]()
            }
        });
    }
});
Ext['define'](_0xc11a('0x74f'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': _0xc11a('0x750'),
    'controller': _0xc11a('0x751'),
    'store': 'Statistics',
    'tbar': {
        'scrollable': !0x0,
        'items': [{
            'xtype': 'tbtext',
            'html': Strings[_0xc11a('0x752')]
        }, {
            'xtype': _0xc11a('0x548'),
            'reference': _0xc11a('0x51f'),
            'startDay': Traccar['Style']['weekStartDay'],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date(new Date()[_0xc11a('0x545')]() - 0x5265c00)
        }, '-', {
            'xtype': 'tbtext',
            'html': Strings[_0xc11a('0x547')]
        }, {
            'xtype': _0xc11a('0x548'),
            'reference': _0xc11a('0x522'),
            'startDay': Traccar['Style'][_0xc11a('0x543')],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date()
        }, '-', {
            'text': Strings[_0xc11a('0x5ae')],
            'handler': 'onShowClick'
        }]
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings[_0xc11a('0x753')],
            'dataIndex': _0xc11a('0x754'),
            'xtype': _0xc11a('0x59a'),
            'renderer': Traccar['AttributeFormatter']['defaultFormatter']()
        }, {
            'text': Strings[_0xc11a('0x755')],
            'dataIndex': 'activeUsers'
        }, {
            'text': Strings[_0xc11a('0x756')],
            'dataIndex': 'activeDevices'
        }, {
            'text': Strings[_0xc11a('0x757')],
            'dataIndex': 'requests'
        }, {
            'text': Strings[_0xc11a('0x758')],
            'dataIndex': 'messagesReceived'
        }, {
            'text': Strings['statisticsMessagesStored'],
            'dataIndex': _0xc11a('0x759')
        }, {
            'text': Strings['notificationMail'],
            'dataIndex': 'mailSent'
        }, {
            'text': Strings['notificationSms'],
            'dataIndex': 'smsSent'
        }, {
            'text': Strings[_0xc11a('0x75a')],
            'dataIndex': _0xc11a('0x75b')
        }, {
            'text': Strings[_0xc11a('0x75c')],
            'dataIndex': 'geolocationRequests'
        }]
    }
});
Ext['define']('Traccar.view.dialog.DeviceDistanceController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x75d'),
    'onSetClick': function () {
        var _0x3bae2c = {
            'deviceId': this['getView']()['deviceId'],
            'totalDistance': this['lookupReference']('totalDistance')['getValue']()
        };
        Ext['Ajax']['request']({
            'scope': this,
            'method': 'PUT',
            'url': _0xc11a('0x75e') + _0x3bae2c['deviceId'] + _0xc11a('0x75f'),
            'jsonData': Ext['util']['JSON']['encode'](_0x3bae2c),
            'callback': function (_0x3bae2c, _0x5db22e, _0x18165f) {
                _0x5db22e || Traccar['app']['showError'](_0x18165f);
            }
        });
        this['closeView']();
    }
});
Ext['define']('Traccar.view.dialog.DeviceDistance', {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': _0xc11a('0x760'),
    'title': Strings['sharedDeviceDistance'],
    'items': [{
        'xtype': 'customNumberField',
        'dataType': 'distance',
        'reference': 'totalDistance',
        'fieldLabel': Strings['deviceTotalDistance']
    }],
    'buttons': [{
        'reference': _0xc11a('0x761'),
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings[_0xc11a('0x762')],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': _0xc11a('0x763')
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});

Ext.define('Traccar.view.dialog.CalendarController', { extend: Traccar.view.dialog.BaseEditController, alias: 'controller.calendar', onFileChange: function (fileField) { var reader; 0 < fileField.fileInputEl.dom.files.length && (reader = new FileReader, reader.onload = function (event) { fileField.up('window').lookupReference('dataField').setValue(event.target.result.substr(event.target.result.indexOf(',') + 1)) }, reader.onerror = function (event) { Traccar.app.showError(event.target.error) }, reader.readAsDataURL(fileField.fileInputEl.dom.files[0])) } });
Ext.define('Traccar.view.dialog.Calendar', {
    extend: Traccar.view.dialog.BaseEdit, controller: 'calendar', title: Strings.sharedCalendar, items: {
        xtype: 'form', items: [{ xtype: 'fieldset', title: Strings.sharedRequired, items: [{ xtype: 'textfield', name: 'name', fieldLabel: Strings.sharedName, allowBlank: !1 }, { xtype: 'filefield', name: 'file', fieldLabel: Strings.sharedFile, allowBlank: !1, buttonConfig: { glyph: 'xf093@FontAwesome', text: '', tooltip: Strings.sharedSelectFile, tooltipType: 'title', minWidth: 0 }, listeners: { change: 'onFileChange' } }] },
        { xtype: 'hiddenfield', name: 'data', allowBlank: !1, reference: 'dataField' }]
    }
});


Ext['define']('Traccar.view.edit.CalendarsController', {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.calendars',
    'objectModel': 'Traccar.model.Calendar',
    'objectDialog': 'Traccar.view.dialog.Calendar',
    'removeTitle': Strings['sharedCalendar']
});
Ext['define']('Traccar.view.edit.Calendars', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'calendarsView',
    'controller': 'calendars',
    'store': 'Calendars',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }]
    }
});
Ext['define']('Traccar.view.dialog.SavedCommand', {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': 'savedCommand',
    'title': Strings['sharedSavedCommand'],
    'items': [{
        'xtype': 'form',
        'listeners': {
            'validitychange': 'onValidityChange'
        },
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'textfield',
                'name': 'description',
                'fieldLabel': Strings['sharedDescription']
            }, {
                'xtype': 'checkboxfield',
                'name': 'textChannel',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'fieldLabel': Strings['notificationSms']
            }, {
                'xtype': 'combobox',
                'name': 'type',
                'reference': 'commandType',
                'fieldLabel': Strings['sharedType'],
                'store': 'AllCommandTypes',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'type',
                'editable': !0x1,
                'allowBlank': !0x1,
                'listeners': {
                    'change': 'onTypeChange'
                }
            }, {
                'xtype': 'fieldcontainer',
                'reference': 'parameters'
            }]
        }]
    }],
    'buttons': [{
        'glyph': 'xf00c@FontAwesome',
        'reference': 'saveButton',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'disabled': !0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define']('Traccar.view.edit.SavedCommandsController', {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.savedCommands',
    'objectModel': 'Traccar.model.Command',
    'objectDialog': 'Traccar.view.dialog.SavedCommand',
    'removeTitle': Strings['sharedSavedCommand']
});
Ext['define']('Traccar.view.edit.SavedCommands', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'savedCommandsView',
    'controller': 'savedCommands',
    'store': 'Commands',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedDescription'],
            'dataIndex': 'description',
            'filter': 'string'
        }, {
            'text': Strings['sharedType'],
            'dataIndex': 'type',
            'filter': {
                'type': 'list',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllCommandTypes'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('commandType')
        }, {
            'text': Strings['notificationSms'],
            'dataIndex': 'textChannel',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('textChannel'),
            'filter': 'boolean'
        }]
    }
});
Ext['define']('Traccar.view.dialog.MaintenanceController', {
    'extend': Traccar['view']['dialog']['BaseEditController'],
    'alias': 'controller.maintenance',
    'init': function () {
        this['startConfig'] = Ext['clone'](this['lookupReference']('startField')['initialConfig']);
        this['startConfig']['value'] = 0x0;
        this['periodConfig'] = Ext['clone'](this['lookupReference']('periodField')['initialConfig']);
        this['periodConfig']['value'] = 0x0;
        this['lookupReference']('saveButton')['setDisabled'](!0x0);
    },
    'onValidityChange': function (_0x3efec3, _0x4ec5c4) {
        this['lookupReference']('saveButton')['setDisabled'](!_0x4ec5c4);
    },
    'updateFieldConfig': function (_0x58e740, _0x2d73d8, _0x376567) {
        var _0xdf2f01 = this['lookupReference'](_0x58e740);
        _0xdf2f01['hoursConverter'] !== _0x376567['dataType'] ? (this['getView']()['down']('fieldset')['insert'](this['getView']()['down']('fieldset')['items'][indexOf](_0xdf2f01), Ext['merge']({}, _0x2d73d8, _0x376567)),
            this['getView']()['down']('fieldset')['remove'](_0xdf2f01),
            this['lookupReference'](_0x58e740)['validate']()) : (_0xdf2f01['setConfig'](_0x376567),
                _0xdf2f01['validate']());
    },
    'onNameChange': function (_0x558d16, _0x200e98) {
        var _0x31cd7e = {};
        if (_0x558d16 = _0x558d16['getStore']()['getById'](_0x200e98))
            void 0x0 !== _0x558d16['get']('allowDecimals') ? _0x31cd7e['allowDecimals'] = _0x558d16['get']('allowDecimals') : _0x31cd7e['allowDecimals'] = !0x0,
                _0x31cd7e['hoursConverter'] = _0x558d16['get']('dataType'),
                _0x31cd7e['maxValue'] = _0x558d16['get']('maxValue'),
                _0x31cd7e['minValue'] = _0x558d16['get']('minValue');
        this['updateFieldConfig']('startField', this['startConfig'], _0x31cd7e);
        this['updateFieldConfig']('periodField', this['periodConfig'], _0x31cd7e);
    }
});
Ext['define']('Traccar.view.dialog.Maintenance', {
    'extend': Traccar['view']['dialog']['BaseEdit'],
    'controller': 'maintenance',
    'title': Strings['sharedMaintenance'],
    'items': {
        'xtype': 'form',
        'listeners': {
            'validitychange': 'onValidityChange'
        },
        'items': [{
            'xtype': 'fieldset',
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'fieldLabel': Strings['sharedName'],
                'allowBlank': !0x1
            }, {
                'xtype': 'combobox',
                'name': 'type',
                'reference': 'typeComboField',
                'fieldLabel': Strings['sharedType'],
                'displayField': 'name',
                'valueField': 'key',
                'allowBlank': !0x1,
                'queryMode': 'local',
                'store': 'MaintenanceTypes',
                'listeners': {
                    'change': 'onNameChange'
                }
            }, {
                'xtype': 'customNumberField',
                'name': 'start',
                'reference': 'startField',
                'fieldLabel': Strings['maintenanceStart']
            }, {
                'xtype': 'customNumberField',
                'name': 'period',
                'reference': 'periodField',
                'allowBlank': !0x1,
                'fieldLabel': Strings['maintenancePeriod'],
                'validator': function (_0x3be20c) {
                    return 0x0 !== this['parseValue'](_0x3be20c) ? !0x0 : Strings['errorZero'];
                }
            }]
        }]
    }
});
Ext['define']('Traccar.view.edit.MaintenancesController', {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.maintenances',
    'objectModel': 'Traccar.model.Maintenance',
    'objectDialog': 'Traccar.view.dialog.Maintenance',
    'removeTitle': Strings['sharedMaintenance']
});
Ext['define']('Traccar.view.edit.Maintenances', {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'maintenancesView',
    'controller': 'maintenances',
    'store': 'Maintenances',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings['sharedType'],
            'dataIndex': 'type',
            'filter': {
                'type': 'list',
                'idField': 'key',
                'labelField': 'name',
                'store': 'MaintenanceTypes'
            },
            'renderer': function (_0x217797) {
                var _0xdff3b0 = Ext['getStore']('MaintenanceTypes')['getById'](_0x217797);
                return _0xdff3b0 && _0xdff3b0['get']('name') || _0x217797;
            }
        }, {
            'text': Strings['maintenanceStart'],
            'dataIndex': 'start',
            'renderer': function (_0x4d22d2, _0x3c0907, _0x57a484) {
                return Traccar['AttributeFormatter']['renderAttribute'](_0x4d22d2, Ext['getStore']('MaintenanceTypes')['getById'](_0x57a484['get']('type')));
            }
        }, {
            'text': Strings['maintenancePeriod'],
            'dataIndex': 'period',
            'renderer': function (_0x2b7ad5, _0x411e53, _0xcbaf9e) {
                return Traccar['AttributeFormatter']['renderAttribute'](_0x2b7ad5, Ext['getStore']('MaintenanceTypes')['getById'](_0xcbaf9e['get']('type')));
            }
        }]
    }
});
Ext['define']('Traccar.view.SettingsMenuController', {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.settings',
    'init': function () {
        var _0x19c161, _0x235c13, _0x5c9b47, _0x2f4e85;
        _0x19c161 = Traccar['app']['getUser']()['get']('administrator');
        _0x235c13 = 0x0 !== Traccar['app']['getUser']()['get']('userLimit');
        _0x5c9b47 = Traccar['app']['getPreference']('readonly', !0x1);
        _0x2f4e85 = Traccar['app']['getUser']()['get']('deviceReadonly');
        _0x19c161 && (this['lookupReference']('settingsServerButton')['setHidden'](!0x1),
            this['lookupReference']('settingsStatisticsButton')['setHidden'](!0x1));
        (_0x19c161 || _0x235c13) && this['lookupReference']('settingsUsersButton')['setHidden'](!0x1);
        if (_0x19c161 || !_0x5c9b47)
            this['lookupReference']('settingsUserButton')['setHidden'](!0x1),
                this['lookupReference']('settingsGroupsButton')['setHidden'](!0x1),
                this['lookupReference']('settingsGeofencesButton')['setHidden'](!0x1),
                this['lookupReference']('settingsNotificationsButton')['setHidden'](!0x1),
                this['lookupReference']('settingsCalendarsButton')['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableCalendars')),
                this['lookupReference']('settingsDriversButton')['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers')),
                this['lookupReference']('settingsCommandsButton')['setHidden'](Traccar['app']['getPreference']('limitCommands', !0x1)),
                this['lookupReference']('settingsMaintenancesButton')['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
        (_0x19c161 || !_0x2f4e85 && !_0x5c9b47) && this['lookupReference']('settingsComputedAttributesButton')['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
    },
    'onUserClick': function () {
        var _0x52e8c0 = Ext['create']('Traccar.view.dialog.User', {
            'selfEdit': !0x0
        });
        _0x52e8c0['down']('form')['loadRecord'](Traccar['app']['getUser']());
        _0x52e8c0['lookupReference']('testNotificationButton')['setHidden'](!0x1);
        _0x52e8c0['show']();
    },
    'onGroupsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['settingsGroups'],
            'items': {
                'xtype': 'groupsView'
            }
        })['show']();
    },
    'onGeofencesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedGeofences'],
            'items': {
                'xtype': 'geofencesView'
            }
        })['show']();
    },
    'onServerClick': function () {
        var _0x3f484e = Ext['create']('Traccar.view.dialog.Server');
        _0x3f484e['down']('form')['loadRecord'](Traccar['app']['getServer']());
        _0x3f484e['show']();
    },
    'onUsersClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['settingsUsers'],
            'items': {
                'xtype': 'usersView'
            }
        })['show']();
    },
    'onNotificationsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedNotifications'],
            'items': {
                'xtype': 'notificationsView'
            }
        })['show']();
    },
    'onComputedAttributesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': 'computedAttributesView'
            }
        })['show']();
    },
    'onStatisticsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['statisticsTitle'],
            'items': {
                'xtype': 'statisticsView'
            }
        })['show']();
    },
    'onCalendarsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedCalendars'],
            'items': {
                'xtype': 'calendarsView'
            }
        })['show']();
    },
    'onDriversClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedDrivers'],
            'items': {
                'xtype': 'driversView'
            }
        })['show']();
    },
    'onCommandsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedSavedCommands'],
            'items': {
                'xtype': 'savedCommandsView'
            }
        })['show']();
    },
    'onMaintenancesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedMaintenances'],
            'items': {
                'xtype': 'maintenancesView'
            }
        })['show']();
    },
    'onLogoutClick': function () {
        Ext['create']('Traccar.view.dialog.LoginController')['logout']();
    }
});

Ext['define']('Traccar.view.SettingsMenu', { 'extend': Ext['button']['Button'], 'xtype': 'settingsMenu', 'glyph': 'xf013@FontAwesome', 'tooltip': Strings['settingsTitle'], 'tooltipType': 'title', 'menu': { 'controller': 'settings', 'items': [{     'hidden': !0x0,     'text': Strings['settingsUser'],     'glyph': 'xf007@FontAwesome',     'handler': 'onUserClick',     'reference': 'settingsUserButton' }, {     'hidden': !0x0,     'text': Strings['settingsGroups'],     'glyph': 'xf247@FontAwesome',     'handler': 'onGroupsClick',     'reference': 'settingsGroupsButton' }, {     'hidden': !0x0,     'text': Strings['sharedDrivers'],     'glyph': 'xf1b9@FontAwesome',     'handler': _0xc11a('0x70b'),     'reference': 'settingsDriversButton' }, {     'hidden': !0x0,     'text': Strings['sharedGeofences'],     'glyph': 'xf21d@FontAwesome',     'handler': 'onGeofencesClick',     'reference': 'settingsGeofencesButton' }, {     'hidden': !0x0,     'text': Strings['settingsServer'],     'glyph': 'xf233@FontAwesome',     'handler': 'onServerClick',     'reference': 'settingsServerButton' }, {     'hidden': !0x0,     'text': Strings['settingsUsers'],     'glyph': 'xf0c0@FontAwesome',     'handler': 'onUsersClick',     'reference': 'settingsUsersButton' }, {     'hidden': !0x0,     'text': Strings['sharedNotifications'],     'glyph': 'xf003@FontAwesome',     'handler': 'onNotificationsClick',     'reference': 'settingsNotificationsButton' }, {     'hidden': !0x0,     'text': Strings['sharedComputedAttributes'],     'glyph': 'xf0ae@FontAwesome',     'handler': 'onComputedAttributesClick',     'reference': 'settingsComputedAttributesButton' }, {     'hidden': !0x0,     'text': Strings['statisticsTitle'],     'glyph': 'xf080@FontAwesome',     'handler': 'onStatisticsClick',     'reference': 'settingsStatisticsButton' }, {     'hidden': !0x0,     'text': Strings['sharedCalendars'],     'glyph': 'xf073@FontAwesome',     'handler': 'onCalendarsClick',     'reference': 'settingsCalendarsButton' }, {     'hidden': !0x0,     'text': Strings['sharedSavedCommands'],     'glyph': 'xf093@FontAwesome',     'handler': 'onCommandsClick',     'reference': 'settingsCommandsButton' }, {     'hidden': !0x0,     'text': Strings['sharedMaintenances'],     'glyph': 'xf0ad@FontAwesome',     'handler': 'onMaintenancesClick',     'reference': 'settingsMaintenancesButton' }, {     'text': Strings['loginLogout'],     'glyph': 'xf08b@FontAwesome',     'handler': 'onLogoutClick' }]
    }
});

// esse esta alterado no lugar de Traccar.view.SettingsMenuController ficou o Traccar.view.MegaMenuController - ver teste
Ext.define('Traccar.view.MegaMenuController', {
    extend : Ext.app.ViewController , alias : 'controller.settingsMegaMenu', init: function () {
        var admin, manager, readonly, device; admin = Traccar.app.getUser().get('administrator'); manager = 0 !== Traccar.app.getUser().get('userLimit'); readonly = Traccar.app.getPreference('readonly', !1);/*essa parte não tem no original ver - inicio */ device = Traccar.app.getUser().get('deviceReadonly'); /*fim*/ admin && (this.lookupReference('settingsServerButton').setHidden(!1), this.lookupReference('settingsStatisticsButton').setHidden(!1));
        (admin || manager) && this.lookupReference('settingsUsersButton').setHidden(!1); if (admin || !readonly) this.lookupReference('settingsUserButton').setHidden(!1), this.lookupReference('settingsGroupsButton').setHidden(!1), this.lookupReference('settingsGeofencesButton').setHidden(!1), this.lookupReference('settingsNotificationsButton').setHidden(!1), this.lookupReference('settingsCalendarsButton').setHidden(Traccar.app.getBooleanAttributePreference('ui.disableCalendars')), this.lookupReference('settingsDriversButton').setHidden(Traccar.app.getVehicleFeaturesDisabled() || 
        Traccar.app.getBooleanAttributePreference('ui.disableDrivers')), this.lookupReference('settingsCommandsButton').setHidden(Traccar.app.getPreference('limitCommands', !1)), this.lookupReference('settingsMaintenancesButton').setHidden(Traccar.app.getVehicleFeaturesDisabled() || Traccar.app.getBooleanAttributePreference('ui.disableMaintenances'));
        (admin || !device && !readonly) && this.lookupReference('settingsComputedAttributesButton').setHidden(Traccar.app.getBooleanAttributePreference('ui.disableComputedAttributes'));
        this.lookupReference('contactWhatsMegaMenu').setHidden(!1); this.lookupReference('showReportsButton').setVisible(Traccar.app.isMobile() && !Traccar.app.getBooleanAttributePreference('ui.disableReport')); this.lookupReference('showEventsButton').setVisible(Traccar.app.isMobile() && !Traccar.app.getBooleanAttributePreference('ui.disableEvents'));
    }, onUserClick: function () {
        var dialog = Ext.create('Traccar.view.dialog.User', { selfEdit: !0 }); dialog.down('form').loadRecord(Traccar.app.getUser()); dialog.lookupReference('testNotificationButton').setHidden(!1);
    dialog.show();
    }, onGroupsClick: function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.settingsGroups, items: { xtype : 'groupsView' } }).show(); }, onGeofencesClick: function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedGeofences, items: { xtype: 'geofencesView' } }).show(); }, onServerClick : function () { var dialog = Ext.create('Traccar.view.dialog.Server'); dialog.down('form').loadRecord(Traccar.app.getServer()); dialog.show(); }, onUsersClick: function () {
        Ext.create('Traccar.view.BaseWindow', {
            title: Strings.settingsUsers,
            items: {
                xtype: 'usersView' }
        }).show();
    }, onNotificationsClick: function () { Ext.create('Traccar.view.BaseWindow', { title : Strings.sharedNotifications, items : { xtype : 'notificationsView' } }).show(); }, onComputedAttributesClick: function () { Ext.create('Traccar.view.BaseWindow', { title : Strings.sharedComputedAttributes , items : { xtype : 'computedAttributesView' } }).show(); }, onStatisticsClick : function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.statisticsTitle, items : { xtype : 'statisticsView' } }).show(); }, onCalendarsClick : function () {
        Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedCalendars, items: { xtype: 'calendarsView' } }).show(); },
    onDriversClick: function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedDrivers, items: { xtype: 'driversView' } }).show(); }, onCommandsClick : function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedSavedCommands, items: { xtype: 'savedCommandsView' } }).show(); }, onMaintenancesClick : function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedMaintenances , items: { xtype: 'maintenancesView' } }).show(); }, onLogoutClick: function () { Ext.create('Traccar.view.dialog.LoginController').logout(); }, 
    showReports: function () { Traccar.app.showReports(!0); }, showEvents: function () { Traccar.app.showEvents(!0); }, 
    onPagamento: function () { var pagamento = window.open('', '_blank'); $.ajax({ url: '../../config/config.json', dataType: 'json', success : function (linkPagamento) {pagamento[location] = linkPagamento.url.linkPagamento ; } }); }, contactClickMenu : function () { var contato = window.open('', '_blank'); $.ajax({ url : '../../config/config.json', dataType : 'json',  success : function (contatoButton) { contato.location = contatoButton.url.linkContatWhats ; } }); }
});

// diferente do original Traccar.view.SettingsMenu sai e entra o debaixo- configuração do menu e icones dos usuarios- ver teste
Ext.define('Traccar.view.MegaMenu', {
        extend: Ext.button.Button, xtype: 'megaMenu', glyph: 'xf0c9@FontAwesome', tooltip: 'Menu', tooltipType: 'title', menu: { 
            controller: 'settingsMegaMenu', items: [{ hidden: !0, text: Strings.reportTitle, glyph: 'xf0f6@FontAwesome', handler: 'showReports', reference: 'showReportsButton' }, { hidden: !0, text: Strings.reportEvents , glyph : 'xf27b@FontAwesome', handler: 'showEvents', reference: 'showEventsButton' }, { 
                hidden: !0, text: Strings.settingsUser , glyph: 'xf007@FontAwesome', handler: 'onUserClick', reference: 'settingsUserButton' }, { hidden: !0, text: Strings.settingsGroups, glyph : 'xf247@FontAwesome', handler: 'onGroupsClick', reference : 'settingsGroupsButton' }, { hidden: !0, text: Strings.sharedDrivers, glyph: 'xf1b9@FontAwesome', handler: 'onDriversClick', reference: 'settingsDriversButton' }, { 
                hidden : !0, 'text': Strings.sharedGeofences, glyph: 'xf21d@FontAwesome', handler: 'onGeofencesClick', reference: 'settingsGeofencesButton' }, { hidden: !0, text: Strings.settingsServer, glyph: 'xf233@FontAwesome', handler : 'onServerClick', reference: 'settingsServerButton' }, { hidden: !0, text: Strings.settingsUsers, glyph : 'xf0c0@FontAwesome', handler: 'onUsersClick', reference: 'settingsUsersButton' }, { 
                hidden: !0, text: Strings.sharedNotifications, glyph : 'xf003@FontAwesome', handler : 'onNotificationsClick', reference : 'settingsNotificationsButton' }, { hidden : !0, text : Strings.sharedComputedAttributes , glyph: 'xf0ae@FontAwesome', handler : 'onComputedAttributesClick', reference : 'settingsComputedAttributesButton' }, { 
                hidden: !0, text: Strings.statisticsTitle, glyph: 'xf080@FontAwesome', handler: 'onStatisticsClick', reference : 'settingsStatisticsButton' }, { hidden: !0, text: Strings.sharedCalendars , glyph : 'xf073@FontAwesome', handler : 'onCalendarsClick', reference : 'settingsCalendarsButton' }, { hidden: !0, text: Strings.sharedSavedCommands, glyph : 'xf093@FontAwesome', handler: 'onCommandsClick', reference: 'settingsCommandsButton' }, { 
                hidden: !0, text: Strings.sharedMaintenances, glyph: 'xf0ad@FontAwesome', handler: 'onMaintenancesClick', reference: 'settingsMaintenancesButton' }, { text: 'Pagamento', glyph: 'xf0d6@FontAwesome', handler: 'onPagamento', reference: 'settingsonPagamento' }, { hidden: !0, text: 'Suporte', glyph: 'xf232@FontAwesome', handler: 'contactClickMenu', reference: 'contactWhatsMegaMenu' }, { 
                text: Strings.loginLogout, glyph: 'xf08b@FontAwesome', handler: 'onLogoutClick' }]
    }
});

Ext.define('Traccar.view.map.Map', {
    extend: Traccar.view.map.BaseMap, xtype: 'mapView', controller: 'map', title: Strings.mapTitle, tbar: {
        componentCls: 'toolbar-header-style', defaults: { xtype: 'button', tooltipType: 'title', stateEvents: ['toggle'], enableToggle: !0, stateful: { pressed: !0 } }, items: [{ xtype: 'tbtext', html: Strings.mapTitle, baseCls: 'x-panel-header-title-default' }, { xtype: 'tbfill' }, { handler: 'showReports', reference: 'showReportsButton', glyph: 'xf0f6@FontAwesome', stateful: !1, enableToggle: !1, tooltip: Strings.reportTitle },
        /* { handler: 'showEvents', reference: 'showEventsButton', glyph: 'xf27b@FontAwesome', stateful: !1, enableToggle: !1, tooltip: Strings.reportEvents }, */ { handler: 'updateGeofences', reference: 'showGeofencesButton', glyph: 'xf21d@FontAwesome', pressed: !0, stateId: 'show-geofences-button', tooltip: Strings.sharedGeofences }, { handler: 'showLiveRoutes', reference: 'showLiveRoutes', glyph: 'xf1b0@FontAwesome', stateId: 'show-live-routes-button', tooltip: Strings.mapLiveRoutes }, {
            reference: 'deviceFollowButton', glyph: 'xf05b@FontAwesome', tooltip: Strings.deviceFollow,
            stateId: 'device-follow-button', toggleHandler: 'onFollowClick'}, 
// essa parte de baixo esta sendo inserido - ver teste
{ reference: 'streetViewButton', glyph: 'xf018@FontAwesome', tooltip: 'Street\x20View', stateId : 'streetview-button', toggleHandler : 'openStreetView' }, { reference : 'contactWhats', glyph : 'xf232@FontAwesome', tooltip : 'Suporte', stateId : 'device-street-button', enableToggle : !1, handler : 'contactClick'
        }, { reference : 'pagamentoML', glyph : 'xf0d6@FontAwesome', tooltip : 'Pagamento', stateId : 'device-Pagamento-button',  enableToggle : !1,  handler : 'pgClick'
        }, { xtype: 'megaMenu', reference: 'btnMegaMenu', enableToggle: !1 },

        { xtype: 'settingsMenu', reference: 'settingsMenuBoolRef' , enableToggle: !1 }] //{ xtype: 'settingsMenu', enableToggle: !1 }]
    }, getMarkersSource: function () { return this.markersSource }, getAccuracySource: function () { return this.accuracySource }, getRouteSource: function () { return this.routeSource }, getGeofencesSource: function () { return this.geofencesSource }, getLiveRouteSource: function () { return this.liveRouteSource }, getLiveRouteLayer: function () { return this.liveRouteLayer }, initMap: function () {
        this.callParent(); this.geofencesSource = new ol.source.Vector({});
        this.map.addLayer(new ol.layer.Vector({ name: 'geofencesLayer', source: this.geofencesSource })); this.liveRouteSource = new ol.source.Vector({}); this.liveRouteLayer = new ol.layer.Vector({ source: this.liveRouteSource, visible: this.lookupReference('showLiveRoutes').pressed }); this.map.addLayer(this.liveRouteLayer); this.routeSource = new ol.source.Vector({}); this.map.addLayer(new ol.layer.Vector({ source: this.routeSource })); this.accuracySource = new ol.source.Vector({}); this.map.addLayer(new ol.layer.Vector({
            name: 'accuracyLayer',
            source: this.accuracySource
        })); this.markersSource = new ol.source.Vector({}); this.map.addLayer(new ol.layer.Vector({ source: this.markersSource }))
    }
});

Ext.define('Traccar.view.Main', {
    extend: Ext.container.Viewport, alias: 'widget.main', controller: 'mainController', layout: 'border', defaults: { header: !1, collapsible: !0, split: !0 }, items: [{ region: 'west', layout: 'border', width: Traccar.Style.deviceWidth, title: Strings.devicesAndState, titleCollapse: !0, floatable: !1, stateful: !0, stateId: 'devices-and-state-panel', defaults: { split: !0, flex: 1 }, items: [{ region: 'center', xtype: 'devicesView' }, { region: 'south', xtype: 'stateView' }] }, {
        region: 'south', xtype: 'reportView', reference: 'reportView',
        height: Traccar.Style.reportHeight, collapsed: !0, titleCollapse: !0, floatable: !1
    }, { region: 'center', xtype: 'mapView', collapsible: !1 }, { region: 'east', xtype: 'eventsView', reference: 'eventsView', width: Traccar.Style.deviceWidth, collapsed: !0, titleCollapse: !0, floatable: !1 }]
});

Ext.define('Traccar.view.MainMobile', {
    extend: Ext.container.Viewport, alias: 'widget.mainMobile', id: 'rootPanel', layout: 'card', items: [{
        layout: 'border', defaults: { header: !1, collapsible: !0, split: !0 },
         items: [{ region: 'east', xtype: 'stateView',
          title: Strings.stateTitle, flex: 4, collapsed: !0,
           collapseMode: 'mini', titleCollapse: !0, floatable: !1, stateId: 'mobile-state-grid' },
          { region: 'center', xtype: 'mapView', collapsible: !1, flex: 2 },
           {region: 'south', xtype: 'devicesView', title: Strings.deviceTitle, flex: 1, collapsed: !0, titleCollapse: !0,
            floatable: !1, stateId: 'mobile-devices-grid'
        }]
    }, { xtype: 'reportView' }, { xtype: 'eventsView' }]
});


var panorama, pressedDevice, overlay;
Ext.define('Traccar.controller.Root', {
    extend: Ext.app.Controller, alias: 'controller.root', init: function () {

// criando o pop-up para bloquear o veiculo do cliente - ver teste
        container = document.getElementById('popup');
        content = document.getElementById('popup-content');
        closer = document.getElementById('popup-closer');
        commandsButtons = document.getElementById('commands-buttons');
        overlay = new ol.Overlay({
            'element': document.getElementById('popup'),
            'autoPan': !0,
            'autoPanAnimation': {
                'duration': 0xfa
            }
        });
        closer.onclick = function () {
            overlay.setPosition(void 0);
            closer.blur();
            return !1;
        } ;

        var i, data, attribute, chartTypesStore, maintenanceTypesStore; chartTypesStore = Ext.getStore('ReportChartTypes'); 
         maintenanceTypesStore = Ext.getStore('MaintenanceTypes'); 
         Ext.state.Manager.setProvider(new Ext.state.CookieProvider); 
         data = Ext.getStore('PositionAttributes').getData().items; 
         for (i = 0; i < data.length; i++)attribute = data[i], Traccar.model.Position.addFields([{
            name: 'attribute.' + attribute.get('key'),
            attributeKey: attribute.get('key'), calculate: this.calculateAttribute, persist: !1
        }]), 'number' === attribute.get('valueType') && (chartTypesStore.add({ 
            key: 'attribute.' + attribute.get('key'), name: attribute.get('name') }), maintenanceTypesStore.add(attribute))
    }, calculateAttribute: function (data) { data = data.attributes[this.attributeKey]; 
        return void 0 !== data ? Traccar.AttributeFormatter.getAttributeConverter(this.attributeKey)(data) : data }, onLaunch: function () { 
            Ext.Ajax.request({ scope: this, url: 'api/server', callback: this.onServerReturn }) },
    onServerReturn: function (options, success, response) { options = {}; if (success) { Traccar.app.setServer(Ext.decode(response.responseText)); 
        if (success = Ext.Object.fromQueryString(window.location.search).token) options.token = success; 
        Ext.Ajax.request({ scope: this, url: 'api/session', method: 'GET', params: options, callback: this.onSessionReturn }) } 
        else Traccar.app.showError(response) }, onSessionReturn: function (options, success, response) {
        Ext.get('spinner').setVisible(!1); success ? (Traccar.app.setUser(Ext.decode(response.responseText)),
            this.loadApp()) : (this.login = Ext.create('widget.login', { listeners: { scope: this, login: this.onLogin } }), this.login.show())
    }, onLogin: function () { this.login.close(); this.loadApp() }, loadApp: function () {
        var attribution; 
        //testando isso aqui comentario - ver
        window.webkit && window.webkit.messageHandlers.appInterface && window.webkit.messageHandlers.appInterface.postMessage('login'); 
        window.appInterface && window.appInterface.postMessage('login'); 
      
        Ext.getStore('Groups').load(); 
        Ext.getStore('Drivers').load(); 
        Ext.getStore('Geofences').load(); 
        Ext.getStore('Calendars').load();
        Ext.getStore('Maintenances').load(); 
        Ext.getStore('ComputedAttributes').load();
         Ext.getStore('AllCommandTypes').load(); 
         Ext.getStore('Commands').load();
        Ext.getStore('AllNotificationTypes').load({ callback: function (records, operation, success) { operation = Ext.getStore('ReportEventTypes');
           success && (operation.add({ type: Traccar.store.ReportEventTypes.allEvents, name: Strings.eventAll }), operation.loadData(records, !0)) } }); 
         Ext.getStore('AllNotificators').load(); Ext.getStore('Notifications').load();
         Ext.getStore('ServerAttributes').loadData(Ext.getStore('CommonDeviceAttributes').getData().items,
            !0); Ext.getStore('ServerAttributes').loadData(Ext.getStore('CommonUserAttributes').getData().items, !0);
             Ext.getStore('UserAttributes').loadData(Ext.getStore('CommonUserAttributes').getData().items, !0);
              Ext.getStore('DeviceAttributes').loadData(Ext.getStore('CommonDeviceAttributes').getData().items, !0);
             Ext.getStore('GroupAttributes').loadData(Ext.getStore('CommonDeviceAttributes').getData().items, !0);


             Ext.getStore('Devices').load({ scope: this, callback: function () { this.asyncUpdate(!0) } });
             (attribution = Ext.get('attribution')) &&
    attribution.remove(); Traccar.app.isMobile() ? Ext.create('widget.mainMobile') : Ext.create('widget.main');
                 if (attribution = Ext.Object.fromQueryString(window.location.search).eventId) 
                 this.fireEvent('showsingleevent', attribution), this.removeUrlParameter('eventId')
    }, beep: function () { this.beepSound || (this.beepSound = new Audio('beep.wav')); this.beepSound.play() },
     soundPressed: function () { var soundButton = Ext.getCmp('soundButton'); return soundButton && soundButton.pressed },
      removeUrlParameter: function (param) {
        var params =
            Ext.Object.fromQueryString(window.location.search); delete params[param]; Ext.Object.isEmpty(params) ? window.history.pushState(null, null, window.location.pathname) : 
            window.history.pushState(null, null, window.location.pathname + '?' + Ext.Object.toQueryString(params))
    }, asyncUpdate: function (first) {
        var self = this, protocol, pathname; protocol = 'https:' === window.location.protocol ? 'wss:' : 'ws:'; pathname = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1); 
        protocol = new WebSocket(protocol + '//' +
        window.location.host + pathname + 'api/socket'); protocol.onclose = function () {
        Traccar.app.showToast(Strings.errorSocket, Strings.errorTitle); Ext.Ajax.request({ url: 'api/devices', success: function (response) { self.updateDevices(Ext.decode(response.responseText)) }, failure: function (response) {
        401 === response.status && window.location.reload() } }); Ext.Ajax.request({ url: 'api/positions', headers: { Accept: 'application/json' }, success: function (response) { self.updatePositions(Ext.decode(response.responseText)) } }); 
        setTimeout(function () { self.asyncUpdate(!1) },
        Traccar.Style.reconnectTimeout)
        }; protocol.onmessage = function (event) { event = Ext.decode(event.data); event.devices && self.updateDevices(event.devices); 
            event.positions && (self.updatePositions(event.positions, first), first = !1); event.events && self.updateEvents(event.events) }
    }, updateDevices: function (array) {
        var i, store, entity; store = Ext.getStore('Devices'); for (i = 0; i < array.length; i++)(entity = store.getById(array[i].id)) && entity.set({ status: array[i].status, lastUpdate: array[i].lastUpdate, 
            geofenceIds: array[i].geofenceIds },
            { dirty: !1 })
    }, updatePositions: function (array, first) {
        var i, store, entity, device; store = Ext.getStore('LatestPositions'); for (i = 0; i < array.length; i++)(entity = store.findRecord('deviceId', array[i].deviceId, 0, !1, !1, !0)) ? entity.set(array[i]) : 
        store.add(Ext.create('Traccar.model.Position', array[i])), Ext.getStore('Events').findRecord('positionId', array[i].id, 0, !1, !1, !0) && Ext.getStore('EventPositions').add(Ext.create('Traccar.model.Position', array[i])); 
        first && ((array = Ext.Object.fromQueryString(window.location.search).deviceId) &&
            (device = Ext.getStore('VisibleDevices').findRecord('id', array, 0, !1, !0, !0)) && this.fireEvent('selectdevice', device, !0), device || this.zoomToAllDevices())
    }, updateEvents: function (array) { var i, store, device; store = Ext.getStore('Events'); for (i = 0; i < array.length; i++)store.add(array[i]), (device = Ext.getStore('Devices').getById(array[i].deviceId)) ? 
    (this.soundPressed() && this.beep(), Traccar.app.showToast(array[i].text, device.get('name'))) : Traccar.app.showToast(array[i].text) }, zoomToAllDevices: function () {
        var lat, lon,
        zoom; lat = Traccar.app.getPreference('latitude', 0); lon = Traccar.app.getPreference('longitude', 0); zoom = Traccar.app.getPreference('zoom', 0); 0 === lat && 0 === lon && 0 === zoom && this.fireEvent('zoomtoalldevices')
    }
});

// var ignitionteste; // em fase de teste ver

Ext.define('Traccar.Application', {
    extend: Ext.app.Application, name: 'Traccar', models: 'Server User Group Device Position Attribute Command Event Geofence Notification ReportSummary ReportTrip ReportStop Calendar KnownAttribute Driver KnownCommand KnownNotification Maintenance'.split(' '), 
    stores: 'Groups Devices AllGroups AllDevices Positions LatestPositions EventPositions Users Attributes MapTypes DistanceUnits SpeedUnits CoordinateFormats CommandTypes TimeUnits Languages Events Geofences AllGeofences Notifications AllNotifications GeofenceTypes ReportRoute ReportEvents ReportTrips ReportStops ReportSummary ReportTypes ReportEventTypes ReportChartTypes ReportPeriods Statistics DeviceImages Calendars AllCalendars AllTimezones VisibleDevices DeviceStatuses CommonDeviceAttributes DeviceAttributes GeofenceAttributes GroupAttributes ServerAttributes CommonUserAttributes UserAttributes ComputedAttributes AllComputedAttributes PositionAttributes AttributeValueTypes Drivers AllDrivers KnownCommands VolumeUnits AllCommandTypes Commands AllCommands DeviceCommands AllNotificationTypes Maintenances AllMaintenances MaintenanceTypes HoursUnits AllNotificators'.split(' '), 
    controllers: ['Root'],
    isMobile: function () { return window.matchMedia && window.matchMedia('(max-width: 768px)').matches }, getVehicleFeaturesDisabled: function () { return this.getBooleanAttributePreference('ui.disableVehicleFetures') }, 
    getEventString: function (eventType) { eventType = 'event' + eventType.charAt(0).toUpperCase() + eventType.slice(1); return Strings[eventType] || eventType }, 
    getNotificatorString: function (eventType) { eventType = 'notificator' + eventType.charAt(0).toUpperCase() + eventType.slice(1); return Strings[eventType] || eventType },
    showReports: function (show) { var rootPanel = Ext.getCmp('rootPanel'); rootPanel && rootPanel.setActiveItem(show ? 1 : 0) }, 
    showEvents: function (show) { var rootPanel = Ext.getCmp('rootPanel'); rootPanel && rootPanel.setActiveItem(show ? 2 : 0) }, updateNotificationToken: function (token) {
        var attributes = Ext.clone(this.user.get('attributes')); if (!attributes.notificationTokens || 0 > attributes.notificationTokens.indexOf(token)) 
        attributes.notificationTokens = attributes.notificationTokens ? attributes.notificationTokens + (',' + token) : token,
            this.user.set('attributes', attributes), this.user.save()
    }, setUser: function (data) { this.user = Ext.create('Ext.data.reader.Json', { model: 'Traccar.model.User' }).readRecords(data).getRecords()[0] }, 
    getUser: function () { return this.user }, setServer: function (data) { this.server = Ext.create('Ext.data.reader.Json', { model: 'Traccar.model.Server' }).readRecords(data).getRecords()[0] }, 
    getServer: function () { return this.server }, getPreference: function (key, defaultValue) {
        return this.getServer().get('forceSettings') ? this.getServer().get(key) ||
            this.getUser().get(key) || defaultValue : this.getUser().get(key) || this.getServer().get(key) || defaultValue
    }, getAttributePreference: function (key, defaultValue) { return this.getServer().get('forceSettings') ? this.getServer().get('attributes')[key] || this.getUser().get('attributes')[key] || 
    defaultValue : this.getUser().get('attributes')[key] || this.getServer().get('attributes')[key] || defaultValue }, getBooleanAttributePreference: function (key) { return 'true' === 
    this.getAttributePreference(key, !1).toString() }, getReportColor: function (deviceId) {
        var index,
        device = Ext.getStore('Devices').getById(deviceId); device && (index = device.get('attributes')['web.reportColor']); 
        if (index) return index; index = 0; void 0 !== deviceId && (index = deviceId % Traccar.Style.mapRouteColor.length); return Traccar.Style.mapRouteColor[index]
    }, showError: function (error) {
        Ext.isString(error) ? Ext.Msg.alert(Strings.errorTitle, error) : error.responseText ? Ext.Msg.alert(Strings.errorTitle, Strings.errorGeneral + '\x3cbr\x3e\x3cbr\x3e\x3ctextarea readonly rows\x3d"5" style\x3d"resize: none; width: 100%;"\x3e' +
            error.responseText + '\x3c/textarea\x3e') : error.statusText ? Ext.Msg.alert(Strings.errorTitle, error.statusText) : Ext.Msg.alert(Strings.errorTitle, Strings.errorConnection)
    }, showToast: function (message, title) { Ext.toast({ html: message, title: title, width: Traccar.Style.toastWidth, align: 'br' }) } ,


    showOverlay: function (id, i, device) {
        id.addOverlay(overlay);
        id = device.coordinate;
        device = Ext.getStore('Devices').getById(i.get('id'));
        var group = Ext.getStore('Groups').getById(i.get('groupId'))
            , lastPosition = Ext.getStore('LatestPositions').findRecord('deviceId', i.get('id'), 0, !1, !1, !0)
            , lastAttribute = lastPosition.get('attributes') 
            , lastAttribute = null != lastAttribute.ignition ? 1 == lastAttribute.ignition ? Strings.eventIgnitionOn : Strings.eventIgnitionOff : '-' 
            , deviceStatus = 'online' == device.get('status') ? Strings.deviceStatusOnline : 'offline' == device.get('status') ? Strings.deviceStatusOffline : Strings.deviceStatusUnknown
            , group = null == group ? 'Nenhum' : group.get('name'); 
        content.innerHTML = '<div class=\"nome\">' + device.get('name') + '</div></br><div class=\"hr\"></div></br></br><div class=\"title\">Grupo : <span>' + group + '</span></div></br><div\x20class=\x22title\x22>Ignição\x20:\x20<span>' + lastAttribute + '</span></div></br><div class=\"title\">Data : <span>' + Traccar.AttributeFormatter.getFormatter('fixTime')(lastPosition.get('fixTime')) +  '</span></div></br><div\x20class=\x22title\x22>' + Strings.deviceStatus + ' : <span>' + deviceStatus + '</span></div></br><div class=\"title\">Velocidade : <span>' +  Traccar.AttributeFormatter.getFormatter('speed')(lastPosition.get('speed')) + '</span></div></br><div class=\"title\">Endereço : <code>' + lastPosition.get('address') +  '</code></div>';
        0x1 == Traccar.app.getPreference('limitCommands', !0x1);
        container.style.display = 'block';
        overlay.setPosition(id);
        document.getElementById('bloqueio').onclick = function () {
            swal({
                'title':'Bloquear?',
                'text': 'Deseja bloquear o veículo',
                'type': 'warning',
                'showCancelButton': !0x0,
                'confirmButtonClass': 'btn-danger',
                'confirmButtonText': 'Sim',
                'cancelButtonText': 'Cancelar',
                'closeOnConfirm': !0x0
            }, function () {
                var id = {
                    'deviceId': i.get('id'),
                    'type': 'engineStop'
                };
                Ext.Ajax.request({
                    'url': 'api/commands/send',
                    'jsonData': Ext.encode(id),
                    'success': function (id) {
                        Traccar.app.showToast(0xca === id.status ? Strings.commandQueued : Strings.commandSent);
                    },
                    'failure': function (id) { }
                });
            });
        };
        document.getElementById('desbloqueio').onclick = function () {
            swal({
                'title': 'Desbloquear?',
                'text': 'Deseja desbloquear o veículo',
                'type': 'info',
                'showCancelButton': !0x0,
                'confirmButtonClass': 'btn-success',
                'confirmButtonText': 'Sim',
                'cancelButtonText': 'Cancelar',
                'closeOnConfirm': !0x0
            }, function () {
                var id = {
                    'deviceId': i.get('id'),
                    'type': 'engineResume'
                };
                Ext.Ajax.request({
                    'url': 'api/commands/send',
                    'jsonData': Ext.encode(id),
                    'success': function (id) {
                        Traccar.app.showToast(0xca === id.status ? Strings.commandQueued : Strings.commandSent);
                    },
                    'failure': function (id) { }
                });
            });
        }
            ;
        document.getElementById('local').onclick = function () {
            window.open('https://www.google.com/maps/place/' + lastPosition.get('latitude') + ',' + lastPosition.get('longitude') + '/@' + lastPosition.get('latitude') + ',' + lastPosition.get('longitude') + ',17z/data=!3m1!4b1!4m5!3m4!1s0x0:0x0!8m2!3d' + lastPosition.get('latitude') + '!4d' + lastPosition.get('longitude') + ',_blank');
        }
            ;
    }
}); 



Ext.application({ name: 'Traccar', extend: Traccar.Application });
