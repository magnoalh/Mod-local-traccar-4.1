
Ext['define']('Traccar.Style', {
    'singleton': !0x0,
    'refreshPeriod': 0xea60,
    'reconnectTimeout': 0xea60,
    'reportTimeout': 0x1d4c0,
    'normalPadding': 0xa,
    'windowWidth': 0x320,
    'windowHeight': 0x258,
    'formFieldWidth': 0x113,
    'dateTimeFormat24': 'd/m/Y H:i:s',
    'dateTimeFormat12': 'd/m/Y\x20g:i:s\x20a',
    'timeFormat24': 'H:i',
    'timeFormat12': 'g:i a',
    'dateFormat': 'd/m/Y',
    'weekStartDay': 0x1,
    'deviceWidth': 0x190,
    'toastWidth': 0x12c,
    'reportHeight': 0xfa,
    'columnWidthNormal': 0x64,
    'mapDefaultLat': 48.8567,
    'mapDefaultLon': 2.3508,
    'mapDefaultZoom': 0x4,
    'mapRouteColor': '#F06292\x20#BA68C8\x20#4DD0E1\x20#4DB6AC\x20#FF8A65\x20#A1887F'['split']('\x20'),
    'mapRouteWidth': 0x5,
    'mapTextColor': 'rgba(50, 50, 50, 1.0)',
    'mapTextStrokeColor': 'rgba(255, 255, 255, 1.0)',
    'mapTextStrokeWidth': 0x2,
    'mapTextOffset': 0x2,
    'mapTextFont': 'bold 12px arial',
    'mapColorOnline': 'rgba(77, 250, 144, 1.0)',
    'mapColorUnknown': 'rgba(255, 162, 177, 1.0)',
    'mapColorOffline': 'rgba(255,\x20162,\x20173,\x201.0)',
    'mapScaleNormal': 0x1,
    'mapScaleSelected': 1.5,
    'mapMaxZoom': 0x12,
    'mapDelay': 0x1f4,
    'mapAccuracyColor': 'rgba(96,\x2096,\x2096,\x201.0)',
    'mapGeofenceTextColor': 'rgba(14, 88, 141, 1.0)',
    'mapGeofenceColor': 'rgba(21, 127, 204, 1.0)',
    'mapGeofenceOverlayOpacity': 0.2,
    'mapGeofenceWidth': 0x5,
    'mapGeofenceRadius': 0x9,
    'coordinatePrecision': 0x6,
    'numberPrecision': 0x2,
    'reportGridStyle': 'borderTop:\x201px\x20solid\x20lightgray',
    'chartPadding': '20\x2040\x2010\x2010',
    'chartMarkerRadius': 0x3,
    'chartMarkerHighlightScaling': 1.5
});
Ext['define']('Traccar.AttributeFormatter', {
    'singleton': !0x0,
    'numberFormatterFactory': function (_0x24b8ca, _0x2b4ad7) {
        return function (value) {
            return void 0x0 !== value ? Number(value['toFixed'](_0x24b8ca)) + '\x20' + _0x2b4ad7 : null;
        }
            ;
    },
    'coordinateFormatter': function (key, value) {
        return Ext['getStore']('CoordinateFormats')['formatValue'](key, value, Traccar['app']['getPreference']('coordinateFormat'));
    },
    'speedFormatter': function (value) {
        return Ext['getStore']('SpeedUnits')['formatValue'](value, Traccar['app']['getAttributePreference']('speedUnit'));
    },
    'speedConverter': function (_0x53c830) {
        return Ext['getStore']('SpeedUnits')['convertValue'](_0x53c830, Traccar['app']['getAttributePreference']('speedUnit'));
    },
    'courseFormatter': function (_0x46c80a) {
        return 'N\x20NE\x20E\x20SE\x20S\x20SW\x20W\x20NW'['split']('\x20')[Math['floor'](_0x46c80a / 0x2d)];
    },
    'distanceFormatter': function (_0x4e99fc) {
        return Ext['getStore']('DistanceUnits')['formatValue'](_0x4e99fc, Traccar['app']['getAttributePreference']('distanceUnit'));
    },
    'distanceConverter': function (_0x5f9420) {
        return Ext['getStore']('DistanceUnits')['convertValue'](_0x5f9420, Traccar['app']['getAttributePreference']('distanceUnit'));
    },
    'volumeFormatter': function (_0xf1cd00) {
        return Ext['getStore']('VolumeUnits')['formatValue'](_0xf1cd00, Traccar['app']['getAttributePreference']('volumeUnit'));
    },
    'volumeConverter': function (_0x46a6c6) {
        return Ext['getStore']('VolumeUnits')['convertValue'](_0x46a6c6, Traccar['app']['getAttributePreference']('volumeUnit'));
    },
    'hoursFormatter': function (_0x4c2bf1) {
        return Ext['getStore']('HoursUnits')['formatValue'](_0x4c2bf1, 'h');
    },
    'hoursConverter': function (_0x5b7db0) {
        return Ext['getStore']('HoursUnits')['convertValue'](_0x5b7db0, 'h');
    },
    'durationFormatter': function (_0x38d9a6) {
        return Ext['getStore']('HoursUnits')['formatValue'](_0x38d9a6, 'h', !0x0);
    },
    'deviceIdFormatter': function (_0x3a12bc) {
        var _0x44fab7;
        return 0x0 !== _0x3a12bc ? (_0x44fab7 = Ext['getStore']('AllDevices'),
            0x0 === _0x44fab7['getTotalCount']() && (_0x44fab7 = Ext['getStore']('Devices')),
            (_0x3a12bc = _0x44fab7['getById'](_0x3a12bc)) ? _0x3a12bc['get']('name') : '') : null;
    },
    'groupIdFormatter': function (_0x196244) {
        var _0xc1e656;
        return 0x0 !== _0x196244 ? (_0xc1e656 = Ext['getStore']('AllGroups'),
            0x0 === _0xc1e656['getTotalCount']() && (_0xc1e656 = Ext['getStore']('Groups')),
            (_0xc1e656 = _0xc1e656['getById'](_0x196244)) ? _0xc1e656['get']('name') : _0x196244) : null;
    },
    'geofenceIdFormatter': function (_0x2f758f) {
        var _0x4c5bbd;
        return 0x0 !== _0x2f758f ? (_0x4c5bbd = Ext['getStore']('AllGeofences'),
            0x0 === _0x4c5bbd['getTotalCount']() && (_0x4c5bbd = Ext['getStore']('Geofences')),
            (_0x2f758f = _0x4c5bbd['getById'](_0x2f758f)) ? _0x2f758f['get']('name') : '') : null;
    },
    'calendarIdFormatter': function (_0xf7c26a) {
        var _0x829b2d;
        return 0x0 !== _0xf7c26a ? (_0x829b2d = Ext['getStore']('AllCalendars'),
            0x0 === _0x829b2d['getTotalCount']() && (_0x829b2d = Ext['getStore']('Calendars')),
            (_0xf7c26a = _0x829b2d['getById'](_0xf7c26a)) ? _0xf7c26a['get']('name') : '') : null;
    },
    'driverUniqueIdFormatter': function (_0x195b60) {
        var _0x11be60;
        return 0x0 !== _0x195b60 ? (_0x11be60 = Ext['getStore']('AllDrivers'),
            0x0 === _0x11be60['getTotalCount']() && (_0x11be60 = Ext['getStore']('Drivers')),
            (_0x11be60 = _0x11be60['findRecord']('uniqueId', _0x195b60, 0x0, !0x1, !0x0, !0x0)) ? _0x195b60 + '\x20(' + _0x11be60['get']('name') + ')' : _0x195b60) : null;
    },
    'maintenanceIdFormatter': function (_0x2be49b) {
        var _0x14aea4;
        return 0x0 !== _0x2be49b ? (_0x14aea4 = Ext['getStore']('AllMaintenances'),
            0x0 === _0x14aea4['getTotalCount']() && (_0x14aea4 = Ext['getStore']('Maintenances')),
            (_0x2be49b = _0x14aea4['getById'](_0x2be49b)) ? _0x2be49b['get']('name') : '') : null;
    },
    'lastUpdateFormatter': function (_0x4d399a) {
        var _0x4811c8;
        if (_0x4d399a) {
            _0x4d399a = Math['floor']((new Date() - _0x4d399a) / 0x3e8);
            0x0 > _0x4d399a && (_0x4d399a = 0x0);
            _0x4811c8 = Math['floor'](_0x4d399a / 0x15180);
            if (0x1 < _0x4811c8)
                return _0x4811c8 + '\x20' + Strings['sharedDays'];
            _0x4811c8 = Math['floor'](_0x4d399a / 0xe10);
            return 0x1 < _0x4811c8 ? _0x4811c8 + '\x20' + Strings['sharedHours'] : Math['floor'](_0x4d399a / 0x3c) + '\x20' + Strings['sharedMinutes'];
        }
        return null;
    },
    'commandTypeFormatter': function (_0xc2bb74) {
        var _0x2e4c38 = Strings['command' + _0xc2bb74['charAt'](0x0)['toUpperCase']() + _0xc2bb74['slice'](0x1)];
        return _0x2e4c38 ? _0x2e4c38 : _0xc2bb74;
    },
    'defaultFormatter': function (_0x12a9fa) {
        return 'number' === typeof _0x12a9fa ? Number(_0x12a9fa['toFixed'](Traccar['Style']['numberPrecision'])) : 'boolean' === typeof _0x12a9fa ? _0x12a9fa ? Ext['Msg']['buttonText']['yes'] : Ext['Msg']['buttonText']['no'] : _0x12a9fa instanceof Date ? Traccar['app']['getPreference']('twelveHourFormat', !0x1) ? Ext['Date']['format'](_0x12a9fa, Traccar['Style']['dateTimeFormat12']) : Ext['Date']['format'](_0x12a9fa, Traccar['Style']['dateTimeFormat24']) : _0x12a9fa;
    },
    'getFormatter': function (_0xabecd2) {
        var _0x59fb0f = this;
        switch (_0xabecd2) {
            case 'latitude':
            case 'longitude':
                return function (_0x36161b) {
                    return _0x59fb0f['coordinateFormatter'](_0xabecd2, _0x36161b);
                }
                    ;
            case 'speed':
                return this['speedFormatter'];
            case 'course':
                return this['courseFormatter'];
            case 'distance':
            case 'accuracy':
                return this['distanceFormatter'];
            case 'duration':
                return this['durationFormatter'];
            case 'deviceId':
                return this['deviceIdFormatter'];
            case 'groupId':
                return this['groupIdFormatter'];
            case 'geofenceId':
                return this['geofenceIdFormatter'];
            case 'maintenanceId':
                return this['maintenanceIdFormatter'];
            case 'calendarId':
                return this['calendarIdFormatter'];
            case 'lastUpdate':
                return this['lastUpdateFormatter'];
            case 'spentFuel':
                return this['volumeFormatter'];
            case 'driverUniqueId':
                return this['driverUniqueIdFormatter'];
            case 'commandType':
                return this['commandTypeFormatter'];
            default:
                return this['defaultFormatter'];
        }
    },
    'getConverter': function (_0x195814) {
        switch (_0x195814) {
            case 'speed':
                return this['speedConverter'];
            case 'distance':
            case 'accuracy':
                return this['distanceConverter'];
            case 'spentFuel':
                return this['volumeConverter'];
            default:
                return function (_0x195814) {
                    return _0x195814;
                }
                    ;
        }
    },
    'getAttributeFormatter': function (key) {
        switch (Ext['getStore']('PositionAttributes')['getAttributeDataType'](key)) {
            case 'distance':
                return this['distanceFormatter'];
            case 'speed':
                return this['speedFormatter'];
            case 'driverUniqueId':
                return this['driverUniqueIdFormatter'];
            case 'voltage':
                return this['numberFormatterFactory'](Traccar['Style']['numberPrecision'], Strings['sharedVoltAbbreviation']);
            case 'percentage':
                return this['numberFormatterFactory'](Traccar['Style']['numberPrecision'], '%');
            case 'temperature':
                return this['numberFormatterFactory'](Traccar['Style']['numberPrecision'], '°C');
            case 'volume':
                return this['volumeFormatter'];
            case 'hours':
                return this['hoursFormatter'];
            case 'consumption':
                return this['numberFormatterFactory'](Traccar['Style']['numberPrecision'], Strings['sharedLiterPerHourAbbreviation']);
            default:
                return this['defaultFormatter'];
        }
    },
    'getAttributeConverter': function (_0x14f7af) {
        switch (Ext['getStore']('PositionAttributes')['getAttributeDataType'](_0x14f7af)) {
            case 'distance':
                return this['distanceConverter'];
            case 'speed':
                return this['speedConverter'];
            case 'volume':
                return this['volumeConverter'];
            case 'hours':
                return this['hoursConverter'];
            default:
                return function (_0x14f7af) {
                    return _0x14f7af;
                }
                    ;
        }
    },
    'renderAttribute': function (_0x8ab0ac, _0x11aada) {
        return _0x11aada && 'speed' === _0x11aada['get']('hoursConverter') ? Ext['getStore']('SpeedUnits')['formatValue'](_0x8ab0ac, Traccar['app']['getAttributePreference']('speedUnit', 'km'), !0x0) : _0x11aada && 'distance' === _0x11aada['get']('hoursConverter') ? Ext['getStore']('DistanceUnits')['formatValue'](_0x8ab0ac, Traccar['app']['getAttributePreference']('distanceUnit', 'km'), !0x0) : _0x11aada && 'hours' === _0x11aada['get']('hoursConverter') ? Ext['getStore']('HoursUnits')['formatValue'](_0x8ab0ac, 'h', !0x0) : _0x8ab0ac;
    }
});
Ext['define']('Traccar.model.Server', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'registration',
        'type': 'boolean'
    }, {
        'name': 'readonly',
        'type': 'boolean'
    }, {
        'name': 'deviceReadonly',
        'type': 'boolean'
    }, {
        'name': 'limitCommands',
        'type': 'boolean'
    }, {
        'name': 'map',
        'type': 'string'
    }, {
        'name': 'bingKey',
        'type': 'string'
    }, {
        'name': 'mapUrl',
        'type': 'string'
    }, {
        'name': 'latitude',
        'type': 'float'
    }, {
        'name': 'longitude',
        'type': 'float'
    }, {
        'name': 'zoom',
        'type': 'int'
    }, {
        'name': 'twelveHourFormat',
        'type': 'boolean'
    }, {
        'name': 'forceSettings',
        'type': 'boolean'
    }, {
        'name': 'coordinateFormat',
        'type': 'string'
    }, {
        'name': 'poiLayer',
        'type': 'string'
    }, {
        'name': 'attributes'
    }],
    'proxy': {
        'type': 'ajax',
        'url': 'api/server',
        'actionMethods': {
            'update': 'PUT'
        },
        'writer': {
            'type': 'json',
            'writeAllFields': !0x0
        }
    }
});
Ext['define']('Traccar.model.User', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'login',
        'type': 'string'
    }, {
        'name': 'email',
        'type': 'string'
    }, {
        'name': 'password',
        'type': 'string'
    }, {
        'name': 'phone',
        'type': 'string'
    }, {
        'name': 'readonly',
        'type': 'boolean'
    }, {
        'name': 'administrator',
        'type': 'boolean'
    }, {
        'name': 'map',
        'type': 'string'
    }, {
        'name': 'latitude',
        'type': 'float'
    }, {
        'name': 'longitude',
        'type': 'float'
    }, {
        'name': 'zoom',
        'type': 'int'
    }, {
        'name': 'twelveHourFormat',
        'type': 'boolean'
    }, {
        'name': 'coordinateFormat',
        'type': 'string'
    }, {
        'name': 'disabled',
        'type': 'boolean'
    }, {
        'name': 'expirationTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'deviceLimit',
        'type': 'int'
    }, {
        'name': 'userLimit',
        'type': 'int'
    }, {
        'name': 'deviceReadonly',
        'type': 'boolean'
    }, {
        'name': 'limitCommands',
        'type': 'boolean'
    }, {
        'name': 'poiLayer',
        'type': 'string'
    }, {
        'name': 'token',
        'type': 'string'
    }, {
        'name': 'attributes'
    }],
    'proxy': {
        'type': 'rest',
        'url': 'api/users',
        'writer': {
            'type': 'json',
            'writeAllFields': !0x0
        }
    }
});
Ext['define']('Traccar.model.Group', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'groupId',
        'type': 'int'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.Device', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'uniqueId',
        'type': 'string'
    }, {
        'name': 'phone',
        'type': 'string',
        'allowNull': !0x0
    }, {
        'name': 'model',
        'type': 'string',
        'allowNull': !0x0
    }, {
        'name': 'contact',
        'type': 'string',
        'allowNull': !0x0
    }, {
        'name': 'category',
        'type': 'string',
        'allowNull': !0x0
    }, {
        'name': 'status',
        'type': 'string',
        'allowNull': !0x0
    }, {
        'name': 'lastUpdate',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'groupId',
        'type': 'int'
    }, {
        'name': 'disabled',
        'type': 'boolean'
    }, {
        'name': 'geofenceIds'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.Position', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'protocol',
        'type': 'string'
    }, {
        'name': 'deviceId',
        'type': 'int'
    }, {
        'name': 'serverTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'deviceTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'fixTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'valid',
        'type': 'boolean'
    }, {
        'name': 'accuracy',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('accuracy')
    }, {
        'name': 'latitude',
        'type': 'float'
    }, {
        'name': 'longitude',
        'type': 'float'
    }, {
        'name': 'altitude',
        'type': 'float'
    }, {
        'name': 'speed',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('speed')
    }, {
        'name': 'course',
        'type': 'float'
    }, {
        'name': 'address',
        'type': 'string'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.Attribute', {
    'extend': Ext['data']['Model'],
    'fields': [{
        'name': 'priority',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'value'
    }, {
        'name': 'attribute',
        'type': 'string'
    }]
});
Ext['define']('Traccar.model.Command', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'description',
        'type': 'string'
    }, {
        'name': 'deviceId',
        'type': 'int'
    }, {
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'textChannel',
        'type': 'boolean'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.Event', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'serverTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'deviceId',
        'type': 'int'
    }, {
        'name': 'positionId',
        'type': 'int'
    }, {
        'name': 'geofenceId',
        'type': 'int'
    }, {
        'name': 'maintenanceId',
        'type': 'int'
    }, {
        'name': 'text',
        'convert': function (_0x296385, _0x4e1d20) {
            var _0x278cfc;
            'commandResult' === _0x4e1d20['get']('type') ? _0x296385 = Strings['eventCommandResult'] + ':\x20' + _0x4e1d20['get']('attributes')['result'] : 'alarm' === _0x4e1d20['get']('type') ? (_0x296385 = _0x4e1d20['get']('attributes')['alarm'],
                _0x296385 = 'alarm' + _0x296385['charAt'](0x0)['toUpperCase']() + _0x296385['slice'](0x1),
                _0x296385 = Strings[_0x296385] || _0x296385) : _0x296385 = 'textMessage' === _0x4e1d20['get']('type') ? Strings['eventTextMessage'] + ':\x20' + _0x4e1d20['get']('attributes')['message'] : 'driverChanged' === _0x4e1d20['get']('type') ? Strings['eventDriverChanged'] + ':\x20' + Traccar['AttributeFormatter']['driverUniqueIdFormatter'](_0x4e1d20['get']('attributes')['driverUniqueId']) : Traccar['app']['getEventString'](_0x4e1d20['get']('type'));
            _0x4e1d20['get']('geofenceId') && (_0x278cfc = Ext['getStore']('Geofences')['getById'](_0x4e1d20['get']('geofenceId'))) && (_0x296385 += '\x20\x22' + _0x278cfc['get']('name') + '\x22');
            _0x4e1d20['get']('maintenanceId') && (_0x4e1d20 = Ext['getStore']('Maintenances')['getById'](_0x4e1d20['get']('maintenanceId'))) && (_0x296385 += '\x20\x22' + _0x4e1d20['get']('name') + '\x22');
            return _0x296385;
        },
        'depends': ['type', 'attributes', 'geofenceId', 'maintenanceId']
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.Geofence', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'description',
        'type': 'string'
    }, {
        'name': 'area',
        'type': 'string'
    }, {
        'name': 'calendarId',
        'type': 'int'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.Notification', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'always',
        'type': 'bool'
    }, {
        'name': 'attributes'
    }, {
        'name': 'notificators',
        'type': 'string'
    }, {
        'name': 'calendarId',
        'type': 'int'
    }]
});
Ext['define']('Traccar.model.ReportSummary', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'deviceId',
        'type': 'int'
    }, {
        'name': 'deviceName',
        'type': 'string'
    }, {
        'name': 'maxSpeed',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('speed')
    }, {
        'name': 'averageSpeed',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('speed')
    }, {
        'name': 'distance',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('distance')
    }, {
        'name': 'engineHours',
        'type': 'int'
    }, {
        'name': 'spentFuel',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('spentFuel')
    }]
});
Ext['define']('Traccar.model.ReportTrip', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'deviceId',
        'type': 'int'
    }, {
        'name': 'deviceName',
        'type': 'string'
    }, {
        'name': 'maxSpeed',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('speed')
    }, {
        'name': 'averageSpeed',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('speed')
    }, {
        'name': 'distance',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('distance')
    }, {
        'name': 'duration',
        'type': 'int'
    }, {
        'name': 'startTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'startAddress',
        'type': 'string'
    }, {
        'name': 'endTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'endAddress',
        'type': 'string'
    }, {
        'name': 'spentFuel',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('spentFuel')
    }, {
        'name': 'driverUniqueId',
        'type': 'string'
    }, {
        'name': 'driverName',
        'type': 'string'
    }]
});
Ext['define']('Traccar.model.ReportStop', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'deviceId',
        'type': 'int'
    }, {
        'name': 'deviceName',
        'type': 'string'
    }, {
        'name': 'duration',
        'type': 'int'
    }, {
        'name': 'startTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'address',
        'type': 'string'
    }, {
        'name': 'endTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': 'engineHours',
        'type': 'int'
    }, {
        'name': 'positionId',
        'type': 'int'
    }, {
        'name': 'spentFuel',
        'type': 'float',
        'convert': Traccar['AttributeFormatter']['getConverter']('spentFuel')
    }]
});
Ext['define']('Traccar.model.Calendar', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'data'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.KnownAttribute', {
    'extend': Ext['data']['Model'],
    'idProperty': 'key',
    'fields': [{
        'name': 'key',
        'type': 'string'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'valueType',
        'type': 'string'
    }, {
        'name': 'hoursConverter',
        'type': 'string'
    }]
});
Ext['define']('Traccar.model.Driver', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'uniqueId',
        'type': 'string'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.model.KnownCommand', {
    'extend': Ext['data']['Model'],
    'idProperty': 'type',
    'fields': [{
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'name',
        'convert': function (v, rec) {
            return Traccar['AttributeFormatter']['getFormatter']('commandType')(rec['get']('type'));
        },
        'depends': ['type']
    }, {
        'name': 'parameters'
    }]
});
Ext['define']('Traccar.model.KnownNotification', {
    'extend': Ext['data']['Model'],
    'idProperty': 'type',
    'fields': [{
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'name',
        'convert': function (_0x4a9088, _0x28a248) {
            return Traccar['app']['getEventString'](_0x28a248['get']('type'));
        },
        'depends': ['type']
    }]
});
Ext['define']('Traccar.model.Maintenance', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'name',
        'type': 'string'
    }, {
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'start',
        'type': 'float'
    }, {
        'name': 'period',
        'type': 'float'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.store.Groups', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Group',
    'proxy': {
        'type': 'rest',
        'url': 'api/groups',
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define']('Traccar.store.Devices', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Device',
    'proxy': {
        'type': 'rest',
        'url': 'api/devices',
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define']('Traccar.store.AllGroups', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Group',
    'proxy': {
        'type': 'rest',
        'url': 'api/groups',
        'extraParams': {
            'all': !0x0
        }
    }
});
Ext['define']('Traccar.store.AllDevices', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Device',
    'proxy': {
        'type': 'rest',
        'url': 'api/devices',
        'extraParams': {
            'all': !0x0
        }
    }
});
Ext['define']('Traccar.store.Positions', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Position',
    'proxy': {
        'type': 'rest',
        'url': 'api/positions',
        'headers': {
            'Accept': 'application/json'
        }
    }
});
Ext['define']('Traccar.store.LatestPositions', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Position'
});
Ext['define']('Traccar.store.EventPositions', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Position',
    'trackRemoved': !0x1,
    'proxy': {
        'type': 'rest',
        'url': 'api/positions',
        'headers': {
            'Accept': 'application/json'
        }
    }
});
Ext['define']('Traccar.store.Users', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.User',
    'proxy': {
        'type': 'rest',
        'url': 'api/users',
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define']('Traccar.store.Attributes', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Attribute',
    'sorters': [{
        'property': 'priority'
    }]
});
Ext['define']('Traccar.store.MapTypes', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name'],
    'data': [{
        'key': 'carto',
        'name': Strings['mapCarto']
    }, {
        'key': 'osm',
        'name': Strings['mapOsm']
    }, {
        'key': 'bingRoad',
        'name': Strings['mapBingRoad']
    }, {
        'key': 'bingAerial',
        'name': Strings['mapBingAerial']
    }, {
        'key': 'bingHybrid',
        'name': Strings['mapBingHybrid']
    }, {
        'key': 'baidu',
        'name': Strings['mapBaidu']
    }, {
        'key': 'yandexMap',
        'name': Strings['mapYandexMap']
    }, {
        'key': 'yandexSat',
        'name': Strings['mapYandexSat']
    }, {
        'key': 'wikimedia',
        'name': Strings['mapWikimedia']
    }, {
        'key': 'custom',
        'name': Strings['mapCustom']
    }]
});
Ext['define']('Traccar.store.DistanceUnits', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name', 'factor'],
    'data': [{
        'key': 'km',
        'name': Strings['sharedKm'],
        'factor': 0.001
    }, {
        'key': 'mi',
        'name': Strings['sharedMi'],
        'factor': 0.000621371
    }, {
        'key': 'nmi',
        'name': Strings['sharedNmi'],
        'factor': 0.000539957
    }],
    'convertValue': function (_0x1ec326, _0x3a3ac1, _0x106e6e) {
        _0x3a3ac1 || (_0x3a3ac1 = 'km');
        _0x3a3ac1 = this['findRecord']('key', _0x3a3ac1);
        return _0x106e6e ? _0x1ec326 / _0x3a3ac1['get']('factor') : _0x1ec326 * _0x3a3ac1['get']('factor');
    },
    'formatValue': function (_0x36c1cf, _0x242b7c, _0x14fac3) {
        var _0x1ba7ab;
        _0x242b7c || (_0x242b7c = 'km');
        _0x1ba7ab = this['findRecord']('key', _0x242b7c);
        return (_0x14fac3 ? this['convertValue'](_0x36c1cf, _0x242b7c) : _0x36c1cf)['toFixed'](0x2) + '\x20' + _0x1ba7ab['get']('name');
    }
});
Ext['define']('Traccar.store.SpeedUnits', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name', 'factor'],
    'data': [{
        'key': 'km',
        'name': Strings['sharedKn'],
        'factor': 0x1
    }, {
        'key': 'kmh',
        'name': Strings['sharedKmh'],
        'factor': 1.852
    }, {
        'key': 'mph',
        'name': Strings['sharedMph'],
        'factor': 1.15078
    }],
    'convertValue': function (_0xa11b93, _0x147511, _0x4b11a1) {
        _0x147511 || (_0x147511 = 'km');
        _0x147511 = this['findRecord']('key', _0x147511);
        return _0x4b11a1 ? _0xa11b93 / _0x147511['get']('factor') : _0xa11b93 * _0x147511['get']('factor');
    },
    'formatValue': function (_0x51fbe0, _0x43697c, _0x4b9402) {
        var _0x5bfd12;
        _0x43697c || (_0x43697c = 'km');
        _0x5bfd12 = this['findRecord']('key', _0x43697c);
        return (_0x4b9402 ? this['convertValue'](_0x51fbe0, _0x43697c) : _0x51fbe0)['toFixed'](0x1) + '\x20' + _0x5bfd12['get']('name');
    }
});
Ext['define']('Traccar.store.CoordinateFormats', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name'],
    'data': [{
        'key': 'dd',
        'name': Strings['sharedDecimalDegrees']
    }, {
        'key': 'ddm',
        'name': Strings['sharedDegreesDecimalMinutes']
    }, {
        'key': 'dms',
        'name': Strings['sharedDegreesMinutesSeconds']
    }],
    'formatValue': function (_0x469267, _0x641023, _0x3a929d) {
        var _0x9dfb2c;
        _0x469267 = 'latitude' === _0x469267 ? 0x0 <= _0x641023 ? 'N' : 'S' : 0x0 <= _0x641023 ? 'E' : 'W';
        switch (_0x3a929d) {
            case 'ddm':
                return _0x641023 = Math['abs'](_0x641023),
                    _0x3a929d = Math['floor'](_0x641023),
                    _0x3a929d + '°\x20' + (0x3c * (_0x641023 - _0x3a929d))['toFixed'](Traccar['Style']['coordinatePrecision']) + '\x27\x20' + _0x469267;
            case 'dms':
                return _0x641023 = Math['abs'](_0x641023),
                    _0x3a929d = Math['floor'](_0x641023),
                    _0x9dfb2c = Math['floor'](0x3c * (_0x641023 - _0x3a929d)),
                    _0x641023 = Math['round'](0xe10 * (_0x641023 - _0x3a929d - _0x9dfb2c / 0x3c)),
                    _0x3a929d + '°\x20' + _0x9dfb2c + '\x27\x20' + _0x641023 + '\x22\x20' + _0x469267;
            default:
                return _0x641023['toFixed'](Traccar['Style']['coordinatePrecision']) + '°';
        }
    }
});
Ext['define']('Traccar.store.CommandTypes', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownCommand',
    'proxy': {
        'type': 'rest',
        'url': 'api/commands/types',
        'listeners': {
            'exception': function (_0x294c02, _0x2ba5a6) {
                Traccar['app']['showError'](_0x2ba5a6);
            }
        }
    }
});
Ext['define']('Traccar.store.TimeUnits', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name', 'factor'],
    'data': [{
        'key': 's',
        'name': Strings['sharedSecondAbbreviation'],
        'factor': 0x1
    }, {
        'key': 'm',
        'name': Strings['sharedMinuteAbbreviation'],
        'factor': 0x3c
    }, {
        'key': 'h',
        'name': Strings['sharedHourAbbreviation'],
        'factor': 0xe10
    }],
    'convertValue': function (_0x429def, _0x304aea, _0x436760) {
        _0x304aea || (_0x304aea = '');
        _0x304aea = this['findRecord']('key', _0x304aea);
        return _0x436760 ? _0x429def * _0x304aea['get']('factor') : _0x429def / _0x304aea['get']('factor');
    }
});
Ext['define']('Traccar.store.Languages', {
    'extend': Ext['data']['Store'],
    'fields': ['code', 'name'],
    'data': function () {
        var _0x16047e, _0x43872b = [];
        for (_0x16047e in Locale['languages'])
            Locale['languages']['hasOwnProperty'](_0x16047e) && _0x43872b['push']({
                'code': _0x16047e,
                'name': Locale['languages'][_0x16047e]['name']
            });
        return _0x43872b;
    }()
});
Ext['define']('Traccar.store.Events', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Event',
    'trackRemoved': !0x1,
    'proxy': {
        'type': 'rest',
        'url': 'api/events'
    }
});
Ext['define']('Traccar.store.Geofences', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Geofence',
    'proxy': {
        'type': 'rest',
        'url': 'api/geofences',
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext.define('Traccar.store.AllGeofences', { extend: Ext.data.Store, model: 'Traccar.model.Geofence', proxy: { type: 'rest', url: 'api/geofences', extraParams: { all: !0 } } });
Ext.define('Traccar.store.Notifications', { extend: Ext.data.Store, model: 'Traccar.model.Notification', proxy: { type: 'rest', url: 'api/notifications', writer: { writeAllFields: !0 } } });
Ext.define('Traccar.store.AllNotifications', { extend: Ext.data.Store, model: 'Traccar.model.Notification', proxy: { type: 'rest', url: 'api/notifications', extraParams: { all: !0 } } });
Ext.define('Traccar.store.GeofenceTypes', { extend: Ext.data.Store, fields: ['key', 'name'], data: [{ key: 'Polygon', name: Strings.mapShapePolygon }, { key: 'Circle', name: Strings.mapShapeCircle }, { key: 'LineString', name: Strings.mapShapePolyline }] });
Ext.define('Traccar.store.ReportRoute', { extend: Ext.data.Store, model: 'Traccar.model.Position', proxy: { type: 'rest', url: 'api/reports/route', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportEvents', { extend: Ext.data.Store, model: 'Traccar.model.Event', proxy: { type: 'rest', url: 'api/reports/events', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportTrips', { extend: Ext.data.Store, model: 'Traccar.model.ReportTrip', proxy: { type: 'rest', url: 'api/reports/trips', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportStops', { extend: Ext.data.Store, model: 'Traccar.model.ReportStop', proxy: { type: 'rest', url: 'api/reports/stops', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });
Ext.define('Traccar.store.ReportSummary', { extend: Ext.data.Store, model: 'Traccar.model.ReportSummary', proxy: { type: 'rest', url: 'api/reports/summary', timeout: Traccar.Style.reportTimeout, headers: { Accept: 'application/json' }, listeners: { exception: function (proxy, exception) { Traccar.app.showError(exception) } } } });



Ext['define']('Traccar.store.ReportTypes', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name'],
    'data': [{
        'key': 'route',
        'name': Strings['reportRoute']
    }, {
        'key': 'events',
        'name': Strings['reportEvents']
    }, {
        'key': 'trips',
        'name': Strings['reportTrips']
    }, {
        'key': 'stops',
        'name': Strings['reportStops']
    }, {
        'key': 'summary',
        'name': Strings['reportSummary']
    }, {
        'key': 'chart',
        'name': Strings['reportChart']
    }]
});
Ext['define']('Traccar.store.ReportEventTypes', {
    'extend': Ext['data']['Store'],
    'fields': ['type', 'name'],
    'statics': {
        'allEvents': 'allEvents'
    }
});
Ext['define']('Traccar.store.ReportChartTypes', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name'],
    'data': [{
        'key': 'speed',
        'name': Strings['positionSpeed']
    }, {
        'key': 'accuracy',
        'name': Strings['positionAccuracy']
    }, {
        'key': 'altitude',
        'name': Strings['positionAltitude']
    }]
});
Ext['define']('Traccar.store.ReportPeriods', {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name'],
    'data': [{
        'key': 'custom',
        'name': Strings['reportCustom']
    }, {
        'key': 'today',
        'name': Strings['reportToday']
    }, {
        'key': _0xc11a('0x130'),
        'name': Strings[_0xc11a('0x131')]
    }, {
        'key': 'thisWeek',
        'name': Strings[_0xc11a('0x132')]
    }, {
        'key': _0xc11a('0x133'),
        'name': Strings[_0xc11a('0x134')]
    }, {
        'key': _0xc11a('0x135'),
        'name': Strings[_0xc11a('0x136')]
    }, {
        'key': _0xc11a('0x137'),
        'name': Strings[_0xc11a('0x138')]
    }]
});
Ext['define']('Traccar.model.Statistics', {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'captureTime',
        'type': 'date',
        'dateFormat': 'c'
    }, {
        'name': _0xc11a('0x13a'),
        'type': 'int'
    }, {
        'name': _0xc11a('0x13b'),
        'type': 'int'
    }, {
        'name': _0xc11a('0x13c'),
        'type': 'int'
    }, {
        'name': _0xc11a('0x13d'),
        'type': 'int'
    }, {
        'name': 'messagesStored',
        'type': 'int'
    }, {
        'name': _0xc11a('0x13e'),
        'type': 'int'
    }, {
        'name': 'smsSent',
        'type': 'int'
    }, {
        'name': 'geocoderRequests',
        'type': 'int'
    }, {
        'name': 'geolocationRequests',
        'type': 'int'
    }, {
        'name': 'attributes'
    }]
});
Ext['define']('Traccar.store.Statistics', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Statistics',
    'proxy': {
        'type': 'rest',
        'url': 'api/statistics'
    }
});
Ext['define']('Traccar.store.DeviceImages', {
    'extend': Ext['data']['Store'],
    'fields': 'key\x20name\x20svg\x20fillId\x20rotateId\x20scaleId'['split']('\x20'),
    'data': function () {
        var _0x4166da, _0x541941, _0x50822c = [];
        for (_0x4166da = 0x0; _0x4166da < window['Images']['length']; _0x4166da++)
            _0x541941 = window['Images'][_0x4166da],
                _0x50822c['push']({
                    'key': _0x541941,
                    'name': Strings['category' + _0x541941['charAt'](0x0)['toUpperCase']() + _0x541941['slice'](0x1)],
                    'svg': document['getElementById'](_0x541941 + 'Svg')['contentDocument'],
                    'fillId': 'arrow' === _0x541941 ? 'arrow' : 'background',
                    'rotateId': 'arrow' === _0x541941 ? 'arrow' : 'background',
                    'scaleId': 'arrow' === _0x541941 ? 'arrow' : 'layer1'
                });
        return _0x50822c;
    }()
});

Ext.define('Traccar.store.Calendars', { extend: Ext.data.Store, model: 'Traccar.model.Calendar', proxy: { type: 'rest', url: 'api/calendars', writer: { writeAllFields: !0 } } }); Ext.define('Traccar.store.AllCalendars', { extend: Ext.data.Store, model: 'Traccar.model.Calendar', proxy: { type: 'rest', url: 'api/calendars', extraParams: { all: !0 } } });
Ext.define('Traccar.store.AllTimezones', {
    extend: Ext.data.Store, fields: ['key'], sorters: { property: 'key', direction: 'ASC' }, data: [{ key: 'Africa/Abidjan' }, { key: 'Africa/Accra' }, { key: 'Africa/Bissau' }, { key: 'Africa/Casablanca' }, { key: 'Africa/El_Aaiun' }, { key: 'Africa/Monrovia' }, { key: 'America/Danmarkshavn' }, { key: 'Antarctica/Troll' }, { key: 'Atlantic/Canary' }, { key: 'Atlantic/Faroe' }, { key: 'Atlantic/Madeira' }, { key: 'Atlantic/Reykjavik' }, { key: 'GMT' }, { key: 'Etc/GMT' }, { key: 'Etc/UCT' }, { key: 'Etc/UTC' }, { key: 'Europe/Dublin' }, { key: 'Europe/Lisbon' },
    { key: 'Europe/London' }, { key: 'WET' }, { key: 'Africa/Algiers' }, { key: 'Africa/Ceuta' }, { key: 'Africa/Lagos' }, { key: 'Africa/Ndjamena' }, { key: 'Africa/Tunis' }, { key: 'Africa/Windhoek' }, { key: 'CET' }, { key: 'Etc/GMT-1' }, { key: 'Europe/Amsterdam' }, { key: 'Europe/Andorra' }, { key: 'Europe/Belgrade' }, { key: 'Europe/Berlin' }, { key: 'Europe/Brussels' }, { key: 'Europe/Budapest' }, { key: 'Europe/Copenhagen' }, { key: 'Europe/Gibraltar' }, { key: 'Europe/Luxembourg' }, { key: 'Europe/Madrid' }, { key: 'Europe/Malta' }, { key: 'Europe/Monaco' }, { key: 'Europe/Oslo' },
    { key: 'Europe/Paris' }, { key: 'Europe/Prague' }, { key: 'Europe/Rome' }, { key: 'Europe/Stockholm' }, { key: 'Europe/Tirane' }, { key: 'Europe/Vienna' }, { key: 'Europe/Warsaw' }, { key: 'Europe/Zurich' }, { key: 'MET' }, { key: 'Africa/Cairo' }, { key: 'Africa/Johannesburg' }, { key: 'Africa/Maputo' }, { key: 'Africa/Tripoli' }, { key: 'Asia/Amman' }, { key: 'Asia/Beirut' }, { key: 'Asia/Damascus' }, { key: 'Asia/Gaza' }, { key: 'Asia/Hebron' }, { key: 'Asia/Jerusalem' }, { key: 'Asia/Nicosia' }, { key: 'EET' }, { key: 'Etc/GMT-2' }, { key: 'Europe/Athens' }, { key: 'Europe/Bucharest' },
    { key: 'Europe/Chisinau' }, { key: 'Europe/Helsinki' }, { key: 'Europe/Kaliningrad' }, { key: 'Europe/Kiev' }, { key: 'Europe/Riga' }, { key: 'Europe/Sofia' }, { key: 'Europe/Tallinn' }, { key: 'Europe/Uzhgorod' }, { key: 'Europe/Vilnius' }, { key: 'Europe/Zaporozhye' }, { key: 'Africa/Khartoum' }, { key: 'Africa/Nairobi' }, { key: 'Antarctica/Syowa' }, { key: 'Asia/Baghdad' }, { key: 'Asia/Famagusta' }, { key: 'Asia/Qatar' }, { key: 'Asia/Riyadh' }, { key: 'Etc/GMT-3' }, { key: 'Europe/Istanbul' }, { key: 'Europe/Kirov' }, { key: 'Europe/Minsk' }, { key: 'Europe/Moscow' }, { key: 'Europe/Simferopol' },
    { key: 'Europe/Volgograd' }, { key: 'Asia/Tehran' }, { key: 'Asia/Baku' }, { key: 'Asia/Dubai' }, { key: 'Asia/Tbilisi' }, { key: 'Asia/Yerevan' }, { key: 'Etc/GMT-4' }, { key: 'Europe/Astrakhan' }, { key: 'Europe/Samara' }, { key: 'Europe/Saratov' }, { key: 'Europe/Ulyanovsk' }, { key: 'Indian/Mahe' }, { key: 'Indian/Mauritius' }, { key: 'Indian/Reunion' }, { key: 'Asia/Kabul' }, { key: 'Antarctica/Mawson' }, { key: 'Asia/Aqtau' }, { key: 'Asia/Aqtobe' }, { key: 'Asia/Ashgabat' }, { key: 'Asia/Atyrau' }, { key: 'Asia/Dushanbe' }, { key: 'Asia/Karachi' }, { key: 'Asia/Oral' }, { key: 'Asia/Samarkand' },
    { key: 'Asia/Tashkent' }, { key: 'Asia/Yekaterinburg' }, { key: 'Etc/GMT-5' }, { key: 'Indian/Kerguelen' }, { key: 'Indian/Maldives' }, { key: 'Asia/Colombo' }, { key: 'Asia/Kolkata' }, { key: 'Asia/Kathmandu' }, { key: 'Antarctica/Vostok' }, { key: 'Asia/Almaty' }, { key: 'Asia/Bishkek' }, { key: 'Asia/Dhaka' }, { key: 'Asia/Omsk' }, { key: 'Asia/Qyzylorda' }, { key: 'Asia/Thimphu' }, { key: 'Asia/Urumqi' }, { key: 'Etc/GMT-6' }, { key: 'Indian/Chagos' }, { key: 'Asia/Yangon' }, { key: 'Indian/Cocos' }, { key: 'Antarctica/Davis' }, { key: 'Asia/Bangkok' }, { key: 'Asia/Barnaul' }, { key: 'Asia/Ho_Chi_Minh' },
    { key: 'Asia/Hovd' }, { key: 'Asia/Jakarta' }, { key: 'Asia/Krasnoyarsk' }, { key: 'Asia/Novokuznetsk' }, { key: 'Asia/Novosibirsk' }, { key: 'Asia/Pontianak' }, { key: 'Asia/Tomsk' }, { key: 'Etc/GMT-7' }, { key: 'Indian/Christmas' }, { key: 'Asia/Brunei' }, { key: 'Asia/Choibalsan' }, { key: 'Asia/Hong_Kong' }, { key: 'Asia/Irkutsk' }, { key: 'Asia/Kuala_Lumpur' }, { key: 'Asia/Kuching' }, { key: 'Asia/Macau' }, { key: 'Asia/Makassar' }, { key: 'Asia/Manila' }, { key: 'Asia/Shanghai' }, { key: 'Asia/Singapore' }, { key: 'Asia/Taipei' }, { key: 'Asia/Ulaanbaatar' }, { key: 'Australia/Perth' },
    { key: 'Etc/GMT-8' }, { key: 'Asia/Pyongyang' }, { key: 'Australia/Eucla' }, { key: 'Asia/Chita' }, { key: 'Asia/Dili' }, { key: 'Asia/Jayapura' }, { key: 'Asia/Khandyga' }, { key: 'Asia/Seoul' }, { key: 'Asia/Tokyo' }, { key: 'Asia/Yakutsk' }, { key: 'Etc/GMT-9' }, { key: 'Pacific/Palau' }, { key: 'Australia/Adelaide' }, { key: 'Australia/Broken_Hill' }, { key: 'Australia/Darwin' }, { key: 'Antarctica/DumontDUrville' }, { key: 'Asia/Ust-Nera' }, { key: 'Asia/Vladivostok' }, { key: 'Australia/Brisbane' }, { key: 'Australia/Currie' }, { key: 'Australia/Hobart' }, { key: 'Australia/Lindeman' },
    { key: 'Australia/Melbourne' }, { key: 'Australia/Sydney' }, { key: 'Etc/GMT-10' }, { key: 'Pacific/Chuuk' }, { key: 'Pacific/Guam' }, { key: 'Pacific/Port_Moresby' }, { key: 'Australia/Lord_Howe' }, { key: 'Antarctica/Casey' }, { key: 'Antarctica/Macquarie' }, { key: 'Asia/Magadan' }, { key: 'Asia/Sakhalin' }, { key: 'Asia/Srednekolymsk' }, { key: 'Etc/GMT-11' }, { key: 'Pacific/Bougainville' }, { key: 'Pacific/Efate' }, { key: 'Pacific/Guadalcanal' }, { key: 'Pacific/Kosrae' }, { key: 'Pacific/Norfolk' }, { key: 'Pacific/Noumea' }, { key: 'Pacific/Pohnpei' }, { key: 'Asia/Anadyr' },
    { key: 'Asia/Kamchatka' }, { key: 'Etc/GMT-12' }, { key: 'Pacific/Auckland' }, { key: 'Pacific/Fiji' }, { key: 'Pacific/Funafuti' }, { key: 'Pacific/Kwajalein' }, { key: 'Pacific/Majuro' }, { key: 'Pacific/Nauru' }, { key: 'Pacific/Tarawa' }, { key: 'Pacific/Wake' }, { key: 'Pacific/Wallis' }, { key: 'Pacific/Chatham' }, { key: 'Etc/GMT-13' }, { key: 'Pacific/Apia' }, { key: 'Pacific/Enderbury' }, { key: 'Pacific/Fakaofo' }, { key: 'Pacific/Tongatapu' }, { key: 'Etc/GMT-14' }, { key: 'Pacific/Kiritimati' }, { key: 'America/Scoresbysund' }, { key: 'Atlantic/Azores' }, { key: 'Atlantic/Cape_Verde' },
    { key: 'Etc/GMT+1' }, { key: 'America/Noronha' }, { key: 'Atlantic/South_Georgia' }, { key: 'Etc/GMT+2' }, { key: 'America/Araguaina' }, { key: 'America/Argentina/Buenos_Aires' }, { key: 'America/Argentina/Catamarca' }, { key: 'America/Argentina/Cordoba' }, { key: 'America/Argentina/Jujuy' }, { key: 'America/Argentina/La_Rioja' }, { key: 'America/Argentina/Mendoza' }, { key: 'America/Argentina/Rio_Gallegos' }, { key: 'America/Argentina/Salta' }, { key: 'America/Argentina/San_Juan' }, { key: 'America/Argentina/San_Luis' }, { key: 'America/Argentina/Tucuman' },
    { key: 'America/Argentina/Ushuaia' }, { key: 'America/Bahia' }, { key: 'America/Belem' }, { key: 'America/Cayenne' }, { key: 'America/Fortaleza' }, { key: 'America/Godthab' }, { key: 'America/Maceio' }, { key: 'America/Miquelon' }, { key: 'America/Montevideo' }, { key: 'America/Paramaribo' }, { key: 'America/Recife' }, { key: 'America/Santarem' }, { key: 'America/Sao_Paulo' }, { key: 'Antarctica/Rothera' }, { key: 'Atlantic/Stanley' }, { key: 'Etc/GMT+3' }, { key: 'America/St_Johns' }, { key: 'America/Asuncion' }, { key: 'America/Barbados' }, { key: 'America/Blanc-Sablon' },
    { key: 'America/Boa_Vista' }, { key: 'America/Campo_Grande' }, { key: 'America/Caracas' }, { key: 'America/Cuiaba' }, { key: 'America/Curacao' }, { key: 'America/Glace_Bay' }, { key: 'America/Goose_Bay' }, { key: 'America/Grand_Turk' }, { key: 'America/Guyana' }, { key: 'America/Halifax' }, { key: 'America/La_Paz' }, { key: 'America/Manaus' }, { key: 'America/Martinique' }, { key: 'America/Moncton' }, { key: 'America/Port_of_Spain' }, { key: 'America/Porto_Velho' }, { key: 'America/Puerto_Rico' }, { key: 'America/Santiago' }, { key: 'America/Santo_Domingo' }, { key: 'America/Thule' },
    { key: 'Antarctica/Palmer' }, { key: 'Atlantic/Bermuda' }, { key: 'Etc/GMT+4' }, { key: 'America/Atikokan' }, { key: 'America/Bogota' }, { key: 'America/Cancun' }, { key: 'America/Detroit' }, { key: 'America/Eirunepe' }, { key: 'America/Guayaquil' }, { key: 'America/Havana' }, { key: 'America/Indiana/Indianapolis' }, { key: 'America/Indiana/Marengo' }, { key: 'America/Indiana/Petersburg' }, { key: 'America/Indiana/Vevay' }, { key: 'America/Indiana/Vincennes' }, { key: 'America/Indiana/Winamac' }, { key: 'America/Iqaluit' }, { key: 'America/Jamaica' }, { key: 'America/Kentucky/Louisville' },
    { key: 'America/Kentucky/Monticello' }, { key: 'America/Lima' }, { key: 'America/Nassau' }, { key: 'America/New_York' }, { key: 'America/Nipigon' }, { key: 'America/Panama' }, { key: 'America/Pangnirtung' }, { key: 'America/Port-au-Prince' }, { key: 'America/Rio_Branco' }, { key: 'America/Thunder_Bay' }, { key: 'America/Toronto' }, { key: 'EST' }, { key: 'EST5EDT' }, { key: 'Etc/GMT+5' }, { key: 'America/Bahia_Banderas' }, { key: 'America/Belize' }, { key: 'America/Chicago' }, { key: 'America/Costa_Rica' }, { key: 'America/El_Salvador' }, { key: 'America/Guatemala' }, { key: 'America/Indiana/Knox' },
    { key: 'America/Indiana/Tell_City' }, { key: 'America/Managua' }, { key: 'America/Matamoros' }, { key: 'America/Menominee' }, { key: 'America/Merida' }, { key: 'America/Mexico_City' }, { key: 'America/Monterrey' }, { key: 'America/North_Dakota/Beulah' }, { key: 'America/North_Dakota/Center' }, { key: 'America/North_Dakota/New_Salem' }, { key: 'America/Rainy_River' }, { key: 'America/Rankin_Inlet' }, { key: 'America/Regina' }, { key: 'America/Resolute' }, { key: 'America/Swift_Current' }, { key: 'America/Tegucigalpa' }, { key: 'America/Winnipeg' }, { key: 'CST6CDT' },
    { key: 'Etc/GMT+6' }, { key: 'Pacific/Easter' }, { key: 'Pacific/Galapagos' }, { key: 'America/Boise' }, { key: 'America/Cambridge_Bay' }, { key: 'America/Chihuahua' }, { key: 'America/Creston' }, { key: 'America/Dawson_Creek' }, { key: 'America/Denver' }, { key: 'America/Edmonton' }, { key: 'America/Fort_Nelson' }, { key: 'America/Hermosillo' }, { key: 'America/Inuvik' }, { key: 'America/Mazatlan' }, { key: 'America/Ojinaga' }, { key: 'America/Phoenix' }, { key: 'America/Yellowknife' }, { key: 'Etc/GMT+7' }, { key: 'MST' }, { key: 'MST7MDT' }, { key: 'America/Dawson' }, { key: 'America/Los_Angeles' },
    { key: 'America/Tijuana' }, { key: 'America/Vancouver' }, { key: 'America/Whitehorse' }, { key: 'Etc/GMT+8' }, { key: 'Pacific/Pitcairn' }, { key: 'PST8PDT' }, { key: 'America/Anchorage' }, { key: 'America/Juneau' }, { key: 'America/Metlakatla' }, { key: 'America/Nome' }, { key: 'America/Sitka' }, { key: 'America/Yakutat' }, { key: 'Etc/GMT+9' }, { key: 'Pacific/Gambier' }, { key: 'Pacific/Marquesas' }, { key: 'America/Adak' }, { key: 'Etc/GMT+10' }, { key: 'HST' }, { key: 'Pacific/Honolulu' }, { key: 'Pacific/Rarotonga' }, { key: 'Pacific/Tahiti' }, { key: 'Etc/GMT+11' }, { key: 'Pacific/Niue' },
    { key: 'Pacific/Pago_Pago' }, { key: 'Etc/GMT+12' }]
 
});
Ext.define('Traccar.store.VisibleDevices', { extend: Ext.data.ChainedStore, source: 'Devices' }); Ext.define('Traccar.store.DeviceStatuses', { extend: Ext.data.Store, fields: ['id', 'name', 'color'], data: [{ id: 'online', name: Strings.deviceStatusOnline, color: 'view-color-green' }, { id: 'offline', name: Strings.deviceStatusOffline, color: 'view-color-red' }, { id: 'unknown', name: Strings.deviceStatusUnknown, color: 'view-color-yellow' }] });
Ext.define('Traccar.store.CommonDeviceAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'speedLimit', name: Strings.attributeSpeedLimit, valueType: 'number', dataType: 'speed' }, { key: 'report.ignoreOdometer', name: Strings.attributeReportIgnoreOdometer, valueType: 'boolean' }] });
Ext.define('Traccar.store.DeviceAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'web.reportColor', name: Strings.attributeWebReportColor, valueType: 'color' }, { key: 'devicePassword', name: Strings.attributeDevicePassword, valueType: 'string' }, { key: 'processing.copyAttributes', name: Strings.attributeProcessingCopyAttributes, valueType: 'string' }, { key: 'decoder.timezone', name: Strings.sharedTimezone, valueType: 'string', dataType: 'timezone' }] });
Ext.define('Traccar.store.GeofenceAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', proxy: 'memory', data: [{ key: 'color', name: Strings.attributeColor, valueType: 'color' }, { key: 'speedLimit', name: Strings.attributeSpeedLimit, valueType: 'number', dataType: 'speed' }, { key: 'polylineDistance', name: Strings.attributePolylineDistance, valueType: 'number', dataType: 'distance' }] });
Ext.define('Traccar.store.GroupAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'processing.copyAttributes', name: Strings.attributeProcessingCopyAttributes, valueType: 'string' }, { key: 'decoder.timezone', name: Strings.sharedTimezone, valueType: 'string', dataType: 'timezone' }] }); Ext.define('Traccar.store.ServerAttributes', { extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [] });
Ext.define('Traccar.store.CommonUserAttributes', {extend: Ext.data.Store, model: 'Traccar.model.KnownAttribute', data: [{ key: 'web.liveRouteLength', name: Strings.attributeWebLiveRouteLength, valueType: 'number', allowDecimals: !1 }, { key: 'web.selectZoom', name: Strings.attributeWebSelectZoom, valueType: 'number', allowDecimals: !1, minValue: Traccar.Style.mapDefaultZoom, maxValue: Traccar.Style.mapMaxZoom }, {key: 'web.maxZoom', name: Strings.attributeWebMaxZoom, valueType: 'number', allowDecimals: !1, minValue: Traccar.Style.mapDefaultZoom,maxValue: Traccar.Style.mapMaxZoom}, { key: 'ui.disableReport', name: Strings.attributeUiDisableReport, valueType: 'boolean' }, { key: 'ui.disableEvents', name: Strings.attributeUiDisableEvents, valueType: 'boolean' }, {key: 'ui.disableWhats',name: DisableWhatsApp,valueType: 'boolean'},{ key: 'ui.disableVehicleFetures', name: Strings.attributeUiDisableVehicleFetures, valueType: 'boolean' }, { key: 'ui.disableDrivers', name: Strings.attributeUiDisableDrivers, valueType: 'boolean' }, { key: 'ui.disableComputedAttributes', name: Strings.attributeUiDisableComputedAttributes, valueType: 'boolean' }, {key: 'ui.disableCalendars',name: Strings.attributeUiDisableCalendars, valueType: 'boolean'}, { key: 'ui.disableMaintenances', name: Strings.attributeUiDisableMaintenances, valueType: 'boolean' }, { key: 'ui.hidePositionAttributes', name: Strings.attributeUiHidePositionAttributes, valueType: 'string' }, { key: 'distanceUnit', name: Strings.settingsDistanceUnit, valueType: 'string', dataType: 'distanceUnit' }, { key: 'speedUnit', name: Strings.settingsSpeedUnit, valueType: 'string', dataType: 'speedUnit' }, {key: 'volumeUnit', name: Strings.settingsVolumeUnit, valueType: 'string',dataType: 'volumeUnit'}, { key: 'timezone', name: Strings.sharedTimezone, valueType: 'string', dataType: 'timezone' }]});




Ext['define']('Traccar.store.UserAttributes', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownAttribute',
    'data': [{
        'key': 'mail.smtp.host',
        'name': Strings[_0xc11a('0x29d')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x29e'),
        'name': Strings[_0xc11a('0x29f')],
        'valueType': 'number',
        'allowDecimals': !0x1,
        'minValue': 0x1,
        'maxValue': 0xffff
    }, {
        'key': _0xc11a('0x2a0'),
        'name': Strings[_0xc11a('0x2a1')],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2a2'),
        'name': Strings[_0xc11a('0x2a3')],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2a4'),
        'name': Strings[_0xc11a('0x2a5')],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2a6'),
        'name': Strings['attributeMailSmtpSslTrust'],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2a7'),
        'name': Strings[_0xc11a('0x2a8')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2a9'),
        'name': Strings['attributeMailSmtpFrom'],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2aa'),
        'name': Strings['attributeMailSmtpAuth'],
        'valueType': 'boolean'
    }, {
        'key': 'mail.smtp.username',
        'name': Strings[_0xc11a('0x2ab')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2ac'),
        'name': Strings[_0xc11a('0x2ad')],
        'valueType': 'string'
    }]
});
Ext['define'](_0xc11a('0x2ae'), {
    'extend': Ext['data']['Model'],
    'identifier': 'negative',
    'fields': [{
        'name': 'id',
        'type': 'int'
    }, {
        'name': 'description',
        'type': 'string'
    }, {
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'attribute',
        'type': 'string'
    }, {
        'name': _0xc11a('0x2af'),
        'type': 'string'
    }]
});
Ext['define']('Traccar.store.ComputedAttributes', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.ComputedAttribute',
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x2b0'),
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x2b1'), {
    'extend': Ext['data']['Store'],
    'model': _0xc11a('0x2ae'),
    'proxy': {
        'type': 'rest',
        'url': 'api/attributes/computed',
        'extraParams': {
            'all': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x2b2'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownAttribute',
    'proxy': 'memory',
    'data': [{
        'key': _0xc11a('0x2b3'),
        'name': Strings[_0xc11a('0x2b4')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2b5'),
        'name': Strings[_0xc11a('0x2b6')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2b7'),
        'name': Strings[_0xc11a('0x2b8')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2b9'),
        'name': Strings['positionVdop'],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2ba'),
        'name': Strings[_0xc11a('0x2bb')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2bc'),
        'name': Strings[_0xc11a('0x2bd')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2be'),
        'name': Strings[_0xc11a('0x2bf')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2c0'),
        'name': Strings[_0xc11a('0x2c1')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2c2'),
        'name': Strings[_0xc11a('0x2c3')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2c4'),
        'name': Strings[_0xc11a('0x2c5')],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2c6'),
        'name': Strings[_0xc11a('0x2c7')],
        'valueType': 'string'
    }, {
        'key': 'alarm',
        'name': Strings[_0xc11a('0x2c8')],
        'valueType': 'string'
    }, {
        'key': 'status',
        'name': Strings['positionStatus'],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2c9'),
        'name': Strings[_0xc11a('0x2ca')],
        'valueType': 'number',
        'dataType': 'distance'
    }, {
        'key': 'serviceOdometer',
        'name': Strings[_0xc11a('0x2cb')],
        'valueType': 'number',
        'dataType': 'distance'
    }, {
        'key': _0xc11a('0x2cc'),
        'name': Strings[_0xc11a('0x2cd')],
        'valueType': 'number',
        'dataType': 'distance'
    }, {
        'key': 'hours',
        'name': Strings[_0xc11a('0x2ce')],
        'valueType': 'number',
        'dataType': 'hours'
    }, {
        'key': _0xc11a('0x2cf'),
        'name': Strings[_0xc11a('0x2d0')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2d1'),
        'name': Strings[_0xc11a('0x2d2')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2d3'),
        'name': Strings[_0xc11a('0x2d4')],
        'valueType': 'string'
    }, {
        'key': 'power',
        'name': Strings['positionPower'],
        'valueType': 'number',
        'dataType': 'voltage'
    }, {
        'key': _0xc11a('0x2d5'),
        'name': Strings[_0xc11a('0x2d6')],
        'valueType': 'number',
        'dataType': 'voltage'
    }, {
        'key': _0xc11a('0x2d7'),
        'name': Strings[_0xc11a('0x2d8')],
        'valueType': 'number',
        'dataType': 'percentage'
    }, {
        'key': _0xc11a('0x2d9'),
        'name': Strings[_0xc11a('0x2da')],
        'valueType': 'number',
        'dataType': 'volume'
    }, {
        'key': 'fuelConsumption',
        'name': Strings[_0xc11a('0x2db')],
        'valueType': 'number',
        'dataType': 'consumption'
    }, {
        'key': 'versionFw',
        'name': Strings[_0xc11a('0x2dc')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2dd'),
        'name': Strings['positionVersionHw'],
        'valueType': 'string'
    }, {
        'key': 'type',
        'name': Strings[_0xc11a('0x2de')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2df'),
        'name': Strings[_0xc11a('0x2e0')],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2e1'),
        'name': Strings['positionFlags'],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2e2'),
        'name': Strings['positionCharge'],
        'valueType': 'boolean'
    }, {
        'key': 'ip',
        'name': Strings[_0xc11a('0x2e3')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2e4'),
        'name': Strings['positionArchive'],
        'valueType': 'boolean'
    }, {
        'key': 'distance',
        'name': Strings[_0xc11a('0x2e5')],
        'valueType': 'number',
        'dataType': 'distance'
    }, {
        'key': _0xc11a('0x2e6'),
        'name': Strings[_0xc11a('0x2e7')],
        'valueType': 'number',
        'dataType': 'distance'
    }, {
        'key': _0xc11a('0x2e8'),
        'name': Strings[_0xc11a('0x2e9')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2ea'),
        'name': Strings[_0xc11a('0x2eb')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2ec'),
        'name': Strings[_0xc11a('0x2ed')],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2ee'),
        'name': Strings[_0xc11a('0x2ef')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2f0'),
        'name': Strings['positionMotion'],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2f1'),
        'name': Strings[_0xc11a('0x2f2')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2f3'),
        'name': Strings[_0xc11a('0x2f4')],
        'valueType': 'string'
    }, {
        'key': 'acceleration',
        'name': Strings[_0xc11a('0x2f5')],
        'valueType': 'number'
    }, {
        'key': _0xc11a('0x2f6'),
        'name': Strings[_0xc11a('0x2f7')],
        'valueType': 'number',
        'dataType': 'temperature'
    }, {
        'key': _0xc11a('0x2f8'),
        'name': Strings[_0xc11a('0x2f9')],
        'valueType': 'string'
    }, {
        'key': 'command',
        'name': Strings[_0xc11a('0x2fa')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2fb'),
        'name': Strings['positionBlocked'],
        'valueType': 'boolean'
    }, {
        'key': _0xc11a('0x2fc'),
        'name': Strings[_0xc11a('0x2fd')],
        'valueType': 'string'
    }, {
        'key': _0xc11a('0x2fe'),
        'name': Strings[_0xc11a('0x2ff')],
        'valueType': 'number',
        'dataType': 'speed'
    }, {
        'key': _0xc11a('0x300'),
        'name': Strings[_0xc11a('0x301')],
        'valueType': 'number',
        'dataType': 'distance'
    }, {
        'key': 'result',
        'name': Strings['eventCommandResult'],
        'valueType': 'string'
    }, {
        'key': 'driverUniqueId',
        'name': Strings[_0xc11a('0x302')],
        'valueType': 'string',
        'dataType': 'driverUniqueId'
    }],
    'getAttributeName': function (_0x2bda2f, _0x595713) {
        var _0x2829b8 = this['getById'](_0x2bda2f);
        return _0x2829b8 ? _0x2829b8['get']('name') : _0x595713 ? _0x2bda2f[_0xc11a('0x303')](/^./, function (_0x2bda2f) {
            return _0x2bda2f['toUpperCase']();
        }) : _0x2bda2f;
    },
    'getAttributeDataType': function (_0x367dfb) {
        return (_0x367dfb = this['getById'](_0x367dfb)) && _0x367dfb['get']('hoursConverter') ? _0x367dfb['get']('hoursConverter') : null;
    }
});
Ext['define'](_0xc11a('0x304'), {
    'extend': Ext['data']['Store'],
    'fields': ['id', 'name'],
    'proxy': 'memory',
    'data': [{
        'id': 'string',
        'name': Strings[_0xc11a('0x305')]
    }, {
        'id': 'number',
        'name': Strings[_0xc11a('0x306')]
    }, {
        'id': 'boolean',
        'name': Strings[_0xc11a('0x307')]
    }]
});
Ext['define']('Traccar.store.Drivers', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Driver',
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x308'),
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x309'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Driver',
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x308'),
        'extraParams': {
            'all': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x30a'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownCommand',
    'data': [{
        'type': 'custom',
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x30c'),
        'parameters': [{
            'key': _0xc11a('0x30d'),
            'name': Strings[_0xc11a('0x30e')],
            'valueType': 'number',
            'allowDecimals': !0x1,
            'minValue': 0x0,
            'dataType': _0xc11a('0x30d')
        }]
    }, {
        'type': _0xc11a('0x30f'),
        'parameters': [{
            'key': _0xc11a('0x310'),
            'name': Strings['commandTimezone'],
            'valueType': 'string',
            'dataType': 'timezone'
        }]
    }, {
        'type': _0xc11a('0x311'),
        'parameters': [{
            'key': 'phone',
            'name': Strings[_0xc11a('0x312')],
            'valueType': 'string'
        }, {
            'key': 'message',
            'name': Strings[_0xc11a('0x313')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x314'),
        'parameters': [{
            'key': 'phone',
            'name': Strings[_0xc11a('0x312')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x315'),
        'parameters': [{
            'key': _0xc11a('0x2b5'),
            'name': Strings[_0xc11a('0x316')],
            'valueType': 'number',
            'allowDecimals': !0x1,
            'minValue': 0x0
        }, {
            'key': 'phone',
            'name': Strings[_0xc11a('0x312')],
            'valueType': 'string'
        }]
    }, {
        'type': 'silenceTime',
        'parameters': [{
            'key': 'data',
            'name': Strings['commandData'],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x317'),
        'parameters': [{
            'key': 'data',
            'name': Strings['commandData'],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x318'),
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x319'),
        'parameters': [{
            'key': _0xc11a('0x2b5'),
            'name': Strings[_0xc11a('0x316')],
            'valueType': 'number',
            'allowDecimals': !0x1,
            'minValue': 0x0
        }, {
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x31a'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings['commandEnable'],
            'valueType': 'boolean'
        }]
    }, {
        'type': _0xc11a('0x31c'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings['commandEnable'],
            'valueType': 'boolean'
        }]
    }, {
        'type': _0xc11a('0x31d'),
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x31e'),
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': 'setConnection',
        'parameters': [{
            'key': _0xc11a('0x31f'),
            'name': Strings[_0xc11a('0x320')],
            'valueType': 'string'
        }, {
            'key': 'port',
            'name': Strings[_0xc11a('0x321')],
            'valueType': 'number',
            'allowDecimals': !0x1,
            'minValue': 0x1,
            'maxValue': 0xffff
        }]
    }, {
        'type': _0xc11a('0x322'),
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x323'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings[_0xc11a('0x324')],
            'valueType': 'boolean'
        }]
    }, {
        'type': _0xc11a('0x325'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings[_0xc11a('0x324')],
            'valueType': 'boolean'
        }]
    }, {
        'type': _0xc11a('0x326'),
        'parameters': [{
            'key': _0xc11a('0x327'),
            'name': Strings[_0xc11a('0x328')],
            'valueType': 'number',
            'allowDecimals': !0x1,
            'minValue': 0x0
        }]
    }, {
        'type': 'alarmBattery',
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings[_0xc11a('0x324')],
            'valueType': 'boolean'
        }]
    }, {
        'type': _0xc11a('0x329'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings['commandEnable'],
            'valueType': 'boolean'
        }]
    }, {
        'type': _0xc11a('0x32a'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings[_0xc11a('0x324')],
            'valueType': 'boolean'
        }]
    }, {
        'type': 'alarmClock',
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x32b'),
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }, {
        'type': _0xc11a('0x32c'),
        'parameters': [{
            'key': _0xc11a('0x31b'),
            'name': Strings[_0xc11a('0x324')],
            'valueType': 'boolean'
        }]
    }, {
        'type': 'alarmVibration',
        'parameters': [{
            'key': 'data',
            'name': Strings[_0xc11a('0x30b')],
            'valueType': 'string'
        }]
    }]
});
Ext['define'](_0xc11a('0x32d'), {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name', _0xc11a('0x32e'), 'factor'],
    'data': [{
        'key': _0xc11a('0x32f'),
        'name': Strings[_0xc11a('0x330')],
        'fullName': Strings[_0xc11a('0x331')],
        'factor': 0x1
    }, {
        'key': _0xc11a('0x332'),
        'name': Strings[_0xc11a('0x333')],
        'fullName': Strings['sharedImpGallon'],
        'factor': 4.546
    }, {
        'key': _0xc11a('0x334'),
        'name': Strings[_0xc11a('0x333')],
        'fullName': Strings['sharedUsGallon'],
        'factor': 3.785
    }],
    'convertValue': function (_0x4707f9, _0x2278ff, _0x3337a8) {
        _0x2278ff || (_0x2278ff = 'ltr');
        _0x2278ff = this['findRecord']('key', _0x2278ff);
        return _0x3337a8 ? _0x4707f9 * _0x2278ff['get']('factor') : _0x4707f9 / _0x2278ff['get']('factor');
    },
    'formatValue': function (_0x4d28ff, _0x3442d0, _0x2a42f9) {
        var _0x111dae;
        _0x3442d0 || (_0x3442d0 = _0xc11a('0x32f'));
        _0x111dae = this['findRecord']('key', _0x3442d0);
        return (_0x2a42f9 ? this['convertValue'](_0x4d28ff, _0x3442d0) : _0x4d28ff)['toFixed'](0x1) + '\x20' + _0x111dae['get']('name');
    }
});
Ext['define'](_0xc11a('0x335'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownCommand',
    'proxy': {
        'type': 'rest',
        'url': 'api/commands/types',
        'listeners': {
            'exception': function (_0x20ebd4, _0x3d4d22) {
                Traccar['app']['showError'](_0x3d4d22);
            }
        }
    }
});
Ext['define']('Traccar.store.Commands', {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Command',
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x336'),
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x337'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Command',
    'proxy': {
        'type': 'rest',
        'url': 'api/commands',
        'extraParams': {
            'all': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x338'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Command',
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x339'),
        'listeners': {
            'exception': function (_0x1327a6, _0x560951) {
                Traccar['app']['showError'](_0x560951);
            }
        }
    }
});
Ext['define'](_0xc11a('0x33a'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownNotification',
    'proxy': {
        'type': 'rest',
        'url': 'api/notifications/types',
        'listeners': {
            'exception': function (_0x2a71c5, _0x30a471) {
                Traccar['app']['showError'](_0x30a471);
            }
        }
    }
});
Ext['define'](_0xc11a('0x33b'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Maintenance',
    'proxy': {
        'type': 'rest',
        'url': 'api/maintenances',
        'writer': {
            'writeAllFields': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x33c'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.Maintenance',
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x33d'),
        'extraParams': {
            'all': !0x0
        }
    }
});
Ext['define'](_0xc11a('0x33e'), {
    'extend': Ext['data']['Store'],
    'model': 'Traccar.model.KnownAttribute'
});
Ext['define'](_0xc11a('0x33f'), {
    'extend': Ext['data']['Store'],
    'fields': ['key', 'name', _0xc11a('0x32e')],
    'data': [{
        'key': 'h',
        'name': Strings['sharedHourAbbreviation'],
        'fullName': Strings['sharedHour']
    }],
    'convertValue': function (_0x3aca7f, _0x4e725f, _0x510099) {
        return _0x510099 ? 0x36ee80 * _0x3aca7f : _0x3aca7f / 0x36ee80;
    },
    'formatValue': function (_0x32c50a, _0xae9a54, _0x30d5bb) {
        _0x30d5bb ? (_0xae9a54 = Math['floor'](_0x32c50a / 0x36ee80),
            _0x32c50a = Math['floor'](_0x32c50a % 0x36ee80 / 0xea60)) : (_0xae9a54 = Math['floor'](_0x32c50a),
                _0x32c50a = Math['floor'](_0x32c50a % 0x1 * 0x3c));
        return _0xae9a54 + '\x20' + Strings['sharedHourAbbreviation'] + '\x20' + _0x32c50a + '\x20' + Strings['sharedMinuteAbbreviation'];
    }
});
Ext['define']('Traccar.model.KnownNotificator', {
    'extend': Ext['data']['Model'],
    'idProperty': 'type',
    'fields': [{
        'name': 'type',
        'type': 'string'
    }, {
        'name': 'name',
        'convert': function (_0x510511, _0x3517c5) {
            return Traccar['app']['getNotificatorString'](_0x3517c5['get']('type'));
        },
        'depends': ['type']
    }]
});
Ext['define']('Traccar.store.AllNotificators', {
    'extend': Ext['data']['Store'],
    'model': _0xc11a('0x340'),
    'proxy': {
        'type': 'rest',
        'url': _0xc11a('0x341'),
        'listeners': {
            'exception': function (_0x184b4d, _0x1cb14c) {
                Traccar['app']['showError'](_0x1cb14c);
            }
        }
    }
});
Ext['define']('Traccar.view.dialog.Base', {
    'extend': Ext['window'][_0xc11a('0x343')],
    'bodyPadding': Traccar['Style'][_0xc11a('0x344')],
    'resizable': !0x1,
    'scrollable': !0x0,
    'constrain': !0x0,
    'initComponent': function () {
        window['innerHeight'] && (this[_0xc11a('0x345')] = window['innerHeight'] - 0x2 * Traccar['Style'][_0xc11a('0x344')]);
        this['callParent']();
    }
});
Ext['define'](_0xc11a('0x346'), {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.register',
    'onCreateClick': function () {
        var _0x592950 = this['lookupReference']('form');
        _0x592950['isValid']() && Ext['Ajax']['request']({
            'scope': this,
            'method': 'POST',
            'url': 'api/users',
            'jsonData': _0x592950['getValues'](),
            'callback': this[_0xc11a('0x34d')]
        });
    },
    'onCreateReturn': function (_0x105dcc, _0x49c997, _0x59f1d0) {
        _0x49c997 ? (this[_0xc11a('0x34e')](),
            Traccar['app'][_0xc11a('0x34f')](Strings[_0xc11a('0x350')])) : Traccar['app']['showError'](_0x59f1d0);
    }
});
Ext['define'](_0xc11a('0x351'), {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': _0xc11a('0x354'),
    'title': Strings[_0xc11a('0x355')],
    'items': {
        'xtype': 'form',
        'reference': 'form',
        'jsonSubmit': !0x0,
        'items': [{
            'xtype': _0xc11a('0x356'),
            'name': 'name',
            'fieldLabel': Strings[_0xc11a('0x357')],
            'allowBlank': !0x1
        }, {
            'xtype': _0xc11a('0x356'),
            'name': _0xc11a('0x358'),
            'fieldLabel': Strings[_0xc11a('0x359')],
            'validator': function (_0x675e74) {
                return /(.+)@(.+)\.(.{2,})/[_0xc11a('0x35a')](_0x675e74) ? !0x0 : Ext['form'][_0xc11a('0x35b')][_0xc11a('0x35c')]['emailText'];
            },
            'allowBlank': !0x1
        }, {
            'xtype': _0xc11a('0x356'),
            'name': _0xc11a('0x35d'),
            'fieldLabel': Strings[_0xc11a('0x35e')],
            'inputType': _0xc11a('0x35d'),
            'allowBlank': !0x1
        }]
    },
    'buttons': [{
        'text': Strings[_0xc11a('0x35f')],
        'handler': _0xc11a('0x360')
    }, {
        'text': Strings[_0xc11a('0x361')],
        'handler': 'closeView'
    }]
});

Ext.define('Traccar.view.dialog.LoginController', {
    extend: Ext.app.ViewController, alias: 'controller.login', init: function () { 
        //comentario para ver o que foi
        //this.lookupReference('registerButton').setDisabled(!Traccar.app.getServer().get('registration'));
         
        this.lookupReference('languageField').setValue(Locale.language) }, login: function () {
        var form = this.lookupReference('form'); 

        form.isValid() && (Ext.get('spinner-two').setVisible(!0), this.getView().setVisible(!1), Ext.Ajax.request({
            scope: this, method: 'POST', url: 'api/session', params: form.getValues(),
            callback: function (options, success, response) {
                Ext.get('spinner').setVisible(!1);

success ? (this.lookupReference('rememberField').getValue() && (options = Ext.util.Base64.encode(this.lookupReference('userField').getValue()), 
success = Ext.util.Base64.encode(this.lookupReference('passwordField').getValue()), 
Ext.util.Cookies.set('user', options, Ext.Date.add(new Date, Ext.Date.YEAR, 1)), 
Ext.util.Cookies.set('password', success, Ext.Date.add(new Date, Ext.Date.YEAR, 1))), 
Traccar.app.setUser(Ext.decode(response.responseText)),
this.fireViewEvent('login')) : (this.getView().setVisible(!0), 
401 === response.status ? Traccar.app.showError(Strings.loginFailed) : Traccar.app.showError(response.responseText))
        }
    }))
},

logout: function () { Ext.util.Cookies.clear('user'); 
Ext.util.Cookies.clear('password'); 
Ext.Ajax.request({ scope: this, method: 'DELETE', url: 'api/session', callback: function () { 
window.location.reload() } }) }, 
onSelectLanguage: function (selected) {var url, prefix; selected = selected.getValue(); 
url = window.location.href; 0 <= url.indexOf('locale\x3d') ? (prefix = url.substring(0, url.indexOf('locale')), url = url.substring(url.indexOf('locale')), url = url.substring(url.indexOf('\x3d') + 1), 
url = 0 <= url.indexOf('\x26') ? url.substring(url.indexOf('\x26')) : '', 
url = prefix + 'locale\x3d' + selected + url) : url = 0 > url.indexOf('?') ? url + ('?locale\x3d' + selected) : url + ('\x26locale\x3d' + selected); 
window.location.href = url
},
onAfterRender: function (field) { field.focus() }, onSpecialKey: function (field, e) { e.getKey() === e.ENTER && this.login() }, 
onLoginClick: function () {
    Ext.getElementById('submitButton').click();
    this.login()
}, onRegisterClick: function () { Ext.create('Traccar.view.dialog.Register').show() }
});


Ext['define'](_0xc11a('0x38b'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x38c')],
    'alias': _0xc11a('0x38d'),
    'controller': 'login',
    'header': !0x1,
    'closable': !0x1,
    'items': {
        'xtype': 'form',
        'reference': 'form',
        'autoEl': {
            'tag': 'form',
            'method': 'POST',
            'action': _0xc11a('0x38e'),
            'target': _0xc11a('0x38f')
        },
        'items': [{
            'xtype': _0xc11a('0x390'),
            'src': 'logo.png',
            'alt': Strings[_0xc11a('0x391')],
            'width': 0xf0,
            'height': 0x40,
            'style': {
                'display': _0xc11a('0x392'),
                'margin': _0xc11a('0x393')
            }
        }, {
            'xtype': _0xc11a('0x394'),
            'name': _0xc11a('0x366'),
            'fieldLabel': Strings[_0xc11a('0x395')],
            'store': _0xc11a('0x396'),
            'displayField': 'name',
            'valueField': 'code',
            'editable': !0x1,
            'submitValue': !0x1,
            'listeners': {
                'select': _0xc11a('0x397')
            },
            'reference': _0xc11a('0x364')
        }, {
            'xtype': _0xc11a('0x356'),
            'name': 'email',
            'reference': 'userField',
            'fieldLabel': Strings[_0xc11a('0x359')],
            'allowBlank': !0x1,
            'enableKeyEvents': !0x0,
            'listeners': {
                'specialKey': _0xc11a('0x398'),
                'afterrender': 'onAfterRender'
            },
            'inputAttrTpl': [_0xc11a('0x399')]
        }, {
            'xtype': _0xc11a('0x356'),
            'name': _0xc11a('0x35d'),
            'reference': 'passwordField',
            'fieldLabel': Strings[_0xc11a('0x35e')],
            'inputType': 'password',
            'allowBlank': !0x1,
            'enableKeyEvents': !0x0,
            'listeners': {
                'specialKey': _0xc11a('0x398')
            },
            'inputAttrTpl': ['autocomplete=\x22on\x22']
        }, {
            'xtype': _0xc11a('0x39a'),
            'inputValue': !0x0,
            'uncheckedValue': !0x1,
            'reference': 'rememberField',
            'fieldLabel': Strings[_0xc11a('0x39b')]
        }, {
            'xtype': _0xc11a('0x39c'),
            'html': _0xc11a('0x39d')
        }, {
            'xtype': _0xc11a('0x39c'),
            'html': _0xc11a('0x39e')
        }]
    },
    'buttons': [{
        'text': Strings[_0xc11a('0x39f')],
        'handler': _0xc11a('0x3a0')
    }]
});
Ext['define'](_0xc11a('0x3a1'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x3a2'),
    'init': function () {
        this['lookupReference'](_0xc11a('0x3a3'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableReport'));
        this['lookupReference']('eventsView')['setHidden'](Traccar['app']['getBooleanAttributePreference']('ui.disableEvents'));
    }
});
Ext['define'](_0xc11a('0x3a6'), {
    'extend': Ext[_0xc11a('0x3a7')][_0xc11a('0x3a8')],
    'xtype': _0xc11a('0x3a9'),
    'plugins': _0xc11a('0x3aa'),
    'viewConfig': {
        'enableTextSelection': !0x0,
        'getRowClass': function () {
            return this['enableTextSelection'] ? 'x-selectable' : '';
        }
    }
});
Ext['define']('Traccar.view.edit.ToolbarController', {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.toolbarController',
    'onAddClick': function () {
        var _0x31c836, _0xe0948d = Ext['create'](this[_0xc11a('0x3ac')]);
        _0xe0948d[_0xc11a('0x3ad')] = this['getView']()['getStore']();
        _0xe0948d[_0xc11a('0x3ad')] instanceof Ext['data']['ChainedStore'] && (_0xe0948d[_0xc11a('0x3ad')] = _0xe0948d['store'][_0xc11a('0x3ae')]());
        _0x31c836 = Ext['create'](this[_0xc11a('0x3af')]);
        _0x31c836[_0xc11a('0x3b0')]('form')[_0xc11a('0x3b1')](_0xe0948d);
        _0x31c836[_0xc11a('0x38a')]();
    },
    'onEditClick': function () {
        var _0x5c648a, _0x133d4e = this['getView']()['getSelectionModel']()[_0xc11a('0x3b2')]()[0x0];
        _0x5c648a = Ext['create'](this[_0xc11a('0x3af')]);
        _0x5c648a[_0xc11a('0x3b0')]('form')[_0xc11a('0x3b1')](_0x133d4e);
        _0x5c648a[_0xc11a('0x38a')]();
    },
    'onRemoveClick': function () {
        var _0x2635a3 = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0];
        Ext['Msg']['show']({
            'title': this[_0xc11a('0x3b4')],
            'message': Strings[_0xc11a('0x3b5')],
            'buttons': Ext['Msg'][_0xc11a('0x3b6')],
            'buttonText': {
                'yes': Strings[_0xc11a('0x3b7')],
                'no': Strings[_0xc11a('0x361')]
            },
            'fn': function (_0x488fd9) {
                var _0x11680c = _0x2635a3[_0xc11a('0x3ad')];
                _0xc11a('0x3b8') === _0x488fd9 && (_0x11680c['remove'](_0x2635a3),
                    _0x11680c[_0xc11a('0x3ba')]({
                        'failure': function (_0x2635a3) {
                            _0x11680c[_0xc11a('0x3bb')]();
                            Traccar['app']['showError'](_0x2635a3[_0xc11a('0x3bc')][0x0]['getError']()['response']);
                        }
                    }));
            }
        });
    },
    'onSelectionChange': function (_0x1b67b0, _0x189421) {
        _0x1b67b0 = 0x0 === _0x189421['length'];
        this['lookupReference'](_0xc11a('0x3bd'))['setDisabled'](_0x1b67b0);
        this['lookupReference'](_0xc11a('0x3bf'))['setDisabled'](_0x1b67b0);
    }
});
Ext['define']('Traccar.view.BaseWindow', {
    'extend': Ext['window'][_0xc11a('0x343')],
    'width': Traccar['Style']['windowWidth'],
    'height': Traccar['Style'][_0xc11a('0x3c0')],
    'layout': _0xc11a('0x3c1'),
    'initComponent': function () {
        if (window[_0xc11a('0x3c2')] < Traccar['Style'][_0xc11a('0x3c3')] || window['innerHeight'] < Traccar['Style'][_0xc11a('0x3c0')])
            this[_0xc11a('0x3c4')] = !0x0,
                this[_0xc11a('0x3c5')] = _0xc11a('0x3c6');
        this[_0xc11a('0x3c7')]();
    }
});
Ext['define'](_0xc11a('0x3c8'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x3c9'),
    'onSaveClick': function (_0x4861c0) {
        var _0x4a917e, _0x547f0c;
        _0x4a917e = _0x4861c0['up']('window')[_0xc11a('0x3b0')]('form');
        _0x4a917e[_0xc11a('0x3ca')]();
        _0x4a917e = _0x4a917e[_0xc11a('0x3cb')]();
        (_0x547f0c = _0x4a917e[_0xc11a('0x3ad')]) ? (_0x4a917e[_0xc11a('0x3cc')] && _0x547f0c['add'](_0x4a917e),
            _0x547f0c[_0xc11a('0x3ba')]({
                'failure': function (_0x4861c0) {
                    _0x547f0c[_0xc11a('0x3bb')]();
                    Traccar['app']['showError'](_0x4861c0['exceptions'][0x0][_0xc11a('0x3cd')]()[_0xc11a('0x3ce')]);
                }
            })) : _0x4a917e[_0xc11a('0x3cf')]();
        _0x4861c0['up']('window')['close']();
    },
    'onValidityChange': function (_0x24674d, _0x239205) {
        this['lookupReference']('saveButton')['setDisabled'](!_0x239205);
    },
    'defaultFieldConfig': {
        'name': _0xc11a('0x3d2'),
        'reference': _0xc11a('0x3d3'),
        'allowBlank': !0x1,
        'fieldLabel': Strings[_0xc11a('0x3d4')]
    },
    'onNameChange': function (_0x60ded1, _0x1e3f29) {
        var _0x683d27 = this['lookupReference'](_0xc11a('0x3d3'));
        if (_0x1e3f29 = _0x60ded1['getStore']()['getById'](_0x1e3f29)) {
            _0x60ded1 = Ext[_0xc11a('0x3d5')](this[_0xc11a('0x3d6')]);
            switch (_0x1e3f29['get']('valueType')) {
                case 'number':
                    _0x60ded1[_0xc11a('0x3d7')] = _0xc11a('0x3d8');
                    void 0x0 !== _0x1e3f29['get'](_0xc11a('0x3d9')) ? _0x60ded1[_0xc11a('0x3d9')] = _0x1e3f29['get'](_0xc11a('0x3d9')) : _0x60ded1['allowDecimals'] = !0x0;
                    _0x60ded1['hoursConverter'] = _0x1e3f29['get']('hoursConverter');
                    _0x60ded1[_0xc11a('0x3da')] = _0x1e3f29['get'](_0xc11a('0x3da'));
                    _0x60ded1[_0xc11a('0x3db')] = _0x1e3f29['get'](_0xc11a('0x3db'));
                    break;
                case 'boolean':
                    _0x60ded1[_0xc11a('0x3d7')] = 'checkboxfield';
                    _0x60ded1[_0xc11a('0x3dc')] = !0x0;
                    _0x60ded1[_0xc11a('0x3dd')] = !0x1;
                    break;
                case 'color':
                    _0x60ded1[_0xc11a('0x3d7')] = _0xc11a('0x3de');
                    break;
                default:
                    if (_0x1e3f29['get']('hoursConverter'))
                        switch (_0x60ded1[_0xc11a('0x3d7')] = _0xc11a('0x394'),
                        _0x60ded1[_0xc11a('0x3df')] = _0xc11a('0x3e0'),
                        _0x60ded1[_0xc11a('0x3e1')] = !0x1,
                        _0x1e3f29['get']('hoursConverter')) {
                            case 'distanceUnit':
                                _0x60ded1['store'] = 'DistanceUnits';
                                _0x60ded1[_0xc11a('0x3e2')] = 'name';
                                _0x60ded1['valueField'] = 'key';
                                break;
                            case 'speedUnit':
                                _0x60ded1['store'] = 'SpeedUnits';
                                _0x60ded1['displayField'] = 'name';
                                _0x60ded1[_0xc11a('0x3d3')] = 'key';
                                break;
                            case 'volumeUnit':
                                _0x60ded1[_0xc11a('0x3ad')] = 'VolumeUnits';
                                _0x60ded1[_0xc11a('0x3e2')] = _0xc11a('0x32e');
                                _0x60ded1[_0xc11a('0x3d3')] = 'key';
                                break;
                            case 'timezone':
                                _0x60ded1[_0xc11a('0x3ad')] = 'AllTimezones',
                                    _0x60ded1[_0xc11a('0x3e2')] = 'key';
                        }
                    else
                        _0x60ded1[_0xc11a('0x3d7')] = _0xc11a('0x356');
            }
            _0x683d27[_0xc11a('0x3e3')]() !== _0x60ded1[_0xc11a('0x3d7')] || _0xc11a('0x3d8') === _0x60ded1[_0xc11a('0x3d7')] && _0x683d27['hoursConverter'] !== _0x60ded1['dataType'] ? (this['getView']()[_0xc11a('0x3b0')]('form')[_0xc11a('0x3e4')](this['getView']()[_0xc11a('0x3b0')]('form')[_0xc11a('0x3e5')][indexOf](_0x683d27), _0x60ded1),
                this['getView']()[_0xc11a('0x3b0')]('form')['remove'](_0x683d27)) : _0xc11a('0x3d8') === _0x60ded1[_0xc11a('0x3d7')] ? (_0x683d27[_0xc11a('0x3e6')](_0x60ded1),
                    _0x683d27[_0xc11a('0x3e7')]()) : _0xc11a('0x394') === _0x60ded1[_0xc11a('0x3d7')] && (_0x683d27[_0xc11a('0x3e6')](_0x60ded1),
                        _0x683d27[_0xc11a('0x365')]());
        }
    }
});
Ext['define']('Traccar.view.ColorPicker', {
    'extend': Ext['form']['field']['Picker'],
    'xtype': _0xc11a('0x3de'),
    'config': {
        'value': '#008000'
    },
    'editable': !0x1,
    'createPicker': function () {
        return Ext['create'](_0xc11a('0x3e8'), {
            'floating': !0x0,
            'picker': this,
            'select': function (_0x3dd3b8) {
                this[_0xc11a('0x3e9')][_0xc11a('0x365')]('#' + _0x3dd3b8);
                this[_0xc11a('0x3e9')][_0xc11a('0x3ea')]();
            }
        });
    },
    'setValue': function (_0x342c8b) {
        this[_0xc11a('0x3c7')]([_0x342c8b]);
        this[_0xc11a('0x3eb')](_0xc11a('0x3ec') + _0x342c8b);
    }
});
Ext['define'](_0xc11a('0x3ed'), {
    'extend': Ext['form']['field'][_0xc11a('0x3ee')],
    'xtype': _0xc11a('0x3d8'),
    'beforeEl': '<div\x20style=\x22width:100%;display:inline-table;\x22>',
    'unitEl': '<div\x20id=\x22numberUnitEl\x22\x20style=\x22display:table-cell;padding-left:10px;vertical-align:middle;width:1px;white-space:nowrap;\x22>',
    'constructor': function (_0x4bc35b) {
        var _0x128ce8 = '';
        if (_0x4bc35b['dataType']) {
            _0x4bc35b[_0xc11a('0x3ef')] = this[_0xc11a('0x3f0')];
            switch (_0x4bc35b['hoursConverter']) {
                case 'speed':
                    _0x4bc35b[_0xc11a('0x3f1')] = {};
                    _0x4bc35b['units']['getStore'] = function () {
                        return Ext['getStore']('SpeedUnits');
                    }
                        ;
                    _0x4bc35b[_0xc11a('0x3f1')]['getValue'] = function () {
                        return Traccar['app']['getAttributePreference']('speedUnit', 'kn');
                    }
                        ;
                    _0x128ce8 = Ext['getStore']('SpeedUnits')['findRecord']('key', _0x4bc35b[_0xc11a('0x3f1')]['getValue']())['get']('name');
                    break;
                case 'distance':
                    _0x4bc35b[_0xc11a('0x3f1')] = {};
                    _0x4bc35b[_0xc11a('0x3f1')]['getStore'] = function () {
                        return Ext['getStore']('DistanceUnits');
                    }
                        ;
                    _0x4bc35b['units']['getValue'] = function () {
                        return Traccar['app']['getAttributePreference']('distanceUnit', 'km');
                    }
                        ;
                    _0x128ce8 = Ext['getStore']('DistanceUnits')['findRecord']('key', _0x4bc35b[_0xc11a('0x3f1')]['getValue']())['get']('name');
                    break;
                case _0xc11a('0x30d'):
                    _0x4bc35b[_0xc11a('0x3f2')] || (_0x4bc35b['listeners'] = {});
                    _0x4bc35b[_0xc11a('0x3f2')]['afterrender'] = function () {
                        this[_0xc11a('0x3f1')] || (this[_0xc11a('0x3f1')] = Ext['create']({
                            'xtype': _0xc11a('0x394'),
                            'renderTo': _0xc11a('0x3f3'),
                            'store': 'TimeUnits',
                            'displayField': 'name',
                            'valueField': 'key',
                            'editable': !0x1,
                            'numberField': this,
                            'value': 's',
                            'width': '70px',
                            'listeners': {
                                'select': function () {
                                    this['numberField'][_0xc11a('0x3f4')] = this['getStore']()['convertValue'](0x1, this['getValue'](), !0x0);
                                }
                            }
                        }));
                    }
                        ;
                    break;
                case 'hours':
                    _0x4bc35b['units'] = {},
                        _0x4bc35b[_0xc11a('0x3f1')]['getStore'] = function () {
                            return Ext['getStore']('HoursUnits');
                        }
                        ,
                        _0x4bc35b[_0xc11a('0x3f1')]['getValue'] = function () {
                            return 'h';
                        }
                        ,
                        _0x128ce8 = Strings['sharedHourAbbreviation'];
            }
            _0x4bc35b[_0xc11a('0x3f5')] = this[_0xc11a('0x3f6')] + _0x128ce8 + _0xc11a('0x3f7');
            _0x4bc35b['rawToValue'] = function (_0x4bc35b) {
                return this['units'] ? this[_0xc11a('0x3f1')]['getStore']()['convertValue'](this[_0xc11a('0x3f8')](_0x4bc35b), this['units']['getValue'](), !0x0) : this[_0xc11a('0x3f8')](_0x4bc35b);
            }
                ;
            _0x4bc35b[_0xc11a('0x3f9')] = function (_0x4bc35b) {
                return this[_0xc11a('0x3f1')] ? String(this['units']['getStore']()['convertValue'](_0x4bc35b, this[_0xc11a('0x3f1')]['getValue'](), !0x1)) : String(_0x4bc35b);
            }
                ;
            _0x4bc35b['units'] && (_0x4bc35b[_0xc11a('0x3f4')] = _0x4bc35b[_0xc11a('0x3f1')]['getStore']()['convertValue'](0x1, _0x4bc35b[_0xc11a('0x3f1')]['getValue'](), !0x0));
        }
        this[_0xc11a('0x3c7')](arguments);
    }
});
Ext['define'](_0xc11a('0x3fa'), {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': 'attribute',
    'title': Strings[_0xc11a('0x3fb')],
    'items': {
        'xtype': 'form',
        'listeners': {
            'validitychange': _0xc11a('0x3fc')
        },
        'items': [{
            'xtype': _0xc11a('0x356'),
            'reference': _0xc11a('0x3fd'),
            'name': 'name',
            'allowBlank': !0x1,
            'fieldLabel': Strings['sharedName']
        }, {
            'xtype': _0xc11a('0x356'),
            'name': _0xc11a('0x3d2'),
            'reference': 'valueField',
            'allowBlank': !0x1,
            'fieldLabel': Strings[_0xc11a('0x3d4')]
        }]
    },
    'buttons': [{
        'glyph': _0xc11a('0x3fe'),
        'reference': 'saveButton',
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': _0xc11a('0x3ff')
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x402'), {
    'extend': Traccar['view'][_0xc11a('0x403')]['ToolbarController'],
    'alias': _0xc11a('0x404'),
    'removeTitle': Strings['stateName'],
    'init': function () {
        var _0x2d0d4a, _0x550c4b, _0x568bca = 0x0, _0x21c64a;
        _0x2d0d4a = Ext['create']('Traccar.store.Attributes');
        _0x2d0d4a[_0xc11a('0x405')](Ext['create'](_0xc11a('0x406')));
        _0xc11a('0x407') === typeof this['getView']()[_0xc11a('0x408')]['get']('attributes') && this['getView']()[_0xc11a('0x408')]['set']('attributes', {});
        _0x21c64a = this['getView']()[_0xc11a('0x408')]['get']('attributes');
        for (_0x550c4b in _0x21c64a)
            _0x21c64a['hasOwnProperty'](_0x550c4b) && _0x2d0d4a['add'](Ext['create']('Traccar.model.Attribute', {
                'priority': _0x568bca++,
                'name': _0x550c4b,
                'value': _0x21c64a[_0x550c4b]
            }));
        _0x2d0d4a[_0xc11a('0x409')]('add', function (_0x2d0d4a, _0x550c4b) {
            var _0x568bca;
            _0x568bca = this['getView']();
            for (_0x2d0d4a = 0x0; _0x2d0d4a < _0x550c4b['length']; _0x2d0d4a++)
                _0x568bca[_0xc11a('0x408')]['get']('attributes')[_0x550c4b[_0x2d0d4a]['get']('name')] = _0x550c4b[_0x2d0d4a]['get']('value');
            _0x568bca[_0xc11a('0x408')][_0xc11a('0x40a')] = !0x0;
        }, this);
        _0x2d0d4a[_0xc11a('0x409')]('update', function (_0x2d0d4a, _0x550c4b, _0x568bca) {
            _0x2d0d4a = this['getView']();
            _0x568bca === Ext['data']['Model'][_0xc11a('0x40b')] && (_0x550c4b[_0xc11a('0x40c')]['name'] !== _0x550c4b['get']('name') && delete _0x2d0d4a[_0xc11a('0x408')]['get']('attributes')[_0x550c4b['modified']['name']],
                _0x2d0d4a[_0xc11a('0x408')]['get']('attributes')[_0x550c4b['get']('name')] = _0x550c4b['get'](_0xc11a('0x3d2')),
                _0x2d0d4a[_0xc11a('0x408')][_0xc11a('0x40a')] = !0x0);
        }, this);
        _0x2d0d4a[_0xc11a('0x409')]('remove', function (_0x2d0d4a, _0x550c4b) {
            var _0x568bca;
            _0x568bca = this['getView']();
            for (_0x2d0d4a = 0x0; _0x2d0d4a < _0x550c4b['length']; _0x2d0d4a++)
                delete _0x568bca[_0xc11a('0x408')]['get']('attributes')[_0x550c4b[_0x2d0d4a]['get']('name')];
            _0x568bca[_0xc11a('0x408')][_0xc11a('0x40a')] = !0x0;
        }, this);
        this['getView']()[_0xc11a('0x40d')](_0x2d0d4a);
        this['getView']()[_0xc11a('0x408')] instanceof Traccar['model'][_0xc11a('0x40e')] ? this['getView']()[_0xc11a('0x40f')] = _0xc11a('0x410') : this['getView']()['record'] instanceof Traccar['model'][_0xc11a('0x411')] ? this['getView']()[_0xc11a('0x40f')] = _0xc11a('0x412') : this['getView']()['record'] instanceof Traccar['model']['Group'] ? this['getView']()[_0xc11a('0x40f')] = _0xc11a('0x413') : this['getView']()[_0xc11a('0x408')] instanceof Traccar['model']['Server'] ? this['getView']()[_0xc11a('0x40f')] = _0xc11a('0x414') : this['getView']()[_0xc11a('0x408')] instanceof Traccar['model'][_0xc11a('0x415')] && (this['getView']()[_0xc11a('0x40f')] = 'UserAttributes');
    },
    'comboConfig': {
        'xtype': _0xc11a('0x394'),
        'reference': _0xc11a('0x416'),
        'name': 'name',
        'fieldLabel': Strings[_0xc11a('0x357')],
        'displayField': 'name',
        'valueField': 'key',
        'allowBlank': !0x1,
        'queryMode': _0xc11a('0x3e0'),
        'listeners': {
            'change': 'onNameChange'
        }
    },
    'initDialog': function (_0x4a7b58) {
        var _0x20d7c3, _0x5a4305 = Ext['create'](_0xc11a('0x3fa'));
        this['getView']()[_0xc11a('0x40f')] && (this['comboConfig']['store'] = this['getView']()[_0xc11a('0x40f')],
            _0x20d7c3 = _0x5a4305['lookupReference'](_0xc11a('0x3fd')),
            _0x5a4305[_0xc11a('0x3b0')]('form')[_0xc11a('0x3e4')](0x0, this[_0xc11a('0x417')]),
            _0x5a4305[_0xc11a('0x3b0')]('form')['remove'](_0x20d7c3));
        _0x5a4305[_0xc11a('0x3b0')]('form')[_0xc11a('0x3b1')](_0x4a7b58);
        _0x5a4305[_0xc11a('0x38a')]();
    },
    'onAddClick': function () {
        var _0x4538f0 = Ext['create']('Traccar.model.Attribute');
        _0x4538f0[_0xc11a('0x3ad')] = this['getView']()['getStore']();
        this[_0xc11a('0x418')](_0x4538f0);
    },
    'onEditClick': function () {
        this[_0xc11a('0x418')](this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0]);
    }
});
Ext['define']('Traccar.view.edit.Toolbar', {
    'extend': Ext[_0xc11a('0x419')][_0xc11a('0x41a')],
    'xtype': _0xc11a('0x41b'),
    'initComponent': function () {
        this[_0xc11a('0x3c7')](arguments);
        this['add'](0x0, [{
            'xtype': _0xc11a('0x41c'),
            'handler': _0xc11a('0x41d'),
            'reference': 'toolbarAddButton',
            'glyph': _0xc11a('0x41e'),
            'tooltip': Strings['sharedAdd'],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': _0xc11a('0x41f'),
            'reference': _0xc11a('0x3bd'),
            'glyph': _0xc11a('0x420'),
            'tooltip': Strings[_0xc11a('0x421')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': _0xc11a('0x422'),
            'reference': _0xc11a('0x3bf'),
            'glyph': _0xc11a('0x400'),
            'tooltip': Strings[_0xc11a('0x3b7')],
            'tooltipType': _0xc11a('0x401')
        }]);
    }
});
Ext['define'](_0xc11a('0x423'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': 'attributesView',
    'controller': 'attributes',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string',
            'renderer': function (_0x280fc0) {
                var _0x1d8242;
                this['attributesStore'] && (_0x1d8242 = Ext['getStore'](this[_0xc11a('0x40f')])['getById'](_0x280fc0));
                return _0x1d8242 && _0x1d8242['get']('name') || _0x280fc0;
            }
        }, {
            'text': Strings['stateValue'],
            'dataIndex': _0xc11a('0x3d2'),
            'renderer': function (_0x256139, _0x397fda, _0x2cd41f) {
                var _0x4798d8;
                this['attributesStore'] && (_0x4798d8 = Ext['getStore'](this['attributesStore'])['getById'](_0x2cd41f['get']('name')));
                return Traccar['AttributeFormatter']['renderAttribute'](_0x256139, _0x4798d8);
            }
        }]
    }
});
Ext['define'](_0xc11a('0x426'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x427'),
    'onSaveClick': function (_0x5b170b) {
        var _0x3877d1;
        _0x5b170b = _0x5b170b['up']('window')[_0xc11a('0x3b0')]('form');
        _0x5b170b['updateRecord']();
        _0x5b170b = _0x5b170b['getRecord']();
        (_0x3877d1 = _0x5b170b['store']) ? (_0x5b170b[_0xc11a('0x3cc')] && _0x3877d1['add'](_0x5b170b),
            _0x3877d1[_0xc11a('0x3ba')]({
                'failure': function (_0x5b170b) {
                    _0x3877d1[_0xc11a('0x3bb')]();
                    Traccar['app']['showError'](_0x5b170b[_0xc11a('0x3bc')][0x0]['getError']()[_0xc11a('0x3ce')]);
                }
            })) : _0x5b170b[_0xc11a('0x3cf')]();
        this[_0xc11a('0x34e')]();
    },
    'showAttributesView': function (_0x3ab967) {
        _0x3ab967 = _0x3ab967['up']('window')[_0xc11a('0x3b0')]('form')[_0xc11a('0x3cb')]();
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x429')],
            'items': {
                'xtype': 'attributesView',
                'record': _0x3ab967
            }
        })['show']();
    }
});
Ext['define'](_0xc11a('0x42a'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': 'controller.savedCommand',
    'defaultFieldConfig': {
        'allowBlank': !0x1
    },
    'onTypeChange': function (_0x5bfc19, _0x1042e2) {
        var _0x1aff9d, _0xd8a014, _0x1023e5, _0x4e7380;
        _0x4e7380 = _0x5bfc19['up']('window')[_0xc11a('0x3b0')]('form')[_0xc11a('0x3cb')]();
        this['lookupReference']('parameters')[_0xc11a('0x42c')]();
        if ((_0x1042e2 = Ext['getStore'](_0xc11a('0x42d'))['getById'](_0x1042e2)) && _0x1042e2['get']('parameters'))
            for (_0xd8a014 = _0x1042e2['get']('parameters'),
                _0x1042e2 = 0x0; _0x1042e2 < _0xd8a014['length']; _0x1042e2++) {
                _0x1023e5 = new Traccar['model'][(_0xc11a('0x42e'))](_0xd8a014[_0x1042e2]);
                _0x1aff9d = Ext[_0xc11a('0x3d5')](this[_0xc11a('0x3d6')]);
                _0x1aff9d['key'] = _0x1023e5['get']('key');
                _0x1aff9d[_0xc11a('0x42f')] = _0x1023e5['get']('name');
                _0x4e7380['get']('attributes') && (_0x1aff9d[_0xc11a('0x3d2')] = _0x4e7380['get']('attributes')[_0x1023e5['get']('key')]);
                _0x1aff9d['disabled'] = _0x5bfc19[_0xc11a('0x430')]();
                switch (_0x1023e5['get']('valueType')) {
                    case 'number':
                        _0x1aff9d[_0xc11a('0x3d7')] = _0xc11a('0x3d8');
                        void 0x0 !== _0x1023e5['get']('allowDecimals') ? _0x1aff9d[_0xc11a('0x3d9')] = _0x1023e5['get'](_0xc11a('0x3d9')) : _0x1aff9d[_0xc11a('0x3d9')] = !0x0;
                        _0x1aff9d['hoursConverter'] = _0x1023e5['get']('hoursConverter');
                        _0x1aff9d[_0xc11a('0x3da')] = _0x1023e5['get'](_0xc11a('0x3da'));
                        _0x1aff9d['minValue'] = _0x1023e5['get'](_0xc11a('0x3db'));
                        break;
                    case 'boolean':
                        _0x1aff9d['xtype'] = _0xc11a('0x39a');
                        _0x1aff9d[_0xc11a('0x3dc')] = !0x0;
                        _0x1aff9d[_0xc11a('0x3dd')] = !0x1;
                        break;
                    default:
                        'timezone' === _0x1023e5['get']('hoursConverter') ? (_0x1aff9d[_0xc11a('0x3d7')] = _0xc11a('0x394'),
                            _0x1aff9d[_0xc11a('0x3df')] = _0xc11a('0x3e0'),
                            _0x1aff9d[_0xc11a('0x3e2')] = 'key',
                            _0x1aff9d['editable'] = !0x1,
                            _0x1aff9d['store'] = _0xc11a('0x431')) : _0x1aff9d[_0xc11a('0x3d7')] = 'textfield';
                }
                this['lookupReference']('parameters')['add'](_0x1aff9d);
            }
    },
    'fillAttributes': function (_0x2c2bd3) {
        var _0x370263, _0x519acf, _0x2ebb4d = {};
        _0x2c2bd3 = _0x2c2bd3['up']('window')[_0xc11a('0x3b0')]('form');
        _0x2c2bd3[_0xc11a('0x3ca')]();
        _0x370263 = _0x2c2bd3[_0xc11a('0x3cb')]();
        _0x519acf = this['lookupReference']('parameters')[_0xc11a('0x3e5')][_0xc11a('0x3e5')];
        for (_0x2c2bd3 = 0x0; _0x2c2bd3 < _0x519acf['length']; _0x2c2bd3++)
            _0x2ebb4d[_0x519acf[_0x2c2bd3]['key']] = _0x519acf[_0x2c2bd3]['getValue']();
        _0x370263['set']('attributes', _0x2ebb4d);
    },
    'onSaveClick': function (_0x3efd6a) {
        this[_0xc11a('0x432')](_0x3efd6a);
        this[_0xc11a('0x3c7')](arguments);
    },
    'onValidityChange': function (_0x5f5156, _0x4f191d) {
        this['lookupReference']('saveButton')['setDisabled'](!_0x4f191d);
    }
});
Ext['define'](_0xc11a('0x433'), {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.base',
    'init': function () {
        var _0x3db4cd = {}, _0x2a4b30, _0x5945b6;
        _0x3db4cd[this['getView']()['baseObjectName']] = this['getView']()['baseObject'];
        _0x2a4b30 = this['getView']()[_0xc11a('0x434')];
        _0x5945b6 = this['getView']()['storeName'];
        _0x2a4b30 = 'undefined' === typeof _0x2a4b30 ? _0x5945b6 : _0x2a4b30;
        this['getView']()[_0xc11a('0x40d')](Ext['getStore'](_0x5945b6));
        this['getView']()['getStore']()['load']({
            'scope': this,
            'callback': function () {
                Ext['create'](_0xc11a('0x436') + _0x2a4b30)['load']({
                    'params': _0x3db4cd,
                    'scope': this,
                    'callback': function (_0x3db4cd, _0x2a4b30, _0x5945b6) {
                        if (_0x5945b6)
                            for (_0x2a4b30 = 0x0; _0x2a4b30 < _0x3db4cd['length']; _0x2a4b30++)
                                _0x5945b6 = this['getView']()['getStore']()['getById'](_0x3db4cd[_0x2a4b30]['getId']()),
                                    this['getView']()['getSelectionModel']()[_0xc11a('0x437')](_0x5945b6, !0x0, !0x0);
                    }
                });
            }
        });
    },
    'onBeforeSelect': function (_0x5e577f, _0xf52562) {
        var _0x572858 = {};
        _0x572858[this['getView']()[_0xc11a('0x438')]] = this['getView']()[_0xc11a('0x439')];
        _0x572858[this['getView']()[_0xc11a('0x43a')]] = _0xf52562[_0xc11a('0x43b')]();
        Ext['Ajax']['request']({
            'scope': this,
            'url': _0xc11a('0x43c'),
            'jsonData': Ext['util'][_0xc11a('0x43d')]['encode'](_0x572858),
            'callback': function (_0x572858, _0x2bd323, _0xdf4501) {
                _0x2bd323 || (_0x5e577f[_0xc11a('0x43e')](_0xf52562, !0x0),
                    Traccar['app']['showError'](_0xdf4501));
            }
        });
    },
    'onBeforeDeselect': function (_0x236cf4, _0x8d5e0f) {
        var _0x1b8ec5 = {};
        _0x1b8ec5[this['getView']()[_0xc11a('0x438')]] = this['getView']()[_0xc11a('0x439')];
        _0x1b8ec5[this['getView']()[_0xc11a('0x43a')]] = _0x8d5e0f['getId']();
        Ext['Ajax']['request']({
            'scope': this,
            'method': 'DELETE',
            'url': 'api/permissions',
            'jsonData': Ext['util'][_0xc11a('0x43d')]['encode'](_0x1b8ec5),
            'callback': function (_0x1b8ec5, _0x1c85c9, _0x559b38) {
                _0x1c85c9 || (_0x236cf4[_0xc11a('0x437')](_0x8d5e0f, !0x0, !0x0),
                    Traccar['app']['showError'](_0x559b38));
            }
        });
    }
});
Ext['define']('Traccar.view.permissions.Base', {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'controller': _0xc11a('0x43f'),
    'selModel': {
        'selType': _0xc11a('0x440'),
        'checkOnly': !0x0,
        'showHeaderCheckbox': !0x1
    },
    'listeners': {
        'beforedeselect': _0xc11a('0x441'),
        'beforeselect': _0xc11a('0x442')
    }
});
Ext['define']('Traccar.view.permissions.SavedCommands', {
    'extend': Traccar['view']['permissions'][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x443'),
    'columns': {
        'items': [{
            'text': Strings['sharedDescription'],
            'dataIndex': 'description',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x2de')],
            'dataIndex': 'type',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': {
                'type': _0xc11a('0x445'),
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllCommandTypes'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('commandType')
        }, {
            'text': Strings[_0xc11a('0x447')],
            'dataIndex': 'textChannel',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'boolean'
        }]
    }
});
Ext['define']('Traccar.view.dialog.SendCommandController', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x448')],
    'alias': _0xc11a('0x449'),
    'onSendClick': function (_0x7621a8) {
        this[_0xc11a('0x432')](_0x7621a8);
        _0x7621a8 = _0x7621a8['up']('window')[_0xc11a('0x3b0')]('form')[_0xc11a('0x3cb')]();
        Ext['Ajax']['request']({
            'scope': this,
            'url': _0xc11a('0x339'),
            'jsonData': _0x7621a8['getData'](),
            'callback': this['onSendResult']
        });
    },
    'onValidityChange': function (_0x34bfee, _0x432619) {
        this['lookupReference'](_0xc11a('0x44a'))['setDisabled'](!_0x432619 || null === this['lookupReference'](_0xc11a('0x44b'))['getValue']());
    },
    'onTextChannelChange': function (_0x283f97, _0x2ab300) {
        _0x283f97 = this['lookupReference']('commandType')['getStore']();
        _0x283f97[_0xc11a('0x44c')]()[_0xc11a('0x44d')]('textChannel', _0x2ab300);
        _0x283f97[_0xc11a('0x44e')]();
    },
    'onCommandSelect': function (_0x3131fb) {
        var _0x2fefe3, _0x5c413c = _0x3131fb['getStore']()['getById'](_0x3131fb['getValue']());
        _0x5c413c['set']('deviceId', this['getView']()['deviceId']);
        _0x2fefe3 = _0x3131fb['up']('window')[_0xc11a('0x3b0')]('form');
        _0x3131fb = _0x2fefe3['getRecord']();
        _0x2fefe3[_0xc11a('0x3b1')](_0x5c413c);
        if (_0x3131fb && _0x5c413c['get']('type') === _0x3131fb['get']('type'))
            this[_0xc11a('0x44f')](this['lookupReference']('commandType'), _0x5c413c['get']('type'));
        this['lookupReference'](_0xc11a('0x450'))['setDisabled'](0x0 !== _0x5c413c[_0xc11a('0x43b')]());
        this['lookupReference'](_0xc11a('0x44a'))['setDisabled'](0x0 === _0x5c413c[_0xc11a('0x43b')]());
    },
    'onSendResult': function (_0x5c2072, _0x591a33, _0x2a17dc) {
        _0x591a33 ? (this['closeView'](),
            Traccar['app'][_0xc11a('0x34f')](0xca === _0x2a17dc['status'] ? Strings[_0xc11a('0x451')] : Strings[_0xc11a('0x452')])) : Traccar['app']['showError'](_0x2a17dc);
    },
    'closeView': function () {
        this['lookupReference']('commandsComboBox')['getStore']()[_0xc11a('0x42c')]();
        this[_0xc11a('0x3c7')](arguments);
    }
});
Ext['define'](_0xc11a('0x453'), {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': _0xc11a('0x454'),
    'title': Strings['commandTitle'],
    'items': [{
        'xtype': _0xc11a('0x394'),
        'reference': _0xc11a('0x44b'),
        'fieldLabel': Strings[_0xc11a('0x2fa')],
        'displayField': 'description',
        'valueField': 'id',
        'store': _0xc11a('0x455'),
        'queryMode': _0xc11a('0x3e0'),
        'editable': !0x1,
        'allowBlank': !0x1,
        'listeners': {
            'select': _0xc11a('0x456')
        }
    }, {
        'xtype': 'form',
        'listeners': {
            'validitychange': _0xc11a('0x3fc')
        },
        'items': [{
            'xtype': _0xc11a('0x457'),
            'reference': 'newCommandFields',
            'disabled': !0x0,
            'items': [{
                'xtype': _0xc11a('0x39a'),
                'name': 'textChannel',
                'reference': _0xc11a('0x458'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'fieldLabel': Strings[_0xc11a('0x447')],
                'listeners': {
                    'change': _0xc11a('0x459')
                }
            }, {
                'xtype': _0xc11a('0x394'),
                'name': 'type',
                'reference': 'commandType',
                'fieldLabel': Strings['sharedType'],
                'store': _0xc11a('0x45a'),
                'displayField': 'name',
                'valueField': 'type',
                'editable': !0x1,
                'allowBlank': !0x1,
                'listeners': {
                    'change': 'onTypeChange'
                }
            }, {
                'xtype': _0xc11a('0x45b'),
                'reference': 'parameters'
            }]
        }]
    }],
    'buttons': [{
        'xtype': _0xc11a('0x45c')
    }, {
        'glyph': _0xc11a('0x45d'),
        'tooltip': Strings[_0xc11a('0x45e')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'disabled': !0x0,
        'reference': _0xc11a('0x44a'),
        'handler': 'onSendClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define']('Traccar.view.dialog.BaseEdit', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x38c')],
    'controller': 'baseEdit',
    'buttons': [{
        'text': Strings[_0xc11a('0x429')],
        'handler': _0xc11a('0x45f')
    }, {
        'xtype': _0xc11a('0x45c')
    }, {
        'glyph': _0xc11a('0x3fe'),
        'reference': 'saveButton',
        'tooltip': Strings['sharedSave'],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x3ff')
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x460'), {
    'extend': Ext['form'][_0xc11a('0x35b')][_0xc11a('0x461')],
    'xtype': 'clearableComboBox',
    'editable': !0x1,
    'triggers': {
        'clear': {
            'cls': _0xc11a('0x462'),
            'handler': function (_0x5465c2) {
                _0x5465c2[_0xc11a('0x463')]();
            }
        }
    }
});
Ext['define'](_0xc11a('0x464'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': 'controller.device',
    'init': function () {
        Traccar['app']['getUser']()['get']('administrator') && this['lookupReference'](_0xc11a('0x465'))[_0xc11a('0x3a4')](!0x1);
    }
});
Ext['define'](_0xc11a('0x466'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': 'device',
    'title': Strings['sharedDevice'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings[_0xc11a('0x468')],
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'name',
                'fieldLabel': Strings[_0xc11a('0x357')],
                'allowBlank': !0x1
            }, {
                'xtype': _0xc11a('0x356'),
                'name': 'uniqueId',
                'fieldLabel': Strings[_0xc11a('0x469')],
                'allowBlank': !0x1
            }]
        }, {
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x46a')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': _0xc11a('0x46b'),
                'name': 'groupId',
                'fieldLabel': Strings[_0xc11a('0x46c')],
                'store': 'Groups',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'id'
            }, {
                'xtype': _0xc11a('0x356'),
                'name': 'phone',
                'fieldLabel': Strings[_0xc11a('0x46e')]
            }, {
                'xtype': _0xc11a('0x356'),
                'name': 'model',
                'fieldLabel': Strings['deviceModel']
            }, {
                'xtype': 'textfield',
                'name': 'contact',
                'fieldLabel': Strings[_0xc11a('0x46f')]
            }, {
                'xtype': _0xc11a('0x394'),
                'name': 'category',
                'fieldLabel': Strings['deviceCategory'],
                'store': _0xc11a('0x470'),
                'queryMode': _0xc11a('0x3e0'),
                'displayField': 'name',
                'valueField': 'key',
                'editable': !0x1,
                'listConfig': {
                    'getInnerTpl': function () {
                        return _0xc11a('0x471');
                    }
                }
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'disabled',
                'fieldLabel': Strings['sharedDisabled'],
                'hidden': !0x0,
                'reference': 'disabledField'
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x472'), {
    'extend': Traccar['view'][_0xc11a('0x473')]['Base'],
    'xtype': _0xc11a('0x474'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x475')],
            'dataIndex': 'calendarId',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'hidden': !0x0,
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define'](_0xc11a('0x476'), {
    'extend': Traccar['view'][_0xc11a('0x473')][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x477'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x478')],
            'dataIndex': 'description',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x3fb')],
            'dataIndex': 'attribute',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'PositionAttributes'
            },
            'renderer': function (_0x3e9c96) {
                return Ext['getStore']('PositionAttributes')[_0xc11a('0x479')](_0x3e9c96);
            }
        }]
    }
});
Ext['define'](_0xc11a('0x47a'), {
    'extend': Traccar['view']['permissions']['Base'],
    'xtype': 'linkDriversView',
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x469')],
            'dataIndex': 'uniqueId',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x47b'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': 'controller.devices',
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'selectreport': 'selectReport'
                },
                'root': {
                    'selectdevice': 'selectDevice'
                },
                'map': {
                    'selectdevice': 'selectDevice',
                    'deselectfeature': _0xc11a('0x47d')
                }
            },
            'store': {
                '#Devices': {
                    'update': _0xc11a('0x47e')
                }
            }
        }
    },
    'objectModel': 'Traccar.model.Device',
    'objectDialog': _0xc11a('0x466'),
    'removeTitle': Strings['sharedDevice'],
    'init': function () {
        var _0x50b427 = this, _0x3857fc, _0x3f192f;
        _0x3f192f = Traccar['app']['getPreference']('deviceReadonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator');
        _0x3857fc = Traccar['app']['getPreference']('readonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator');
        this['lookupReference']('toolbarAddButton')['setDisabled'](_0x3857fc || _0x3f192f);
        this['lookupReference'](_0xc11a('0x480'))[_0xc11a('0x3a4')](_0x3857fc || _0x3f192f);
        setInterval(function () {
            _0x50b427['getView']()['getView']()[_0xc11a('0x481')]();
        }, Traccar['Style']['refreshPeriod']);
    },
    'onCommandClick': function () {
        var _0x59ee85, _0x305b59, _0x1d18d7;
        _0x59ee85 = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0]['get']('id');
        _0x305b59 = Ext['create'](_0xc11a('0x453'));
        _0x305b59['deviceId'] = _0x59ee85;
        _0x1d18d7 = _0x305b59['lookupReference']('commandsComboBox')['getStore']();
        _0x1d18d7[_0xc11a('0x44c')]()[_0xc11a('0x44d')]('deviceId', _0x59ee85);
        Traccar['app']['getPreference']('limitCommands', !0x1) || _0x1d18d7['add']({
            'id': 0x0,
            'description': Strings[_0xc11a('0x482')]
        });
        _0x1d18d7['load']({
            'addRecords': !0x0
        });
        _0x1d18d7 = _0x305b59['lookupReference']('commandType')['getStore']();
        _0x1d18d7[_0xc11a('0x44c')]()['setExtraParam']('deviceId', _0x59ee85);
        _0x1d18d7['load']();
        _0x305b59['show']();
    },
    'updateButtons': function (_0x195c46) {
        var _0x3cc5fa, _0x350dc8, _0x34327b;
        _0x350dc8 = Traccar['app']['getPreference']('deviceReadonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator');
        _0x3cc5fa = Traccar['app']['getPreference']('readonly', !0x1) && !Traccar['app']['getUser']()['get']('administrator');
        _0x34327b = 0x0 === _0x195c46['length'];
        this['lookupReference']('toolbarEditButton')['setDisabled'](_0x34327b || _0x3cc5fa || _0x350dc8);
        this['lookupReference'](_0xc11a('0x3bf'))['setDisabled'](_0x34327b || _0x3cc5fa || _0x350dc8);
        _0x350dc8 = this['lookupReference'](_0xc11a('0x480'));
        _0x350dc8[_0xc11a('0x483')] = _0x34327b ? null : _0x195c46[0x0];
        _0x350dc8['setDisabled'](_0x34327b);
        this['lookupReference'](_0xc11a('0x484'))['setDisabled'](_0x34327b || _0x3cc5fa);
    },
    'onSelectionChange': function (_0x531e32, _0x1979e7) {
        this[_0xc11a('0x485')](_0x1979e7);
        0x0 < _0x1979e7['length'] ? this['fireEvent'](_0xc11a('0x486'), _0x1979e7[0x0], !0x0) : this['fireEvent']('deselectfeature');
    },
    'selectDevice': function (_0x54275c) {
        this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x437')]([_0x54275c], !0x1, !0x0);
        this[_0xc11a('0x485')](this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x488')]()[_0xc11a('0x3e5')]);
        this['getView']()['getView']()[_0xc11a('0x489')](_0x54275c);
        null != panorama && (pressedDevice = _0x54275c['get']('id'),
            this['getView']()[_0xc11a('0x3b3')]()['getSelection'](),
            _0x54275c = Ext['getStore'](_0xc11a('0x48a'))['findRecord']('deviceId', pressedDevice, 0x0, !0x1, !0x1, !0x0),
            panorama[_0xc11a('0x48b')]({
                'lat': _0x54275c['get']('latitude'),
                'lng': _0x54275c['get']('longitude')
            }),
            panorama[_0xc11a('0x48c')]({
                'heading': _0x54275c['get']('course'),
                'pitch': 0x0
            }));
    },
    'selectReport': function (_0x5c3bdd) {
        void 0x0 !== _0x5c3bdd && this['deselectFeature']();
    },
    'onUpdateDevice': function () {
        this[_0xc11a('0x485')](this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x488')]()[_0xc11a('0x3e5')]);
    },
    'deselectFeature': function () {
        this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x48d')]();
    }
});
Ext['define']('Traccar.view.ArrayListFilter', {
    'extend': Ext[_0xc11a('0x3a7')][_0xc11a('0x48e')]['filter'][_0xc11a('0x490')],
    'alias': _0xc11a('0x491'),
    'type': _0xc11a('0x492'),
    'constructor': function (_0x38a68a) {
        this['callParent']([_0x38a68a]);
        this['filter']['setFilterFn'](function (_0x38a68a) {
            var _0x32a2b5, _0x257926;
            _0x32a2b5 = _0x38a68a['get'](this[_0xc11a('0x493')]());
            _0x257926 = this['getValue']();
            if (Ext[_0xc11a('0x494')](_0x32a2b5))
                for (_0x38a68a = 0x0; _0x38a68a < _0x32a2b5['length']; _0x38a68a++) {
                    if (-0x1 !== _0x257926[indexOf](_0x32a2b5[_0x38a68a]))
                        return !0x0;
                }
            else if (_0x32a2b5['match'](/[ ,]+/))
                for (_0x32a2b5 = _0x32a2b5['split'](/[ ,]+/)['filter'](Boolean),
                    _0x38a68a = 0x0; _0x38a68a < _0x32a2b5['length']; _0x38a68a++) {
                    if (-0x1 !== _0x257926[indexOf](_0x32a2b5[_0x38a68a]))
                        return !0x0;
                }
            else if (-0x1 !== _0x257926[indexOf](_0x32a2b5))
                return !0x0;
            return !0x1;
        });
    }
});
Ext['define'](_0xc11a('0x495'), {
    'extend': Traccar['view'][_0xc11a('0x473')][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x496'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x497')],
            'dataIndex': 'type',
            'flex': 0x2,
            'renderer': function (_0x3f64e0) {
                return Traccar['app']['getEventString'](_0x3f64e0);
            },
            'filter': {
                'type': _0xc11a('0x445'),
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificationTypes'
            }
        }, {
            'text': Strings[_0xc11a('0x499')],
            'dataIndex': 'always',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'renderer': Traccar['AttributeFormatter']['getFormatter']('always'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x49a')],
            'dataIndex': 'notificators',
            'flex': 0x2,
            'filter': {
                'type': 'arraylist',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificators'
            },
            'renderer': function (_0x23d2fa) {
                var _0x2cafa0 = '', _0x3025f1;
                if (_0x23d2fa)
                    for (_0x3025f1 = _0x23d2fa['split'](/[ ,]+/)['filter'](Boolean),
                        _0x23d2fa = 0x0; _0x23d2fa < _0x3025f1['length']; _0x23d2fa++)
                        _0x2cafa0 += Traccar['app'][_0xc11a('0x49b')](_0x3025f1[_0x23d2fa]) + (_0x23d2fa < _0x3025f1['length'] - 0x1 ? ',\x20' : '');
                return _0x2cafa0;
            }
        }, {
            'text': Strings[_0xc11a('0x475')],
            'dataIndex': 'calendarId',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define']('Traccar.view.dialog.SelectDeviceController', {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.selectDevice',
    'onSaveClick': function (_0x35e9e0) {
        var _0x44441c, _0x44f27b;
        _0x44441c = this['lookupReference']('deviceField')['getValue']();
        _0x44f27b = this['getView']()['record']['data'];
        Ext['Ajax']['request']({
            'url': 'api/attributes/computed/test?deviceId=' + _0x44441c,
            'method': 'POST',
            'jsonData': Ext['util']['JSON']['encode'](_0x44f27b),
            'callback': function (_0x35e9e0, _0x44441c, _0x44f27b) {
                _0x44441c ? Ext['Msg']['alert'](Strings['sharedInfoTitle'], _0x44f27b['responseText'] || _0x44f27b['statusText']) : Traccar['app']['showError'](_0x44f27b);
            }
        });
        _0x35e9e0['up']('window')['close']();
    },
    'onDeviceChange': function (_0x2cb989, _0x59f2d7) {
        this['lookupReference']('saveButton')['setDisabled'](null === _0x59f2d7);
    }
});
Ext['define']('Traccar.view.dialog.SelectDevice', {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': 'selectDevice',
    'title': Strings['sharedDevice'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x394'),
            'reference': 'deviceField',
            'store': 'Devices',
            'queryMode': _0xc11a('0x3e0'),
            'displayField': 'name',
            'valueField': 'id',
            'editable': !0x1,
            'listeners': {
                'change': _0xc11a('0x4a4')
            }
        }]
    },
    'buttons': [{
        'glyph': 'xf00c@FontAwesome',
        'reference': 'saveButton',
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick',
        'disabled': !0x0
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings['sharedCancel'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x4a5'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': _0xc11a('0x4a6'),
    'onAttributeChange': function (_0x2f09b0, _0x2c7f07) {
        (_0x2f09b0 = Ext['getStore']('PositionAttributes')['getById'](_0x2c7f07)) ? (this['getView']()['lookupReference'](_0xc11a('0x4a7'))[_0xc11a('0x365')](_0x2f09b0['get']('valueType')),
            this['getView']()['lookupReference'](_0xc11a('0x4a7'))[_0xc11a('0x4a8')](!0x0)) : this['getView']()['lookupReference'](_0xc11a('0x4a7'))['setReadOnly'](!0x1);
    },
    'onCheckClick': function (_0x48a49c) {
        var _0x5d88b6;
        _0x5d88b6 = Ext['create']('Traccar.view.dialog.SelectDevice');
        _0x48a49c = _0x48a49c['up']('window')['down']('form');
        _0x48a49c[_0xc11a('0x3ca')]();
        _0x5d88b6[_0xc11a('0x408')] = _0x48a49c['getRecord']();
        _0x5d88b6[_0xc11a('0x38a')]();
    }
});
Ext['define'](_0xc11a('0x4a9'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': _0xc11a('0x4aa'),
    'title': Strings[_0xc11a('0x4ab')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x356'),
            'name': 'description',
            'fieldLabel': Strings[_0xc11a('0x478')]
        }, {
            'xtype': _0xc11a('0x394'),
            'name': 'attribute',
            'fieldLabel': Strings[_0xc11a('0x3fb')],
            'store': 'PositionAttributes',
            'displayField': 'name',
            'valueField': 'key',
            'listeners': {
                'change': 'onAttributeChange'
            }
        }, {
            'xtype': _0xc11a('0x4ac'),
            'name': _0xc11a('0x2af'),
            'fieldLabel': Strings[_0xc11a('0x4ad')],
            'allowBlank': !0x1
        }, {
            'xtype': _0xc11a('0x394'),
            'name': 'type',
            'reference': _0xc11a('0x4a7'),
            'store': 'AttributeValueTypes',
            'fieldLabel': Strings[_0xc11a('0x2de')],
            'displayField': 'name',
            'valueField': 'id',
            'editable': !0x1
        }]
    },
    'buttons': [{
        'glyph': _0xc11a('0x4ae'),
        'tooltip': Strings[_0xc11a('0x4af')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x4b0')
    }, {
        'glyph': _0xc11a('0x3fe'),
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': 'xf00d@FontAwesome',
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define']('Traccar.view.edit.ComputedAttributesController', {
    'extend': Traccar['view'][_0xc11a('0x403')][_0xc11a('0x4b1')],
    'alias': _0xc11a('0x4b2'),
    'objectModel': _0xc11a('0x2ae'),
    'objectDialog': _0xc11a('0x4a9'),
    'removeTitle': Strings[_0xc11a('0x4ab')]
});
Ext['define'](_0xc11a('0x4b3'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': 'computedAttributesView',
    'controller': _0xc11a('0x4b5'),
    'store': 'ComputedAttributes',
    'tbar': {
        'xtype': _0xc11a('0x41b')
    },
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x478')],
            'dataIndex': 'description',
            'filter': 'string'
        }, {
            'text': Strings['sharedAttribute'],
            'dataIndex': 'attribute',
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'PositionAttributes'
            },
            'renderer': function (_0x525b91) {
                return Ext['getStore']('PositionAttributes')[_0xc11a('0x479')](_0x525b91);
            }
        }, {
            'text': Strings[_0xc11a('0x4ad')],
            'dataIndex': _0xc11a('0x2af')
        }, {
            'text': Strings[_0xc11a('0x2de')],
            'dataIndex': 'type',
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': _0xc11a('0x4b7')
            },
            'renderer': function (_0x33af9d) {
                var _0x79ab39 = Ext['getStore'](_0xc11a('0x4b7'))['getById'](_0x33af9d);
                return _0x79ab39 ? _0x79ab39['get']('name') : _0x33af9d;
            }
        }]
    }
});
Ext['define'](_0xc11a('0x4b8'), {
    'extend': Traccar['view'][_0xc11a('0x473')][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x4b9'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }, {
            'text': Strings['sharedType'],
            'dataIndex': 'type',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': {
                'type': _0xc11a('0x445'),
                'idField': 'key',
                'labelField': 'name',
                'store': 'MaintenanceTypes'
            },
            'renderer': function (_0x93b908) {
                var _0x5622e0 = Ext['getStore']('MaintenanceTypes')['getById'](_0x93b908);
                return _0x5622e0 && _0x5622e0['get']('name') || _0x93b908;
            }
        }, {
            'text': Strings[_0xc11a('0x4bb')],
            'dataIndex': 'start',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'renderer': function (_0x500b7c, _0x11d990, _0x16ad9a) {
                return Traccar['AttributeFormatter']['renderAttribute'](_0x500b7c, Ext['getStore']('MaintenanceTypes')['getById'](_0x16ad9a['get']('type')));
            }
        }, {
            'text': Strings[_0xc11a('0x4bc')],
            'dataIndex': _0xc11a('0x4bd'),
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'renderer': function (_0x2b0563, _0x566ce9, _0x79c925) {
                return Traccar['AttributeFormatter'][_0xc11a('0x4be')](_0x2b0563, Ext['getStore']('MaintenanceTypes')['getById'](_0x79c925['get']('type')));
            }
        }]
    }
});
Ext['define'](_0xc11a('0x4bf'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x4c0'),
    'init': function () {
        this['lookupReference'](_0xc11a('0x4c1'))['setHidden'](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers'));
        this['lookupReference'](_0xc11a('0x4c3'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference'](_0xc11a('0x4c4'))[_0xc11a('0x3a4')](Traccar['app']['getPreference']('limitCommands', !0x1));
        this['lookupReference']('menuDeviceDistanceButton')['setHidden'](!Traccar['app']['getUser']()['get']('administrator') && 0x0 === Traccar['app']['getUser']()['get'](_0xc11a('0x4c5')) || Traccar['app'][_0xc11a('0x4c2')]());
        this['lookupReference'](_0xc11a('0x4c6'))[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
    },
    'onGeofencesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedGeofences'],
            'items': {
                'xtype': _0xc11a('0x474'),
                'baseObjectName': 'deviceId',
                'linkObjectName': 'geofenceId',
                'storeName': 'Geofences',
                'baseObject': this['getView']()['up'](_0xc11a('0x4c7'))[_0xc11a('0x483')][_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onNotificationsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4c8')],
            'items': {
                'xtype': _0xc11a('0x496'),
                'baseObjectName': 'deviceId',
                'linkObjectName': _0xc11a('0x4c9'),
                'storeName': 'Notifications',
                'baseObject': this['getView']()['up'](_0xc11a('0x4c7'))[_0xc11a('0x483')][_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onComputedAttributesClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': _0xc11a('0x477'),
                'baseObjectName': 'deviceId',
                'linkObjectName': 'attributeId',
                'storeName': 'ComputedAttributes',
                'baseObject': this['getView']()['up'](_0xc11a('0x4c7'))[_0xc11a('0x483')][_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onDriversClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x4ca')],
            'items': {
                'xtype': _0xc11a('0x4cb'),
                'baseObjectName': 'deviceId',
                'linkObjectName': _0xc11a('0x4cc'),
                'storeName': 'Drivers',
                'baseObject': this['getView']()['up']('deviceMenu')[_0xc11a('0x483')][_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onCommandsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4cd')],
            'items': {
                'xtype': _0xc11a('0x443'),
                'baseObjectName': 'deviceId',
                'linkObjectName': _0xc11a('0x4ce'),
                'storeName': 'Commands',
                'baseObject': this['getView']()['up'](_0xc11a('0x4c7'))[_0xc11a('0x483')][_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onMaintenancesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d0')],
            'items': {
                'xtype': _0xc11a('0x4b9'),
                'baseObjectName': 'deviceId',
                'linkObjectName': 'maintenanceId',
                'storeName': 'Maintenances',
                'baseObject': this['getView']()['up'](_0xc11a('0x4c7'))[_0xc11a('0x483')][_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onDeviceDistanceClick': function () {
        var _0x2ac858, _0x395bf4 = Ext['create'](_0xc11a('0x4d1'));
        _0x395bf4['deviceId'] = this['getView']()['up']('deviceMenu')[_0xc11a('0x483')][_0xc11a('0x43b')]();
        (_0x2ac858 = Ext['getStore'](_0xc11a('0x48a'))['findRecord']('deviceId', _0x395bf4['deviceId'], 0x0, !0x1, !0x1, !0x0)) && _0x395bf4['lookupReference'](_0xc11a('0x2e6'))['setValue'](_0x2ac858['get']('attributes')[_0xc11a('0x2e6')]);
        _0x395bf4[_0xc11a('0x38a')]();
    }
});
Ext['define']('Traccar.view.DeviceMenu', {
    'extend': Ext[_0xc11a('0x41c')][_0xc11a('0x4d2')],
    'xtype': _0xc11a('0x4c7'),
    'glyph': _0xc11a('0x4d3'),
    'tooltip': Strings[_0xc11a('0x4d4')],
    'tooltipType': _0xc11a('0x401'),
    'menu': {
        'controller': 'deviceMenu',
        'items': [{
            'text': Strings[_0xc11a('0x4ca')],
            'glyph': _0xc11a('0x4d5'),
            'handler': 'onDriversClick',
            'reference': _0xc11a('0x4c1')
        }, {
            'text': Strings[_0xc11a('0x4d6')],
            'glyph': 'xf21d@FontAwesome',
            'handler': _0xc11a('0x4d7'),
            'reference': 'menuGeofencesButton'
        }, {
            'text': Strings['sharedNotifications'],
            'glyph': _0xc11a('0x4d8'),
            'handler': 'onNotificationsClick',
            'reference': _0xc11a('0x4d9')
        }, {
            'text': Strings['sharedComputedAttributes'],
            'glyph': _0xc11a('0x4db'),
            'handler': _0xc11a('0x4dc'),
            'reference': _0xc11a('0x4c3')
        }, {
            'text': Strings['sharedSavedCommands'],
            'glyph': _0xc11a('0x45d'),
            'handler': 'onCommandsClick',
            'reference': _0xc11a('0x4c4')
        }, {
            'text': Strings[_0xc11a('0x4d0')],
            'glyph': _0xc11a('0x4dd'),
            'handler': _0xc11a('0x4de'),
            'reference': _0xc11a('0x4c6')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4df')],
            'glyph': _0xc11a('0x4e0'),
            'handler': 'onDeviceDistanceClick',
            'reference': _0xc11a('0x4e1')
        }]
    }
});
Ext['define'](_0xc11a('0x4e2'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': 'devicesView',
    'controller': _0xc11a('0x4e4'),
    'store': 'VisibleDevices',
    'stateful': !0x0,
    'stateId': _0xc11a('0x4e5'),
    'tbar': {
        'componentCls': 'toolbar-header-style',
        'defaults': {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'tooltipType': _0xc11a('0x401')
        },
        'items': [{
            'xtype': _0xc11a('0x4e6'),
            'html': Strings['deviceTitle'],
            'baseCls': _0xc11a('0x4e8')
        }, {
            'xtype': _0xc11a('0x45c'),
            'disabled': !0x1
        }, {
            'handler': _0xc11a('0x41d'),
            'reference': _0xc11a('0x4e9'),
            'glyph': _0xc11a('0x41e'),
            'tooltip': Strings[_0xc11a('0x4ea')]
        }, {
            'handler': _0xc11a('0x41f'),
            'reference': _0xc11a('0x3bd'),
            'glyph': _0xc11a('0x420'),
            'tooltip': Strings[_0xc11a('0x421')]
        }, {
            'handler': _0xc11a('0x422'),
            'reference': 'toolbarRemoveButton',
            'glyph': _0xc11a('0x400'),
            'tooltip': Strings[_0xc11a('0x3b7')]
        }, {
            'handler': _0xc11a('0x4eb'),
            'reference': _0xc11a('0x484'),
            'glyph': _0xc11a('0x45d'),
            'tooltip': Strings[_0xc11a('0x2fa')]
        }, {
            'xtype': _0xc11a('0x4c7'),
            'reference': 'toolbarDeviceMenu',
            'enableToggle': !0x1
        }]
    },
    'bbar': [{
        'xtype': _0xc11a('0x4e6'),
        'html': _0xc11a('0x4ec')
    }, {
        'xtype': _0xc11a('0x356'),
        'flex': !0x0,
        'listeners': {
            'change': function () {
                this['up'](_0xc11a('0x3a7'))[_0xc11a('0x3ad')]['clearFilter']();
                var _0x50decc = RegExp(this['getValue'](), 'i');
                this['up'](_0xc11a('0x3a7'))[_0xc11a('0x3ad')]['filter'](new Ext[('util')]['Filter']({
                    'filterFn': function (_0x3e097b) {
                        var _0x452216 = !0x1;
                        Ext[_0xc11a('0x4ed')][_0xc11a('0x4ee')](_0x3e097b['data'], function (_0x3e097b, _0xa5d84d) {
                            _0x452216 = _0x452216 || _0x50decc[_0xc11a('0x35a')](String(_0xa5d84d));
                        });
                        return _0x452216;
                    }
                }));
            }
        }
    }],
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'viewConfig': {
        'enableTextSelection': !0x0,
        'getRowClass': function (_0x1c2a92) {
            var _0x348c66 = ''
                , _0x18f5df = _0x1c2a92['get']('status');
            _0x1c2a92['get']('disabled') && (_0x348c66 = _0xc11a('0x4ef'));
            _0x18f5df && (_0x348c66 += Ext['getStore'](_0xc11a('0x4f0'))['getById'](_0x18f5df)['get']('color'));
            return _0x348c66;
        }
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x469')],
            'dataIndex': 'uniqueId',
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x46e')],
            'dataIndex': 'phone',
            'hidden': !0x0
        }, {
            'text': Strings[_0xc11a('0x4f1')],
            'dataIndex': 'model',
            'hidden': !0x0
        }, {
            'text': Strings['deviceContact'],
            'dataIndex': 'contact',
            'hidden': !0x0
        }, {
            'text': Strings['groupDialog'],
            'dataIndex': 'groupId',
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'Groups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }, {
            'text': Strings[_0xc11a('0x4f2')],
            'dataIndex': 'disabled',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('disabled'),
            'hidden': !0x0,
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x4d6')],
            'dataIndex': 'geofenceIds',
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x492'),
                'idField': 'id',
                'labelField': 'name',
                'store': 'Geofences'
            },
            'renderer': function (_0x3b0b74) {
                var _0x5cd504, _0x298495, _0x24a094 = '';
                if (Ext[_0xc11a('0x494')](_0x3b0b74))
                    for (_0x5cd504 = 0x0; _0x5cd504 < _0x3b0b74['length']; _0x5cd504++)
                        (_0x298495 = Traccar['AttributeFormatter']['geofenceIdFormatter'](_0x3b0b74[_0x5cd504])) && (_0x24a094 += _0x298495 + (_0x5cd504 < _0x3b0b74['length'] - 0x1 ? ',\x20' : ''));
                return _0x24a094;
            }
        }, {
            'text': Strings[_0xc11a('0x4f3')],
            'dataIndex': 'status',
            'filter': {
                'type': 'list',
                'labelField': 'name',
                'store': _0xc11a('0x4f0')
            },
            'renderer': function (_0xfd97da) {
                return _0xfd97da && (_0xfd97da = Ext['getStore'](_0xc11a('0x4f0'))['getById'](_0xfd97da)) ? _0xfd97da['get']('name') : null;
            }
        }, {
            'text': Strings[_0xc11a('0x4f4')],
            'dataIndex': 'lastUpdate',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('lastUpdate')
        }]
    }
});
Ext['define'](_0xc11a('0x4f5'), {
    'extend': Ext['app']['ViewController'],
    'alias': 'controller.state',
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'selectdevice': 'selectDevice',
                    'selectreport': _0xc11a('0x4f6'),
                    'deselectfeature': 'deselectFeature'
                }
            },
            'global': {
                'stategeocode': _0xc11a('0x4f7')
            },
            'store': {
                '#LatestPositions': {
                    'add': _0xc11a('0x4f8'),
                    'update': _0xc11a('0x4f8')
                },
                '#ReportRoute': {
                    'clear': _0xc11a('0x4f9')
                }
            }
        }
    },
    init: function () {
        var i, attributesList; (Traccar.app.getUser().get('administrator') || !Traccar.app.getUser().get('deviceReadonly') && !Traccar.app.getPreference('readonly',!1)) && this.lookupReference('computedAttributesButton').setDisabled(Traccar.app.getBooleanAttributePreference('ui.disableComputedAttributes'));
         i = Traccar.app.getAttributePreference('ui.hidePositionAttributes'); this.hideAttributes = {};
         if (i) for (attributesList = i.split(/[ ,]+/).filter(Boolean), i = 0; i < attributesList.length; i++)this.hideAttributes[attributesList[i]] = !0
        }, onComputedAttributesClick: function () { Ext.create('Traccar.view.BaseWindow', { title: Strings.sharedComputedAttributes, items: { xtype: 'computedAttributesView' } }).show() },

            
    'keys': function () {
        var _0x58f88a, _0xb16fa, _0xf782ea;
        _0xf782ea = {};
        _0xb16fa = _0xc11a('0x4fd')['split']('\x20');
        for (_0x58f88a = 0x0; _0x58f88a < _0xb16fa['length']; _0x58f88a++)
            _0xf782ea[_0xb16fa[_0x58f88a]] = {
                'priority': _0x58f88a,
                'name': Strings['position' + _0xb16fa[_0x58f88a][_0xc11a('0x303')](/^\w/g, function (_0x58f88a) {
                    return _0x58f88a['toUpperCase']();
                })]
            };
        return _0xf782ea;
    }(),
    'updateLatest': function (_0x174441, _0x5eac42) {
        Ext['isArray'](_0x5eac42) || (_0x5eac42 = [_0x5eac42]);
        for (_0x174441 = 0x0; _0x174441 < _0x5eac42['length']; _0x174441++)
            this['deviceId'] === _0x5eac42[_0x174441]['get']('deviceId') && (this['position'] = _0x5eac42[_0x174441],
                this[_0xc11a('0x4fe')]());
    },
    'formatValue': function (_0x837eb1) {
        return 'number' === typeof id ? Number(_0x837eb1['toFixed'](0x2)) : _0x837eb1;
    },
    'findAttribute': function (_0x17472d) {
        return _0x17472d['get']('deviceId') === this[_0xc11a('0x4ff')]['get']('deviceId') && _0x17472d['get']('attribute') === this['lookupAttribute'];
    },
    'updatePosition': function () {
        var _0x429dae, _0x306467, _0x2263a8, _0x477d09, _0x32c34e;
        _0x306467 = Ext['getStore']('Attributes');
        _0x306467[_0xc11a('0x42c')]();
        for (_0x2263a8 in this[_0xc11a('0x4ff')]['data'])
            this[_0xc11a('0x4ff')]['data']['hasOwnProperty'](_0x2263a8) && void 0x0 !== this[_0xc11a('0x500')][_0x2263a8] && _0x306467['add'](Ext['create']('Traccar.model.Attribute', {
                'priority': this[_0xc11a('0x500')][_0x2263a8]['priority'],
                'name': this[_0xc11a('0x500')][_0x2263a8]['name'],
                'value': Traccar['AttributeFormatter']['getFormatter'](_0x2263a8)(this[_0xc11a('0x4ff')]['get'](_0x2263a8))
            }));
        _0x429dae = this[_0xc11a('0x4ff')]['get']('attributes');
        if (_0x429dae instanceof Object)
            for (_0x2263a8 in _0x429dae)
                _0x429dae['hasOwnProperty'](_0x2263a8) && !this['hideAttributes'][_0x2263a8] && (this[_0xc11a('0x501')] = _0x2263a8,
                    _0x477d09 = Ext['getStore']('PositionAttributes')[_0xc11a('0x479')](_0x2263a8, !0x0),
                    _0x32c34e = void 0x0 !== this[_0xc11a('0x4ff')]['get']('attribute.' + _0x2263a8) ? Traccar['AttributeFormatter'][_0xc11a('0x502')](_0x2263a8)(this[_0xc11a('0x4ff')]['get']('attribute.' + _0x2263a8)) : Traccar['AttributeFormatter']['defaultFormatter'](_0x429dae[_0x2263a8]),
                    _0x306467['add'](Ext['create']('Traccar.model.Attribute', {
                        'priority': 0x400,
                        'name': _0x477d09,
                        'attribute': _0x2263a8,
                        'value': _0x32c34e
                    })));
    },
    'selectDevice': function (_0x43256c) {
        this['deviceId'] = _0x43256c['get']('id');
        (_0x43256c = Ext['getStore'](_0xc11a('0x48a'))['findRecord']('deviceId', this['deviceId'], 0x0, !0x1, !0x1, !0x0)) ? (this[_0xc11a('0x4ff')] = _0x43256c,
            this[_0xc11a('0x4fe')]()) : (this['position'] = null,
                Ext['getStore']('Attributes')[_0xc11a('0x42c')]());
    },
    'selectReport': function (_0x270c0) {
        _0x270c0 instanceof Traccar['model']['Position'] && (this['deviceId'] = null,
            this[_0xc11a('0x4ff')] = _0x270c0,
            this[_0xc11a('0x4fe')]());
    },
    'deselectFeature': function () {
        this['position'] = this['deviceId'] = null;
        Ext['getStore'](_0xc11a('0x504'))[_0xc11a('0x42c')]();
    },
    'clearReport': function () {
        this['deviceId'] || (this[_0xc11a('0x4ff')] = null,
            Ext['getStore'](_0xc11a('0x504'))[_0xc11a('0x42c')]());
    },
    'onGeocode': function () {
        var _0x51bd7f = this[_0xc11a('0x4ff')][_0xc11a('0x43b')]();
        this[_0xc11a('0x4ff')]['get']('address') || Ext['Ajax']['request']({
            'scope': this,
            'method': _0xc11a('0x505'),
            'url': _0xc11a('0x506'),
            'params': {
                'latitude': this[_0xc11a('0x4ff')]['get']('latitude'),
                'longitude': this[_0xc11a('0x4ff')]['get']('longitude')
            },
            'success': function (_0x2d410) {
                this[_0xc11a('0x4ff')] && this[_0xc11a('0x4ff')][_0xc11a('0x43b')]() === _0x51bd7f && (this[_0xc11a('0x4ff')]['set']('address', _0x2d410['responseText']),
                    this['updatePosition']());
            },
            'failure': function (_0x51bd7f) {
                Traccar['app']['showError'](_0x51bd7f);
            }
        });
    }
});
Ext['define'](_0xc11a('0x507'), {
    'extend': Traccar['view']['GridPanel'],
    'xtype': 'stateView',
    'controller': 'state',
    'store': 'Attributes',
    'stateful': !0x0,
    'stateId': _0xc11a('0x509'),
    'tbar': {
        'componentCls': _0xc11a('0x50a'),
        'items': [{
            'xtype': 'tbtext',
            'html': Strings[_0xc11a('0x50b')],
            'baseCls': _0xc11a('0x4e8')
        }, {
            'xtype': _0xc11a('0x45c')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': 'onComputedAttributesClick',
            'reference': 'computedAttributesButton',
            'glyph': 'xf0ae@FontAwesome',
            'tooltip': Strings['sharedComputedAttributes'],
            'tooltipType': _0xc11a('0x401')
        }]
    },
    'columns': {
        'defaults': {
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'flex': 0x1
        },
        'items': [{
            'text': Strings[_0xc11a('0x50c')],
            'dataIndex': 'name'
        }, {
            'text': Strings['stateValue'],
            'dataIndex': _0xc11a('0x3d2'),
            'cellWrap': !0x0,
            'renderer': function (_0x5bcc16, _0x422300, _0x29d347) {
                if ('alarm' === _0x29d347['get']('attribute'))
                    _0x422300[_0xc11a('0x50d')] = _0xc11a('0x275');
                else {
                    if (_0x29d347['get']('name') === Strings[_0xc11a('0x50e')] && !_0x5bcc16)
                        return _0xc11a('0x50f') + Strings['sharedShowAddress'] + _0xc11a('0x510');
                    if (_0x29d347['get']('name') === Strings['positionImage'] || _0x29d347['get']('name') === Strings[_0xc11a('0x511')])
                        if (_0x422300 = this[_0xc11a('0x512')]()[_0xc11a('0x4ff')])
                            if (_0x422300 = Ext['getStore']('Devices')['getById'](_0x422300['get']('deviceId')))
                                return _0xc11a('0x513') + _0x422300['get']('uniqueId') + '/' + _0x5bcc16 + _0xc11a('0x514') + _0x5bcc16 + _0xc11a('0x510');
                }
                return _0x5bcc16;
            }
        }]
    }
});
Ext['define']('Traccar.view.dialog.ReportConfigController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x515'),
    'onSaveClick': function (_0x5dc8cb) {
        var _0x4e7c81, _0x126db2;
        _0x126db2 = this['getView']()[_0xc11a('0x516')];
        _0x126db2['deviceId'] = this['lookupReference']('deviceField')['getValue']();
        _0x126db2['groupId'] = this['lookupReference'](_0xc11a('0x517'))['getValue']();
        _0x4e7c81 = this['lookupReference'](_0xc11a('0x518'))['getValue']();
        -0x1 < _0x4e7c81[indexOf](Traccar[_0xc11a('0x3ad')][_0xc11a('0x519')]['allEvents']) ? _0x4e7c81 = [Traccar[_0xc11a('0x3ad')][_0xc11a('0x519')]['allEvents']] : _0x4e7c81['length'] === this['lookupReference'](_0xc11a('0x518'))['getStore']()[_0xc11a('0x51a')]() - 0x1 && (_0x4e7c81 = [Traccar[_0xc11a('0x3ad')][_0xc11a('0x519')]['allEvents']]);
        _0x126db2[_0xc11a('0x51b')] = _0x4e7c81;
        _0x126db2[_0xc11a('0x51c')] = this['lookupReference']('chartTypeField')['getValue']();
        _0x126db2['showMarkers'] = this['lookupReference'](_0xc11a('0x51d'))['getValue']();
        _0x126db2[_0xc11a('0x51e')] = this['lookupReference'](_0xc11a('0x51f'))['getValue']();
        _0x126db2[_0xc11a('0x520')] = this['lookupReference']('fromTimeField')['getValue']();
        _0x126db2[_0xc11a('0x521')] = this['lookupReference'](_0xc11a('0x522'))['getValue']();
        _0x126db2[_0xc11a('0x523')] = this['lookupReference'](_0xc11a('0x524'))['getValue']();
        _0x126db2[_0xc11a('0x4bd')] = this['lookupReference'](_0xc11a('0x525'))['getValue']();
        _0x126db2[_0xc11a('0x485')]();
        _0x5dc8cb['up']('window')['close']();
    },
    'onPeriodChange': function (_0x2d96bb, _0x47e63b) {
        var _0x1cacac;
        _0x2d96bb = 'custom' === _0x47e63b;
        this['lookupReference'](_0xc11a('0x526'))[_0xc11a('0x3a4')](!_0x2d96bb);
        this['lookupReference']('toContainer')[_0xc11a('0x3a4')](!_0x2d96bb);
        if (!_0x2d96bb) {
            _0x2d96bb = new Date();
            _0x1cacac = new Date();
            switch (_0x47e63b) {
                case 'today':
                    _0x1cacac['setDate'](_0x1cacac[_0xc11a('0x527')]() + 0x1);
                    break;
                case _0xc11a('0x130'):
                    _0x2d96bb[_0xc11a('0x528')](_0x1cacac['getDate']() - 0x1);
                    break;
                case _0xc11a('0x529'):
                    _0x47e63b = _0x2d96bb[_0xc11a('0x52a')]();
                    _0x47e63b = _0x2d96bb['getDate']() - _0x47e63b + (0x0 === _0x47e63b ? -0x6 : 0x1);
                    _0x2d96bb[_0xc11a('0x528')](_0x47e63b);
                    _0x1cacac[_0xc11a('0x528')](_0x47e63b + 0x7);
                    break;
                case _0xc11a('0x133'):
                    _0x47e63b = _0x2d96bb['getDay']();
                    _0x47e63b = _0x2d96bb[_0xc11a('0x527')]() - _0x47e63b + (0x0 === _0x47e63b ? -0x6 : 0x1);
                    _0x2d96bb[_0xc11a('0x528')](_0x47e63b - 0x7);
                    _0x1cacac[_0xc11a('0x528')](_0x47e63b);
                    break;
                case _0xc11a('0x135'):
                    _0x2d96bb[_0xc11a('0x528')](0x1);
                    _0x1cacac[_0xc11a('0x528')](0x1);
                    _0x1cacac[_0xc11a('0x52b')](_0x2d96bb[_0xc11a('0x52c')]() + 0x1);
                    break;
                case _0xc11a('0x137'):
                    _0x2d96bb['setDate'](0x1),
                        _0x2d96bb[_0xc11a('0x52b')](_0x2d96bb[_0xc11a('0x52c')]() - 0x1),
                        _0x1cacac[_0xc11a('0x528')](0x1);
            }
            _0x2d96bb['setHours'](0x0, 0x0, 0x0, 0x0);
            _0x1cacac[_0xc11a('0x52d')](0x0, 0x0, 0x0, 0x0);
            this['lookupReference'](_0xc11a('0x51f'))[_0xc11a('0x365')](_0x2d96bb);
            this['lookupReference'](_0xc11a('0x52e'))[_0xc11a('0x365')](_0x2d96bb);
            this['lookupReference'](_0xc11a('0x522'))[_0xc11a('0x365')](_0x1cacac);
            this['lookupReference'](_0xc11a('0x524'))['setValue'](_0x1cacac);
        }
    }
});
Ext['define']('Traccar.view.CustomTimeField', {
    'extend': Ext['form'][_0xc11a('0x35b')][_0xc11a('0x52f')],
    'xtype': _0xc11a('0x530'),
    'constructor': function (_0x427be2) {
        Traccar['app']['getPreference']('twelveHourFormat', !0x1) ? _0x427be2['format'] = Traccar['Style'][_0xc11a('0x531')] : _0x427be2['format'] = Traccar['Style'][_0xc11a('0x532')];
        this[_0xc11a('0x3c7')](arguments);
    }
});
Ext['define'](_0xc11a('0x533'), {
    'extend': Traccar['view']['dialog']['Base'],
    'controller': _0xc11a('0x534'),
    'title': Strings[_0xc11a('0x535')],
    'items': [{
        'fieldLabel': Strings[_0xc11a('0x536')],
        'xtype': _0xc11a('0x537'),
        'reference': 'deviceField',
        'maxWidth': Traccar['Style']['formFieldWidth'],
        'store': 'Devices',
        'valueField': 'id',
        'displayField': 'name',
        'queryMode': _0xc11a('0x3e0')
    }, {
        'fieldLabel': Strings[_0xc11a('0x538')],
        'xtype': _0xc11a('0x537'),
        'reference': _0xc11a('0x517'),
        'maxWidth': Traccar['Style'][_0xc11a('0x539')],
        'store': 'Groups',
        'valueField': 'id',
        'displayField': 'name',
        'queryMode': 'local'
    }, {
        'fieldLabel': Strings[_0xc11a('0x53a')],
        'xtype': 'tagfield',
        'reference': _0xc11a('0x518'),
        'maxWidth': Traccar['Style'][_0xc11a('0x539')],
        'store': _0xc11a('0x519'),
        'hidden': !0x0,
        'valueField': 'type',
        'displayField': 'name',
        'queryMode': _0xc11a('0x3e0')
    }, {
        'fieldLabel': Strings[_0xc11a('0x53b')],
        'xtype': 'combobox',
        'reference': 'chartTypeField',
        'store': 'ReportChartTypes',
        'hidden': !0x0,
        'value': 'speed',
        'valueField': 'key',
        'displayField': 'name',
        'queryMode': _0xc11a('0x3e0')
    }, {
        'fieldLabel': Strings[_0xc11a('0x53d')],
        'xtype': _0xc11a('0x53e'),
        'reference': _0xc11a('0x51d'),
        'inputValue': !0x0,
        'uncheckedValue': !0x1,
        'value': !0x1
    }, {
        'fieldLabel': Strings[_0xc11a('0x53f')],
        'reference': _0xc11a('0x525'),
        'xtype': _0xc11a('0x394'),
        'store': _0xc11a('0x540'),
        'editable': !0x1,
        'valueField': 'key',
        'displayField': 'name',
        'queryMode': _0xc11a('0x3e0'),
        'listeners': {
            'change': _0xc11a('0x541')
        }
    }, {
        'xtype': _0xc11a('0x45b'),
        'layout': _0xc11a('0x542'),
        'reference': 'fromContainer',
        'hidden': !0x0,
        'fieldLabel': Strings['reportFrom'],
        'items': [{
            'xtype': 'datefield',
            'reference': _0xc11a('0x51f'),
            'startDay': Traccar['Style'][_0xc11a('0x543')],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date(new Date()['getTime']() - 0x1b7740)
        }, {
            'xtype': _0xc11a('0x530'),
            'reference': _0xc11a('0x52e'),
            'value': new Date(new Date()[_0xc11a('0x545')]() - 0x1b7740)
        }]
    }, {
        'xtype': 'fieldcontainer',
        'layout': 'vbox',
        'reference': _0xc11a('0x546'),
        'hidden': !0x0,
        'fieldLabel': Strings[_0xc11a('0x547')],
        'items': [{
            'xtype': _0xc11a('0x548'),
            'reference': _0xc11a('0x522'),
            'startDay': Traccar['Style'][_0xc11a('0x543')],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date()
        }, {
            'xtype': _0xc11a('0x530'),
            'reference': _0xc11a('0x524'),
            'value': new Date()
        }]
    }],
    'buttons': [{
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings['sharedSave'],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': _0xc11a('0x3ff')
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x549'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x54a'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'selectdevice': 'selectDevice',
                    'showsingleevent': _0xc11a('0x54b'),
                    'deselectfeature': _0xc11a('0x47d')
                },
                'map': {
                    'selectreport': _0xc11a('0x4f6')
                }
            },
            'global': {
                'routegeocode': _0xc11a('0x4f7')
            },
            'store': {
                '#ReportEvents': {
                    'add': _0xc11a('0x54c'),
                    'load': _0xc11a('0x54c')
                },
                '#ReportRoute': {
                    'load': _0xc11a('0x54d')
                },
                '#ReportStops': {
                    'load': _0xc11a('0x54c')
                }
            }
        }
    },
    'hideReports': function () {
        Traccar['app'][_0xc11a('0x54e')](!0x1);
    },
    'getGrid': function () {
        return this['getView']()[_0xc11a('0x54f')](_0xc11a('0x3a7'));
    },
    'getChart': function () {
        return this['getView']()[_0xc11a('0x54f')](_0xc11a('0x550'));
    },
    'init': function () {
        var _0x161376, _0x45f7a4, _0x4f0a70;
        _0x45f7a4 = Ext['getStore']('PositionAttributes')['getData']()[_0xc11a('0x3e5')];
        for (_0x161376 = 0x0; _0x161376 < _0x45f7a4['length']; _0x161376++)
            _0x4f0a70 = _0x45f7a4[_0x161376],
                this[_0xc11a('0x551')]['push']({
                    'text': _0x4f0a70['get']('name'),
                    'dataIndex': 'attribute.' + _0x4f0a70['get']('key'),
                    'renderer': Traccar['AttributeFormatter'][_0xc11a('0x502')](_0x4f0a70['get']('key')),
                    'hidden': !0x0
                });
        if (Traccar['app'][_0xc11a('0x4c2')]()) {
            for (_0x161376 = 0x0; _0x161376 < this[_0xc11a('0x552')]['length']; _0x161376++)
                this[_0xc11a('0x552')][_0x161376][_0xc11a('0x553')][_0xc11a('0x554')]('engineHours|spentFuel') && (this[_0xc11a('0x552')][_0x161376][_0xc11a('0x555')] = !0x0);
            for (_0x161376 = 0x0; _0x161376 < this[_0xc11a('0x556')]['length']; _0x161376++)
                this[_0xc11a('0x556')][_0x161376][_0xc11a('0x553')][_0xc11a('0x554')](_0xc11a('0x557')) && (this[_0xc11a('0x556')][_0x161376][_0xc11a('0x555')] = !0x0);
            for (_0x161376 = 0x0; _0x161376 < this[_0xc11a('0x558')]['length']; _0x161376++)
                this[_0xc11a('0x558')][_0x161376][_0xc11a('0x553')]['match'](_0xc11a('0x559')) && (this['stopsColumns'][_0x161376][_0xc11a('0x555')] = !0x0);
        }
    },
    'onConfigureClick': function () {
        var _0x5c7cb1 = Ext['create']('Traccar.view.dialog.ReportConfig');
        _0x5c7cb1['lookupReference'](_0xc11a('0x518'))[_0xc11a('0x3a4')]('events' !== this['lookupReference'](_0xc11a('0x55a'))['getValue']());
        _0x5c7cb1['lookupReference'](_0xc11a('0x55b'))[_0xc11a('0x3a4')](_0xc11a('0x550') !== this['lookupReference'](_0xc11a('0x55a'))['getValue']());
        _0x5c7cb1[_0xc11a('0x516')] = this;
        _0x5c7cb1['lookupReference']('deviceField')[_0xc11a('0x365')](this['deviceId']);
        _0x5c7cb1['lookupReference'](_0xc11a('0x517'))[_0xc11a('0x365')](this['groupId']);
        void 0x0 !== this[_0xc11a('0x51b')] ? _0x5c7cb1['lookupReference'](_0xc11a('0x518'))[_0xc11a('0x365')](this[_0xc11a('0x51b')]) : _0x5c7cb1['lookupReference'](_0xc11a('0x518'))['setValue']([Traccar[_0xc11a('0x3ad')][_0xc11a('0x519')]['allEvents']]);
        void 0x0 !== this[_0xc11a('0x51c')] && _0x5c7cb1['lookupReference'](_0xc11a('0x55b'))['setValue'](this[_0xc11a('0x51c')]);
        void 0x0 !== this[_0xc11a('0x55c')] && _0x5c7cb1['lookupReference']('showMarkersField')[_0xc11a('0x365')](this[_0xc11a('0x55c')]);
        void 0x0 !== this[_0xc11a('0x51e')] && _0x5c7cb1['lookupReference']('fromDateField')['setValue'](this[_0xc11a('0x51e')]);
        void 0x0 !== this[_0xc11a('0x520')] && _0x5c7cb1['lookupReference'](_0xc11a('0x52e'))[_0xc11a('0x365')](this[_0xc11a('0x520')]);
        void 0x0 !== this['toDate'] && _0x5c7cb1['lookupReference'](_0xc11a('0x522'))['setValue'](this[_0xc11a('0x521')]);
        void 0x0 !== this[_0xc11a('0x523')] && _0x5c7cb1['lookupReference'](_0xc11a('0x524'))[_0xc11a('0x365')](this[_0xc11a('0x523')]);
        void 0x0 !== this['period'] && _0x5c7cb1['lookupReference'](_0xc11a('0x525'))[_0xc11a('0x365')](this[_0xc11a('0x4bd')]);
        _0x5c7cb1[_0xc11a('0x38a')]();
    },
    'updateButtons': function () {
        var _0x375d3e, _0x313880, _0x111f08;
        _0x375d3e = this['lookupReference'](_0xc11a('0x55a'))['getValue']();
        _0x313880 = this['deviceId'] && 0x0 !== this['deviceId']['length'] || this['groupId'] && 0x0 !== this['groupId']['length'];
        _0x111f08 = this[_0xc11a('0x51e')] && this[_0xc11a('0x520')] && this[_0xc11a('0x521')] && this[_0xc11a('0x523')];
        _0x313880 = !_0x375d3e || !_0x313880 || !_0x111f08 || this[_0xc11a('0x55d')];
        this['lookupReference'](_0xc11a('0x55e'))['setDisabled'](_0x313880);
        this['lookupReference'](_0xc11a('0x55f'))['setDisabled'](_0xc11a('0x550') === _0x375d3e || _0x313880);
    },
    'onReportClick': function (_0x4d9076) {
        var _0x19e483, _0x3d9b53, _0x239303;
        this[_0xc11a('0x560')]()[_0xc11a('0x3b3')]()[_0xc11a('0x48d')]();
        (_0x19e483 = this['lookupReference']('reportTypeField')['getValue']()) && (this['deviceId'] || this['groupId']) && (_0x3d9b53 = new Date(this['fromDate'][_0xc11a('0x561')](), this[_0xc11a('0x51e')][_0xc11a('0x52c')](), this[_0xc11a('0x51e')][_0xc11a('0x527')](), this[_0xc11a('0x520')]['getHours'](), this[_0xc11a('0x520')]['getMinutes'](), this[_0xc11a('0x520')][_0xc11a('0x562')](), this[_0xc11a('0x520')][_0xc11a('0x563')]()),
            _0x239303 = new Date(this['toDate'][_0xc11a('0x561')](), this[_0xc11a('0x521')][_0xc11a('0x52c')](), this[_0xc11a('0x521')]['getDate'](), this[_0xc11a('0x523')][_0xc11a('0x564')](), this[_0xc11a('0x523')][_0xc11a('0x565')](), this[_0xc11a('0x523')][_0xc11a('0x562')](), this[_0xc11a('0x523')][_0xc11a('0x563')]()),
            this[_0xc11a('0x55d')] = !0x0,
            this[_0xc11a('0x485')](),
            _0xc11a('0x55e') === _0x4d9076[_0xc11a('0x566')] ? ('chart' === _0x19e483 ? (_0x4d9076 = this['getChart']()['getStore'](),
                this[_0xc11a('0x567')]()[_0xc11a('0x568')]([])) : _0x4d9076 = this[_0xc11a('0x560')]()['getStore'](),
                _0x4d9076[_0xc11a('0x55c')] = this[_0xc11a('0x55c')],
                _0x4d9076['load']({
                    'scope': this,
                    'callback': function () {
                        this[_0xc11a('0x55d')] = !0x1;
                        this[_0xc11a('0x485')]();
                    },
                    'params': {
                        'deviceId': this['deviceId'],
                        'groupId': this['groupId'],
                        'type': this[_0xc11a('0x51b')],
                        'from': _0x3d9b53[_0xc11a('0x569')](),
                        'to': _0x239303[_0xc11a('0x569')]()
                    }
                })) : _0xc11a('0x55f') === _0x4d9076[_0xc11a('0x566')] && (_0x4d9076 = this[_0xc11a('0x560')]()['getStore']()[_0xc11a('0x44c')]()[_0xc11a('0x56a')],
                    this[_0xc11a('0x56b')](_0x4d9076, {
                        'deviceId': this['deviceId'],
                        'groupId': this['groupId'],
                        'type': this[_0xc11a('0x51b')],
                        'from': Ext['Date']['format'](_0x3d9b53, 'c'),
                        'to': Ext['Date']['format'](_0x239303, 'c')
                    })));
    },
    'onClearClick': function () {
        var _0x5b82fc = this['lookupReference'](_0xc11a('0x55a'))['getValue']();
        this[_0xc11a('0x4f9')](_0x5b82fc);
    },
    'clearReport': function (_0x31f6fb) {
        this[_0xc11a('0x560')]()['getStore']()['removeAll']();
        'trips' !== _0x31f6fb && 'events' !== _0x31f6fb && 'stops' !== _0x31f6fb || Ext['getStore']('ReportRoute')[_0xc11a('0x42c')]();
        _0xc11a('0x550') === _0x31f6fb && this[_0xc11a('0x567')]()['getStore']()['removeAll']();
    },
    'onSelectionChange': function (_0x1c13ca, _0x275785) {
        0x0 < _0x275785['length'] && (_0x1c13ca = _0x275785[0x0],
            this['fireEvent'](_0xc11a('0x56c'), _0x1c13ca, !0x0),
            _0x1c13ca instanceof Traccar['model'][_0xc11a('0x56d')] && this[_0xc11a('0x56e')](_0x1c13ca),
            (_0x1c13ca instanceof Traccar['model'][_0xc11a('0x56f')] || _0x1c13ca instanceof Traccar['model']['ReportStop']) && this[_0xc11a('0x570')](_0x1c13ca));
    },
    'selectDevice': function (_0x40d90c) {
        _0x40d90c && this[_0xc11a('0x560')]()[_0xc11a('0x3b3')]()[_0xc11a('0x48d')]();
    },
    'selectReport': function (_0x27b9e6) {
        var _0x15e16c = this['lookupReference'](_0xc11a('0x55a'))['getValue']();
        if (_0x27b9e6 instanceof Traccar['model']['Position'])
            if ('route' === _0x15e16c)
                this[_0xc11a('0x560')]()[_0xc11a('0x3b3')]()[_0xc11a('0x437')]([_0x27b9e6], !0x1, !0x0),
                    this['getGrid']()['getView']()[_0xc11a('0x489')](_0x27b9e6);
            else if ('events' === _0x15e16c || _0xc11a('0x572') === _0x15e16c)
                _0x27b9e6 = this[_0xc11a('0x560')]()['getStore']()['findRecord']('positionId', _0x27b9e6['get']('id'), 0x0, !0x1, !0x0, !0x0),
                    this['getGrid']()['getSelectionModel']()[_0xc11a('0x437')]([_0x27b9e6], !0x1, !0x0),
                    this['getGrid']()['getView']()[_0xc11a('0x489')](_0x27b9e6);
    },
    'deselectFeature': function () {
        'trips' !== this['lookupReference'](_0xc11a('0x55a'))['getValue']() && this[_0xc11a('0x560')]()[_0xc11a('0x3b3')]()[_0xc11a('0x48d')]();
    },
    'selectTrip': function (_0x2cc5d8) {
        var _0x2d4699, _0x1ad93a;
        _0x2d4699 = new Date(_0x2cc5d8['get']('startTime'));
        _0x1ad93a = new Date(_0x2cc5d8['get']('endTime'));
        Ext['getStore'](_0xc11a('0x573'))[_0xc11a('0x42c')]();
        Ext['getStore']('ReportRoute')[_0xc11a('0x55c')] = this[_0xc11a('0x55c')];
        Ext['getStore'](_0xc11a('0x573'))['load']({
            'params': {
                'deviceId': _0x2cc5d8['get']('deviceId'),
                'from': _0x2d4699[_0xc11a('0x569')](),
                'to': _0x1ad93a[_0xc11a('0x569')]()
            }
        });
    },
    'selectPositionRelated': function (_0x3c3154) {
        _0x3c3154['get']('positionId') && (_0x3c3154 = Ext['getStore'](_0xc11a('0x573'))['getById'](_0x3c3154['get']('positionId'))) && this['fireEvent'](_0xc11a('0x56c'), _0x3c3154, !0x0);
    },
    'loadRelatedPositions': function (_0x3b99e7, _0xcf9ec3) {
        var _0x31513b, _0x5a565f = [];
        Ext['getStore'](_0xc11a('0x573'))[_0xc11a('0x42c')]();
        for (_0x3b99e7 = 0x0; _0x3b99e7 < _0xcf9ec3['length']; _0x3b99e7++)
            _0x31513b = _0xcf9ec3[_0x3b99e7],
                _0x31513b['get']('positionId') && _0x5a565f['push'](_0x31513b['get']('positionId'));
        0x0 < _0x5a565f['length'] && Ext['getStore'](_0xc11a('0x574'))['load']({
            'params': {
                'id': _0x5a565f
            },
            'scope': this,
            'callback': function (_0x3b99e7, _0xcf9ec3, _0x31513b) {
                _0x31513b && (Ext['getStore'](_0xc11a('0x573'))[_0xc11a('0x55c')] = this['showMarkers'],
                    Ext['getStore'](_0xc11a('0x573'))['add'](_0x3b99e7),
                    0x1 === _0x3b99e7['length'] && this['fireEvent'](_0xc11a('0x56c'), _0x3b99e7[0x0], !0x1));
            }
        });
    },
    'loadRoute': function (_0x5b267a) {
        var _0x3c1324, _0x358036, _0x1b6058;
        if (_0xc11a('0x550') === this['lookupReference'](_0xc11a('0x55a'))['getValue']()) {
            this[_0xc11a('0x567')]()[_0xc11a('0x575')]()[0x0][_0xc11a('0x576')](Ext['getStore']('ReportChartTypes')['findRecord']('key', this[_0xc11a('0x51c')])['get']('name'));
            _0x358036 = [];
            _0x3c1324 = _0x5b267a[_0xc11a('0x577')]('deviceId');
            for (_0x5b267a = 0x0; _0x5b267a < _0x3c1324['length']; _0x5b267a++)
                _0x1b6058 = Ext['create'](_0xc11a('0x578'), {
                    'source': _0xc11a('0x573'),
                    'filters': [{
                        'property': 'deviceId',
                        'value': _0x3c1324[_0x5b267a]
                    }]
                }),
                    _0x358036['push']({
                        'type': _0xc11a('0x579'),
                        'store': _0x1b6058,
                        'yField': this[_0xc11a('0x51c')],
                        'xField': 'fixTime',
                        'highlightCfg': {
                            'scaling': Traccar['Style'][_0xc11a('0x57a')]
                        },
                        'colors': [Traccar['app']['getReportColor'](_0x3c1324[_0x5b267a])],
                        'marker': {
                            'type': _0xc11a('0x57b'),
                            'radius': Traccar['Style'][_0xc11a('0x57c')],
                            'fill': Traccar['app']['getReportColor'](_0x3c1324[_0x5b267a])
                        }
                    });
            this[_0xc11a('0x567')]()[_0xc11a('0x568')](_0x358036);
        }
    },
    'onChartMarkerClick': function (_0x5e6a7a, _0x408898) {
        this['fireEvent'](_0xc11a('0x56c'), _0x408898[_0xc11a('0x408')], !0x0);
    },
    'showSingleEvent': function (_0x5ee76f) {
        this['lookupReference'](_0xc11a('0x55a'))[_0xc11a('0x365')]('events');
        Ext['getStore'](_0xc11a('0x57d'))['load']({
            'id': _0x5ee76f,
            'scope': this,
            'callback': function (_0x5ee76f, _0x13b6dc, _0x3ab382) {
                _0x3ab382 && (Ext['getStore'](_0xc11a('0x57e'))['add'](_0x5ee76f),
                    0x0 < _0x5ee76f['length'] && (_0x5ee76f[0x0]['get']('positionId') || (Traccar['app'][_0xc11a('0x57f')]() ? Traccar['app'][_0xc11a('0x54e')](!0x0) : this['getView']()['expand']()),
                        this['getGrid']()[_0xc11a('0x3b3')]()[_0xc11a('0x437')]([_0x5ee76f[0x0]], !0x1, !0x0),
                        this[_0xc11a('0x560')]()['getView']()[_0xc11a('0x489')](_0x5ee76f[0x0])));
            }
        });
    },
    'downloadFile': function (_0x23b0e7, _0x41a0fa) {
        Ext['Ajax']['request']({
            'url': _0x23b0e7,
            'method': _0xc11a('0x505'),
            'timeout': Traccar['Style'][_0xc11a('0x11b')],
            'params': _0x41a0fa,
            'headers': {
                'Accept': _0xc11a('0x580')
            },
            'binary': !0x0,
            'scope': this,
            'callback': function (_0x23b0e7, _0x41a0fa, _0x1317ab) {
                var _0x40c1bc, _0x42390a;
                _0x41a0fa && (_0x23b0e7 = _0x1317ab[_0xc11a('0x581')](_0xc11a('0x582')),
                    _0x23b0e7 = _0x23b0e7['slice'](_0x23b0e7[indexOf]('=') + 0x1, _0x23b0e7['length']),
                    _0x41a0fa = _0x1317ab[_0xc11a('0x581')](_0xc11a('0x583')),
                    _0x1317ab = new Blob([_0x1317ab['responseBytes']], {
                        'type': _0x41a0fa
                    }),
                    'undefined' !== typeof window[_0xc11a('0x584')][_0xc11a('0x585')] ? window[_0xc11a('0x584')]['msSaveBlob'](_0x1317ab, _0x23b0e7) : (_0x40c1bc = window[_0xc11a('0x586')] || window[_0xc11a('0x587')],
                        _0x42390a = _0x40c1bc['createObjectURL'](_0x1317ab),
                        _0x23b0e7 && Ext['dom']['Helper'][_0xc11a('0x588')](Ext['getBody'](), {
                            'tag': 'a',
                            'href': _0x42390a,
                            'download': _0x23b0e7
                        })['click'](),
                        setTimeout(function () {
                            _0x40c1bc[_0xc11a('0x589')](_0x42390a);
                        }, 0x64)));
                this[_0xc11a('0x55d')] = !0x1;
                this['updateButtons']();
            }
        });
    },
    'onTypeChange': function (_0x3a4d6e, _0x43a4d0, _0x480570) {
        null !== _0x480570 && this[_0xc11a('0x4f9')](_0x480570);
        'route' === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')](_0xc11a('0x573'), this[_0xc11a('0x551')]),
            this['getView']()[_0xc11a('0x58b')]()[_0xc11a('0x58c')](_0xc11a('0x3a7'))) : 'events' === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')](_0xc11a('0x57e'), this[_0xc11a('0x58d')]),
                this['getView']()[_0xc11a('0x58b')]()[_0xc11a('0x58c')](_0xc11a('0x3a7'))) : _0xc11a('0x58e') === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')]('ReportSummary', this[_0xc11a('0x552')]),
                    this['getView']()[_0xc11a('0x58b')]()[_0xc11a('0x58c')](_0xc11a('0x3a7'))) : 'trips' === _0x43a4d0 ? (this[_0xc11a('0x560')]()[_0xc11a('0x58a')]('ReportTrips', this[_0xc11a('0x556')]),
                        this['getView']()[_0xc11a('0x58b')]()[_0xc11a('0x58c')](_0xc11a('0x3a7'))) : 'stops' === _0x43a4d0 ? (this[_0xc11a('0x560')]()['reconfigure'](_0xc11a('0x58f'), this[_0xc11a('0x558')]),
                            this['getView']()[_0xc11a('0x58b')]()[_0xc11a('0x58c')](_0xc11a('0x3a7'))) : _0xc11a('0x550') === _0x43a4d0 && this['getView']()['getLayout']()[_0xc11a('0x58c')](_0xc11a('0x550'));
        this[_0xc11a('0x485')]();
    },
    'onGeocode': function (_0x2ace72) {
        var _0x330e4c = Ext['getStore'](_0xc11a('0x573'))['getById'](_0x2ace72);
        _0x330e4c && !_0x330e4c['get']('address') && Ext['Ajax']['request']({
            'scope': this,
            'method': _0xc11a('0x505'),
            'url': 'api/server/geocode',
            'params': {
                'latitude': _0x330e4c['get']('latitude'),
                'longitude': _0x330e4c['get']('longitude')
            },
            'success': function (_0x2ace72) {
                _0x330e4c['set']('address', _0x2ace72['responseText']);
                _0x330e4c[_0xc11a('0x590')]();
                this['fireEvent'](_0xc11a('0x4f6'), _0x330e4c);
            },
            'failure': function (_0x2ace72) {
                Traccar['app']['showError'](_0x2ace72);
            }
        });
    },
    'routeColumns': [{
        'text': Strings[_0xc11a('0x591')],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x592')],
        'dataIndex': 'valid',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('valid')
    }, {
        'text': Strings[_0xc11a('0x593')],
        'dataIndex': 'fixTime',
        'xtype': 'datecolumn',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('fixTime')
    }, {
        'text': Strings[_0xc11a('0x594')],
        'dataIndex': 'latitude',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('latitude')
    }, {
        'text': Strings[_0xc11a('0x595')],
        'dataIndex': 'longitude',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('longitude')
    }, {
        'text': Strings[_0xc11a('0x596')],
        'dataIndex': 'altitude',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('altitude')
    }, {
        'text': Strings['positionSpeed'],
        'dataIndex': 'speed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x50e')],
        'dataIndex': 'address',
        'renderer': function (_0x1a38c7, _0xf9e45e, _0x4efb6b) {
            return _0x1a38c7 ? Traccar['AttributeFormatter']['getFormatter']('address')(_0x1a38c7) : _0xc11a('0x597') + _0x4efb6b['getId']() + _0xc11a('0x598') + Strings[_0xc11a('0x599')] + _0xc11a('0x510');
        }
    }],
    'eventsColumns': [{
        'text': Strings[_0xc11a('0x593')],
        'dataIndex': 'serverTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('serverTime')
    }, {
        'text': Strings[_0xc11a('0x591')],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x2de')],
        'dataIndex': 'type',
        'renderer': function (_0x4f42c4) {
            return Traccar['app']['getEventString'](_0x4f42c4);
        }
    }, {
        'text': Strings[_0xc11a('0x2f4')],
        'dataIndex': 'geofenceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('geofenceId')
    }, {
        'text': Strings[_0xc11a('0x59b')],
        'dataIndex': 'maintenanceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('maintenanceId')
    }],
    'summaryColumns': [{
        'text': Strings['reportDeviceName'],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings['sharedDistance'],
        'dataIndex': 'distance',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('distance')
    }, {
        'text': Strings[_0xc11a('0x59c')],
        'dataIndex': 'averageSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x59d')],
        'dataIndex': 'maxSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x59e')],
        'dataIndex': 'engineHours',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings[_0xc11a('0x59f')],
        'dataIndex': 'spentFuel',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('spentFuel')
    }],
    'tripsColumns': [{
        'text': Strings[_0xc11a('0x591')],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x5a0')],
        'dataIndex': 'startTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('startTime')
    }, {
        'text': Strings['reportStartAddress'],
        'dataIndex': 'startAddress',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('address')
    }, {
        'text': Strings[_0xc11a('0x5a1')],
        'dataIndex': 'endTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('endTime')
    }, {
        'text': Strings[_0xc11a('0x5a2')],
        'dataIndex': 'endAddress',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('address')
    }, {
        'text': Strings[_0xc11a('0x5a3')],
        'dataIndex': 'distance',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('distance')
    }, {
        'text': Strings[_0xc11a('0x59c')],
        'dataIndex': 'averageSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x59d')],
        'dataIndex': 'maxSpeed',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('speed')
    }, {
        'text': Strings[_0xc11a('0x5a4')],
        'dataIndex': 'duration',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings[_0xc11a('0x59f')],
        'dataIndex': 'spentFuel',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('spentFuel')
    }, {
        'text': Strings[_0xc11a('0x5a5')],
        'dataIndex': 'driverUniqueId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('driverUniqueId')
    }],
    'stopsColumns': [{
        'text': Strings['reportDeviceName'],
        'dataIndex': 'deviceId',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
    }, {
        'text': Strings[_0xc11a('0x5a0')],
        'dataIndex': 'startTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('startTime')
    }, {
        'text': Strings[_0xc11a('0x50e')],
        'dataIndex': 'address',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('address')
    }, {
        'text': Strings[_0xc11a('0x5a1')],
        'dataIndex': 'endTime',
        'xtype': _0xc11a('0x59a'),
        'renderer': Traccar['AttributeFormatter']['getFormatter']('endTime')
    }, {
        'text': Strings[_0xc11a('0x5a4')],
        'dataIndex': 'duration',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings[_0xc11a('0x59e')],
        'dataIndex': 'engineHours',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('duration')
    }, {
        'text': Strings['reportSpentFuel'],
        'dataIndex': 'spentFuel',
        'renderer': Traccar['AttributeFormatter']['getFormatter']('spentFuel')
    }]
});
Ext['define'](_0xc11a('0x5a6'), {
    'extend': Ext[_0xc11a('0x5a7')][_0xc11a('0x3a8')],
    'xtype': _0xc11a('0x3a3'),
    'controller': _0xc11a('0x5a8'),
    'title': Strings[_0xc11a('0x5a9')],
    'tools': [{
        'type': 'close',
        'tooltip': Strings[_0xc11a('0x5aa')],
        'handler': _0xc11a('0x5ab')
    }],
    'tbar': {
        'scrollable': !0x0,
        'items': [{
            'xtype': _0xc11a('0x4e6'),
            'html': Strings[_0xc11a('0x2de')]
        }, {
            'xtype': 'combobox',
            'reference': 'reportTypeField',
            'store': _0xc11a('0x5ac'),
            'displayField': 'name',
            'valueField': 'key',
            'editable': !0x1,
            'listeners': {
                'change': 'onTypeChange'
            }
        }, '-', {
            'text': Strings[_0xc11a('0x535')],
            'handler': _0xc11a('0x5ad')
        }, '-', {
            'text': Strings[_0xc11a('0x5ae')],
            'reference': _0xc11a('0x55e'),
            'disabled': !0x0,
            'handler': _0xc11a('0x5af')
        }, {
            'text': Strings['reportExport'],
            'reference': _0xc11a('0x55f'),
            'disabled': !0x0,
            'handler': _0xc11a('0x5af')
        }, {
            'text': Strings[_0xc11a('0x5b0')],
            'handler': _0xc11a('0x5b1')
        }]
    },
    'layout': _0xc11a('0x5b2'),
    'items': [{
        'xtype': _0xc11a('0x3a9'),
        'itemId': _0xc11a('0x3a7'),
        'listeners': {
            'selectionchange': _0xc11a('0x425')
        },
        'columns': {
            'defaults': {
                'flex': 0x1,
                'minWidth': Traccar['Style'][_0xc11a('0x444')]
            },
            'items': []
        },
        'style': Traccar['Style']['reportGridStyle']
    }, {
        'xtype': _0xc11a('0x5b3'),
        'itemId': _0xc11a('0x550'),
        'plugins': {
            'ptype': _0xc11a('0x5b4'),
            'moveEvents': !0x0
        },
        'store': _0xc11a('0x573'),
        'axes': [{
            'title': Strings['reportChart'],
            'type': 'numeric',
            'position': 'left'
        }, {
            'type': _0xc11a('0x5b5'),
            'position': _0xc11a('0x5b6'),
            'fields': ['fixTime']
        }],
        'listeners': {
            'itemclick': _0xc11a('0x5b7')
        },
        'insetPadding': Traccar['Style'][_0xc11a('0x5b8')]
    }]
});
Ext['define']('Traccar.view.EventsController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x5b9'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'deselectevent': _0xc11a('0x5ba')
                }
            },
            'store': {
                '#Events': {
                    'add': _0xc11a('0x5bb')
                }
            }
        }
    },
    'init': function () {
        var _0x1fcea2 = this;
        setInterval(function () {
            _0x1fcea2['getView']()['getView']()[_0xc11a('0x481')]();
        }, Traccar['Style'][_0xc11a('0x5bc')]);
        Traccar['app'][_0xc11a('0x57f')]() && this['lookupReference'](_0xc11a('0x5bd'))['setHidden'](!0x1);
    },
    'onRemoveClick': function () {
        var _0x5b05a0;
        if (_0x5b05a0 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0])
            Ext['getStore'](_0xc11a('0x57d'))['remove'](_0x5b05a0),
                (_0x5b05a0 = _0x5b05a0['get']('positionId')) && !Ext['getStore'](_0xc11a('0x57d'))['findRecord']('positionId', _0x5b05a0, 0x0, !0x1, !0x1, !0x0) && Ext['getStore'](_0xc11a('0x5be'))['remove'](Ext['getStore']('EventPositions')['getById'](_0x5b05a0));
    },
    'onClearClick': function () {
        Ext['getStore'](_0xc11a('0x57d'))[_0xc11a('0x42c')]();
        Ext['getStore'](_0xc11a('0x5be'))[_0xc11a('0x42c')]();
    },
    'onAddEvent': function () {
        this['lookupReference'](_0xc11a('0x5bf'))[_0xc11a('0x5c0')] && this['getView']()[_0xc11a('0x5c1')](0x0, Number['POSITIVE_INFINITY'], !0x0);
    },
    'onScrollToLastClick': function (_0x4e0be6, _0x3292db) {
        if (_0x3292db)
            this[_0xc11a('0x5bb')]();
    },
    'onHideEvents': function () {
        Traccar['app']['showEvents'](!0x1);
    },
    'deselectEvent': function () {
        this['getView']()[_0xc11a('0x3b3')]()['deselectAll']();
    },
    'onSelectionChange': function (_0x24c9a3, _0x2fb846) {
        var _0xda1731;
        if (_0x24c9a3 = 0x0 < _0x2fb846['length'] ? _0x2fb846[0x0] : null)
            (_0x2fb846 = _0x24c9a3['get']('positionId')) ? (_0xda1731 = Ext['getStore']('EventPositions')['getById'](_0x2fb846)) ? this['fireEvent'](_0xc11a('0x5c2'), _0xda1731) : Ext['getStore'](_0xc11a('0x5be'))['load']({
                'params': {
                    'id': _0x2fb846
                },
                'scope': this,
                'addRecords': !0x0,
                'callback': function (_0x24c9a3, _0x2fb846, _0xda1731) {
                    _0xda1731 && 0x0 < _0x24c9a3['length'] && this['fireEvent'](_0xc11a('0x5c2'), _0x24c9a3[0x0]);
                }
            }) : this['fireEvent'](_0xc11a('0x5c2'));
        this['lookupReference'](_0xc11a('0x5c3'))['setDisabled'](!_0x24c9a3);
    }
});
Ext['define'](_0xc11a('0x5c4'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': 'eventsView',
    'controller': 'events',
    'store': _0xc11a('0x57d'),
    'stateful': !0x0,
    'stateId': _0xc11a('0x5c6'),
    'title': Strings[_0xc11a('0x5c7')],
    'sortableColumns': !0x1,
    'header': !0x1,
    'tbar': {
        'componentCls': _0xc11a('0x50a'),
        'defaults': {
            'xtype': _0xc11a('0x41c'),
            'tooltipType': _0xc11a('0x401'),
            'stateEvents': ['toggle'],
            'enableToggle': !0x0,
            'stateful': {
                'pressed': !0x0
            }
        },
        'items': [{
            'xtype': _0xc11a('0x4e6'),
            'html': Strings['reportEvents'],
            'baseCls': 'x-panel-header-title-default'
        }, {
            'xtype': _0xc11a('0x45c')
        }, {
            'glyph': _0xc11a('0x5c8'),
            'pressed': !0x0,
            'toggleHandler': _0xc11a('0x5c9'),
            'stateId': _0xc11a('0x5ca'),
            'tooltip': Strings['eventsScrollToLast'],
            'reference': _0xc11a('0x5bf')
        }, {
            'id': _0xc11a('0x5cb'),
            'glyph': _0xc11a('0x5cc'),
            'tooltip': Strings[_0xc11a('0x5cd')],
            'stateId': _0xc11a('0x5ce')
        }, {
            'glyph': _0xc11a('0x5cf'),
            'tooltip': Strings['sharedRemove'],
            'handler': _0xc11a('0x422'),
            'reference': _0xc11a('0x5c3'),
            'disabled': !0x0,
            'stateful': !0x1,
            'enableToggle': !0x1
        }, {
            'glyph': _0xc11a('0x5d0'),
            'tooltip': Strings['reportClear'],
            'handler': 'onClearClick',
            'stateful': !0x1,
            'enableToggle': !0x1
        }, {
            'glyph': _0xc11a('0x400'),
            'tooltip': Strings[_0xc11a('0x5aa')],
            'handler': _0xc11a('0x5d1'),
            'reference': _0xc11a('0x5bd'),
            'hidden': !0x0,
            'stateful': !0x1,
            'enableToggle': !0x1
        }]
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings['sharedDevice'],
            'dataIndex': 'deviceId',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceId')
        }, {
            'flex': 0x2,
            'text': Strings[_0xc11a('0x2c7')],
            'dataIndex': 'text'
        }, {
            'text': Strings[_0xc11a('0x593')],
            'dataIndex': 'serverTime',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('lastUpdate')
        }]
    }
});
Ext['define'](_0xc11a('0x5d2'), {
    'extend': Ext[_0xc11a('0x5a7')][_0xc11a('0x3a8')],
    'xtype': _0xc11a('0x5d3'),
    'layout': _0xc11a('0x3c1'),
    'getMap': function () {
        return this['map'];
    },
    'getMapView': function () {
        return this['mapView'];
    },
    'initMap': function () {
        var _0x284053, _0x4f61d8, _0x3bd1b3, _0x5032c7, _0x427bca, _0x38fdf1, _0x26e842;
        _0x284053 = Traccar['app']['getServer']();
        _0x4f61d8 = Traccar['app']['getPreference']('map', null);
        _0x284053['get']('bingKey');
        _0x284053 = [new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5d5'),
            'type': _0xc11a('0x43f'),
            'visible': !0x0,
            'source': new ol[(_0xc11a('0x5d6'))]['XYZ']({
                'url': _0x284053['get']('mapUrl')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5d7'),
            'type': 'base',
            'visible': _0xc11a('0x5d8') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x5d9'))]({
                'url': _0xc11a('0x5da')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5db'),
            'type': _0xc11a('0x43f'),
            'visible': _0xc11a('0x5dc') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))]['XYZ']({
                'url': _0xc11a('0x5dd')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5de'),
            'type': _0xc11a('0x43f'),
            'visible': _0xc11a('0x5df') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x5d9'))]({
                'url': _0xc11a('0x5e0')
            })
        }), new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5e2'),
            'type': _0xc11a('0x43f'),
            'visible': _0xc11a('0x5e3') == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x5d9'))]({
                'url': _0xc11a('0x5e4'),
                'attributions': _0xc11a('0x5e5')
            })
        }), new ol['layer'][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5e6'),
            'type': _0xc11a('0x43f'),
            'visible': 'osm' == _0x4f61d8 || '' == _0x4f61d8 || null == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x5e7'))]({})
        }), new ol[(_0xc11a('0x5e1'))]['Tile']({
            'title': 'Mapa\x20Baidu',
            'type': _0xc11a('0x43f'),
            'visible': 'baidu' == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x5d9'))]({
                'projection': 'BD-MC',
                'tileUrlFunction': function (_0x284053) {
                    var _0x4f61d8 = _0x284053[0x0]
                        , _0x3bd1b3 = _0x284053[0x1];
                    _0x284053 = _0x284053[0x2];
                    var _0x5032c7;
                    _0x5032c7 = ((_0x3bd1b3 << _0x4f61d8) + _0x284053) % 0x5;
                    0x0 > _0x3bd1b3 && (_0x3bd1b3 = 'M' + -_0x3bd1b3);
                    0x0 > _0x284053 && (_0x284053 = 'M' + -_0x284053);
                    return 'http://online{}.map.bdimg.com/onlinelabel/?qt=tile&x={x}&y={y}&z={z}&styles=pl'['replace']('{}', 0x0 > _0x5032c7 ? _0x5032c7 + 0x5 : _0x5032c7)[_0xc11a('0x303')]('{x}', _0x3bd1b3)[_0xc11a('0x303')](_0xc11a('0x5e8'), _0x284053)[_0xc11a('0x303')](_0xc11a('0x5e9'), _0x4f61d8);
                },
                'tileGrid': new ol[(_0xc11a('0x5ea'))][(_0xc11a('0x5eb'))]({
                    'extent': ol['proj']['transformExtent']([-0xb4, -0x4a, 0xb4, 0x4a], _0xc11a('0x5ec'), _0xc11a('0x5ed')),
                    'origin': [0x0, 0x0],
                    'minZoom': 0x3,
                    'resolutions': [0x40000, 0x20000, 0x10000, 0x8000, 0x4000, 0x2000, 0x1000, 0x800, 0x400, 0x200, 0x100, 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1, 0.5]
                }),
                'attributions': _0xc11a('0x5ee')
            })
        }), new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x5d4'))]({
            'title': _0xc11a('0x5ef'),
            'type': 'base',
            'visible': 'yandexMap' == _0x4f61d8 ? !0x0 : !0x1,
            'source': new ol[(_0xc11a('0x5d6'))]['XYZ']({
                'url': 'https://vec0{1-4}.maps.yandex.net/tiles?l=map&x={x}&y={y}&z={z}',
                'projection': _0xc11a('0x5f0'),
                'attributions': _0xc11a('0x5f1')
            })
        })];
        _0x4f61d8 = Traccar['app']['getPreference']('latitude', Traccar['Style'][_0xc11a('0x5f2')]);
        _0x3bd1b3 = Traccar['app']['getPreference']('longitude', Traccar['Style'][_0xc11a('0x5f3')]);
        _0x5032c7 = Traccar['app']['getPreference']('zoom', Traccar['Style']['mapDefaultZoom']);
        _0x427bca = Traccar['app']['getAttributePreference']('web.maxZoom', Traccar['Style']['mapMaxZoom']);
        this[_0xc11a('0x5f4')] = new ol['View']({
            'center': ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x3bd1b3, _0x4f61d8]),
            'zoom': _0x5032c7,
            'maxZoom': _0x427bca
        });
        this['map'] = new ol['Map']({
            'target': this[_0xc11a('0x5f7')]['dom']['id'],
            'layers': _0x284053,
            'view': this[_0xc11a('0x5f4')]
        });
        _0x284053 = new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5f9'))]({
            'tipLabel': ''
        });
        this['map'][_0xc11a('0x5fa')](_0x284053);
        (_0x284053 = Traccar['app']['getPreference']('poiLayer', null)) && this['map']['addLayer'](new ol[(_0xc11a('0x5e1'))]['Vector']({
            'source': new ol[(_0xc11a('0x5d6'))]['Vector']({
                'url': _0x284053,
                'format': new ol[('format')][(_0xc11a('0x5fb'))]()
            })
        }));
        this[_0xc11a('0x5f7')][_0xc11a('0x5fc')][_0xc11a('0x5fd')] = 0x0;
        switch (Traccar['app']['getAttributePreference']('distanceUnit', 'km')) {
            case 'mi':
                this['map'][_0xc11a('0x5fa')](new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5fe'))]({
                    'units': 'us'
                }));
                break;
            case 'nmi':
                this['map'][_0xc11a('0x5fa')](new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5fe'))]({
                    'units': _0xc11a('0x5ff')
                }));
                break;
            default:
                this['map']['addControl'](new ol[(_0xc11a('0x5f8'))][(_0xc11a('0x5fe'))]());
        }
        _0x38fdf1 = this['map'][_0xc11a('0x600')]();
        'string' === typeof _0x38fdf1 && (_0x38fdf1 = Ext['get'](_0x38fdf1)[_0xc11a('0x5fc')]);
        this['map']['on'](_0xc11a('0x601'), function (_0x284053) {
            this[_0xc11a('0x602')](_0x284053[_0xc11a('0x603')], function () {
                return !0x0;
            }) ? _0x38fdf1[_0xc11a('0x3c5')]['cursor'] = _0xc11a('0x604') : _0x38fdf1[_0xc11a('0x3c5')]['cursor'] = '';
        });
        _0x26e842 = new ol[(_0xc11a('0x605'))][(_0xc11a('0x606'))]();
        this['map'][_0xc11a('0x607')](_0x26e842);
        _0x284053 = new Geocoder(_0xc11a('0x608'), {
            'provider': 'osm',
            'lang': _0xc11a('0x609'),
            'placeholder': 'Pesquisar\x20Endereço\x20...',
            'limit': 0x5,
            'debug': !0x1,
            'autoComplete': !0x0,
            'keepOpen': !0x0
        });
        this['map'][_0xc11a('0x5fa')](_0x284053);
        _0x284053[_0xc11a('0x60a')]()['setVisible'](!0x1);
        _0x284053['on'](_0xc11a('0x60b'), function (_0x284053) {
            console[_0xc11a('0x60c')](_0x284053);
            window['setTimeout'](function () {
                _0x26e842[_0xc11a('0x38a')](_0x284053[_0xc11a('0x60d')], _0x284053['address'][_0xc11a('0x60e')]);
            }, 0xbb8);
        });
        this['map']['on'](_0xc11a('0x60f'), function (_0x284053) {
            var _0x4f61d8, _0x3bd1b3 = this['map'][_0xc11a('0x610')](_0x284053[_0xc11a('0x603')], {
                'layerFilter': function (_0x284053) {
                    return !_0x284053['get']('name');
                }
            });
            if (_0x3bd1b3)
                for (_0x4f61d8 = 0x0; _0x4f61d8 < _0x3bd1b3['length']; _0x4f61d8++)
                    this['fireEvent'](_0xc11a('0x611'), _0x3bd1b3[_0x4f61d8]);
            else
                overlay[_0xc11a('0x48b')](void 0x0),
                    this['fireEvent'](_0xc11a('0x612'));
            if (_0x3bd1b3)
                for (_0x4f61d8 = 0x0; _0x4f61d8 < _0x3bd1b3['length']; _0x4f61d8++) {
                    var _0x5032c7 = _0x3bd1b3[_0x4f61d8]['get'](_0xc11a('0x408'));
                    _0x5032c7 && _0x5032c7 instanceof Traccar['model'][_0xc11a('0x40e')] && Traccar['app']['showOverlay'](this['map'], _0x5032c7, _0x284053);
                }
        }, this);
    },
    'listeners': {
        'afterrender': function () {
            this[_0xc11a('0x613')]();
        },
        'resize': function () {
            this['map'][_0xc11a('0x614')]();
        }
    }
}, function () {
    proj4[_0xc11a('0x615')](_0xc11a('0x5ed'), _0xc11a('0x616'));
    proj4[_0xc11a('0x615')](_0xc11a('0x5f0'), _0xc11a('0x617'));
    ol[_0xc11a('0x5f5')]['get'](_0xc11a('0x5f0'))[_0xc11a('0x618')]([-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244]);
});
Ext['define'](_0xc11a('0x619'), {
    'singleton': !0x0,
    'getImageSvg': function (_0x56776c, _0x55b26d, _0x5bbfd1, _0x3bda14) {
        var _0x4afaba, _0x8c2a81, _0x54df54, _0x51af57, _0x189d8b;
        _0x3bda14 = Ext['getStore']('DeviceImages')['findRecord']('key', _0x3bda14 || _0xc11a('0x61a'), 0x0, !0x1, !0x1, !0x0);
        (_0x8c2a81 = Ext[_0xc11a('0x3d5')](_0x3bda14['get'](_0xc11a('0x61b')))) || (_0x8c2a81 = this[_0xc11a('0x61c')](_0x3bda14['get'](_0xc11a('0x61b'))));
        _0x54df54 = parseFloat(_0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x61e')](_0xc11a('0x61f')));
        _0x51af57 = parseFloat(_0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x61e')](_0xc11a('0x620')));
        _0x189d8b = _0x3bda14['get'](_0xc11a('0x621'));
        Ext[_0xc11a('0x494')](_0x189d8b) || (_0x189d8b = [_0x189d8b]);
        for (_0x4afaba = 0x0; _0x4afaba < _0x189d8b['length']; _0x4afaba++)
            _0x8c2a81['getElementById'](_0x189d8b[_0x4afaba])['style'][_0xc11a('0x622')] = _0x56776c;
        _0x56776c = _0xc11a('0x623') + _0x5bbfd1 + '\x20' + _0x54df54 / 0x2 + '\x20' + _0x51af57 / 0x2 + ')';
        _0x8c2a81['getElementById'](_0x3bda14['get'](_0xc11a('0x624')))[_0xc11a('0x625')](_0xc11a('0x626'), _0x56776c);
        _0x55b26d ? (_0x54df54 *= Traccar['Style'][_0xc11a('0x627')],
            _0x51af57 *= Traccar['Style'][_0xc11a('0x627')],
            _0x55b26d = _0xc11a('0x628') + Traccar['Style'][_0xc11a('0x627')] + ')\x20') : (_0x54df54 *= Traccar['Style'][_0xc11a('0x629')],
                _0x51af57 *= Traccar['Style']['mapScaleNormal'],
                _0x55b26d = _0xc11a('0x628') + Traccar['Style'][_0xc11a('0x629')] + ')\x20');
        _0x3bda14['get'](_0xc11a('0x62a')) !== _0x3bda14['get']('rotateId') ? _0x8c2a81['getElementById'](_0x3bda14['get']('scaleId'))[_0xc11a('0x625')](_0xc11a('0x626'), _0x55b26d) : _0x8c2a81['getElementById'](_0x3bda14['get'](_0xc11a('0x62a')))['setAttribute']('transform', _0x55b26d + '\x20' + _0x56776c);
        _0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x625')](_0xc11a('0x61f'), _0x54df54);
        _0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x625')](_0xc11a('0x620'), _0x51af57);
        _0x8c2a81[_0xc11a('0x61d')][_0xc11a('0x625')](_0xc11a('0x62b'), '0\x200\x20' + _0x54df54 + '\x20' + _0x51af57);
        return _0x8c2a81;
    },
    'formatSrc': function (_0x1d9637) {
        return 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(new XMLSerializer()['serializeToString'](_0x1d9637[_0xc11a('0x61d')]));
    },
    'cloneDocument': function (_0x545e2c) {
        var _0x379736;
        _0x379736 = _0x545e2c[_0xc11a('0x62c')]['createDocument'](_0x545e2c[_0xc11a('0x62d')], null, null);
        _0x545e2c = _0x379736[_0xc11a('0x62e')](_0x545e2c[_0xc11a('0x61d')], !0x0);
        _0x379736[_0xc11a('0x62f')](_0x545e2c);
        return _0x379736;
    },
    'getImageIcon': function (_0x50cc32, _0x2a8bbe, _0x433cfc, _0x41abb4) {
        var _0x8a5987, _0x1c8bda, _0x55bc11;
        _0x8a5987 = this['getImageSvg'](_0x50cc32, _0x2a8bbe, _0x433cfc, _0x41abb4);
        _0x1c8bda = parseFloat(_0x8a5987[_0xc11a('0x61d')]['getAttribute'](_0xc11a('0x61f')));
        _0x55bc11 = parseFloat(_0x8a5987[_0xc11a('0x61d')][_0xc11a('0x61e')](_0xc11a('0x620')));
        _0x8a5987 = new ol['style']['Icon']({
            'imgSize': [_0x1c8bda, _0x55bc11],
            'src': this[_0xc11a('0x630')](_0x8a5987)
        });
        _0x8a5987[_0xc11a('0x622')] = _0x50cc32;
        _0x8a5987['zoom'] = _0x2a8bbe;
        _0x8a5987[_0xc11a('0x631')] = _0x433cfc;
        _0x8a5987['category'] = _0x41abb4;
        return _0x8a5987;
    }
});
Ext['define'](_0xc11a('0x632'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x633'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'selectdevice': 'selectDevice',
                    'selectreport': _0xc11a('0x4f6'),
                    'selectevent': 'selectEvent'
                },
                'devices': {
                    'deselectfeature': _0xc11a('0x634')
                }
            },
            'store': {
                '#Devices': {
                    'add': _0xc11a('0x635'),
                    'update': _0xc11a('0x635'),
                    'remove': _0xc11a('0x636')
                },
                '#VisibleDevices': {
                    'add': _0xc11a('0x637'),
                    'update': 'updateVisibleDevices',
                    'remove': _0xc11a('0x637'),
                    'refresh': 'filterDevices'
                },
                '#LatestPositions': {
                    'add': _0xc11a('0x4f8'),
                    'update': _0xc11a('0x4f8')
                },
                '#ReportRoute': {
                    'add': _0xc11a('0x638'),
                    'load': _0xc11a('0x639'),
                    'clear': _0xc11a('0x4f9')
                },
                '#Events': {
                    'remove': 'clearEvent',
                    'clear': _0xc11a('0x63a')
                }
            },
            'component': {
                '#': {
                    'selectfeature': 'selectFeature',
                    'deselectfeature': 'deselectFeature'
                }
            }
        }
    },
    'init': function () {
        this[_0xc11a('0x63b')] = {};
        this[_0xc11a('0x63c')] = {};
        this[_0xc11a('0x63d')] = {};
        this[_0xc11a('0x63e')] = {};
        this[_0xc11a('0x63f')] = Traccar['app']['getAttributePreference']('web.liveRouteLength', 0xa);
        this['selectZoom'] = Traccar['app']['getAttributePreference']('web.selectZoom', 0x0);
    },
    'getAreaStyle': function (_0x23f777, _0x596c01) {
        var _0x27ac84;
        _0x596c01 ? _0x27ac84 = ol['color'][_0xc11a('0x640')](_0x596c01) : (_0x27ac84 = ol['color'][_0xc11a('0x640')](Traccar['Style'][_0xc11a('0x641')]),
            _0x596c01 = Traccar['Style'][_0xc11a('0x641')]);
        _0x27ac84[0x3] = Traccar['Style']['mapGeofenceOverlayOpacity'];
        _0x27ac84 = {
            'fill': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x642'))]({
                'color': _0x27ac84
            }),
            'stroke': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x643'))]({
                'color': _0x596c01,
                'width': Traccar['Style'][_0xc11a('0x644')]
            })
        };
        _0x23f777 && (_0x27ac84['text'] = new ol['style'][(_0xc11a('0x645'))]({
            'text': _0x23f777,
            'overflow': !0x0,
            'fill': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x642'))]({
                'color': Traccar['Style'][_0xc11a('0x646')]
            }),
            'stroke': new ol[(_0xc11a('0x3c5'))]['Stroke']({
                'color': Traccar['Style']['mapTextStrokeColor'],
                'width': Traccar['Style'][_0xc11a('0x647')]
            }),
            'font': Traccar['Style']['mapTextFont']
        }));
        return new ol['style'][('Style')](_0x27ac84);
    },
    'getDeviceColor': function (_0x5403cc) {
        switch (_0x5403cc['get']('status')) {
            case 'online':
                return Traccar['Style']['mapColorOnline'];
            case _0xc11a('0x273'):
                return Traccar['Style'][_0xc11a('0x648')];
            default:
                return Traccar['Style'][_0xc11a('0x649')];
        }
    },
    'updateDevice': function (_0x486e58, _0x50ea76) {
        var _0x177f73, _0x13bd12, _0x9ac140;
        Ext[_0xc11a('0x494')](_0x50ea76) || (_0x50ea76 = [_0x50ea76]);
        for (_0x486e58 = 0x0; _0x486e58 < _0x50ea76['length']; _0x486e58++)
            if (_0x177f73 = _0x50ea76[_0x486e58],
                _0x13bd12 = _0x177f73['get']('id'),
                _0x13bd12 in this['latestMarkers']) {
                _0x13bd12 = this[_0xc11a('0x63b')][_0x13bd12];
                _0x9ac140 = _0x13bd12[_0xc11a('0x64a')]();
                if (_0x9ac140[_0xc11a('0x64b')]()[_0xc11a('0x622')] !== this[_0xc11a('0x64c')](_0x177f73) || _0x9ac140[_0xc11a('0x64b')]()['category'] !== _0x177f73['get']('category'))
                    this[_0xc11a('0x64d')](_0x9ac140, this[_0xc11a('0x64c')](_0x177f73), _0x177f73['get']('category')),
                        _0x13bd12[_0xc11a('0x64e')]();
                _0x9ac140[_0xc11a('0x64f')]()[_0xc11a('0x64f')]() !== _0x177f73['get']('name') && (_0x9ac140[_0xc11a('0x64f')]()[_0xc11a('0x650')](_0x177f73['get']('name')),
                    _0x13bd12['changed']());
            }
    },
    'removeDevice': function (_0x15c1ac, _0x5a516f) {
        var _0xc63949, _0xc2d28f;
        Ext[_0xc11a('0x494')](_0x5a516f) || (_0x5a516f = [_0x5a516f]);
        _0xc2d28f = this['getView']()['getMarkersSource']();
        for (_0x15c1ac = 0x0; _0x15c1ac < _0x5a516f['length']; _0x15c1ac++)
            _0xc63949 = _0x5a516f[_0x15c1ac]['get']('id'),
                this[_0xc11a('0x63b')][_0xc63949] && (_0xc2d28f[_0xc11a('0x651')](this[_0xc11a('0x63b')][_0xc63949][_0xc11a('0x43b')]()) && _0xc2d28f[_0xc11a('0x652')](this[_0xc11a('0x63b')][_0xc63949]),
                    delete this[_0xc11a('0x63b')][_0xc63949]),
                this[_0xc11a('0x63d')][_0xc63949] && (_0xc2d28f['getFeatureById'](this['accuracyCircles'][_0xc63949]['getId']()) && _0xc2d28f[_0xc11a('0x652')](this['accuracyCircles'][_0xc63949]),
                    delete this['accuracyCircles'][_0xc63949]),
                this[_0xc11a('0x63e')][_0xc63949] && (_0xc2d28f[_0xc11a('0x651')](this[_0xc11a('0x63e')][_0xc63949][_0xc11a('0x43b')]()) && _0xc2d28f[_0xc11a('0x652')](this[_0xc11a('0x63e')][_0xc63949]),
                    delete this[_0xc11a('0x63e')][_0xc63949]);
    },
    'updateLatest': function (_0x482652, _0x15abf2) {
        var _0x5f5a25, _0x37ed45, _0x4b0f44;
        Ext[_0xc11a('0x494')](_0x15abf2) || (_0x15abf2 = [_0x15abf2]);
        _0x4b0f44 = Ext['getStore']('Devices');
        for (_0x482652 = 0x0; _0x482652 < _0x15abf2['length']; _0x482652++)
            if (_0x5f5a25 = _0x15abf2[_0x482652],
                _0x37ed45 = _0x4b0f44['getById'](_0x5f5a25['get']('deviceId')))
                this[_0xc11a('0x653')](_0x5f5a25, _0x37ed45),
                    this[_0xc11a('0x654')](_0x5f5a25, _0x37ed45),
                    this[_0xc11a('0x655')](_0x5f5a25, _0x37ed45);
    },
    'updateAccuracy': function (_0x39fd95, _0x1ffd82) {
        var _0x5a1e23, _0x10eaa9, _0x2be59d, _0x1baaf0;
        _0x10eaa9 = this['getView']()[_0xc11a('0x656')]();
        _0x2be59d = this[_0xc11a('0x63d')][_0x39fd95['get']('deviceId')];
        _0x39fd95['get']('accuracy') ? (_0x1baaf0 = _0x10eaa9[_0xc11a('0x657')](),
            _0x5a1e23 = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x39fd95['get']('longitude'), _0x39fd95['get']('latitude')]),
            _0x1baaf0 = ol[_0xc11a('0x5f5')][_0xc11a('0x658')](_0x1baaf0, _0x10eaa9['getResolution'](), _0x5a1e23),
            _0x10eaa9 = _0x39fd95['get']('accuracy') / ol[_0xc11a('0x5f5')][_0xc11a('0x659')]['m'] * _0x10eaa9[_0xc11a('0x65a')]() / _0x1baaf0,
            _0x2be59d ? (_0x2be59d[_0xc11a('0x65b')]()[_0xc11a('0x65c')](_0x5a1e23),
                _0x2be59d[_0xc11a('0x65b')]()[_0xc11a('0x65d')](_0x10eaa9)) : (_0x2be59d = new ol[(_0xc11a('0x65e'))](new ol[(_0xc11a('0x65f'))][(_0xc11a('0x115'))](_0x5a1e23, _0x10eaa9)),
                    _0x2be59d[_0xc11a('0x660')](this[_0xc11a('0x661')](null, Traccar['Style'][_0xc11a('0x662')])),
                    _0x2be59d[_0xc11a('0x663')](_0x39fd95['get']('deviceId')),
                    this['accuracyCircles'][_0x39fd95['get']('deviceId')] = _0x2be59d,
                    this[_0xc11a('0x664')](_0x1ffd82) && this['getView']()[_0xc11a('0x665')]()['addFeature'](_0x2be59d))) : (_0x2be59d && this['getView']()[_0xc11a('0x665')]()['getFeatureById'](_0x2be59d[_0xc11a('0x43b')]()) && this['getView']()['getAccuracySource']()[_0xc11a('0x652')](_0x2be59d),
                        delete this[_0xc11a('0x63d')][_0x39fd95['get']('deviceId')]);
    },
    'updateLatestMarker': function (_0x217cb1, _0x3574d4) {
        var _0x57179f, _0x32cd2b, _0x223a16, _0xe13a9a;
        _0x57179f = new ol['geom']['Point'](ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x217cb1['get']('longitude'), _0x217cb1['get']('latitude')]));
        _0x32cd2b = _0x217cb1['get']('deviceId');
        _0x32cd2b in this[_0xc11a('0x63b')] ? (_0x223a16 = this['latestMarkers'][_0x32cd2b],
            _0xe13a9a = _0x223a16[_0xc11a('0x64a')](),
            _0xe13a9a[_0xc11a('0x64b')]()[_0xc11a('0x631')] !== _0x217cb1['get']('course') && this[_0xc11a('0x666')](_0xe13a9a, _0x217cb1['get']('course')),
            _0x223a16[_0xc11a('0x667')](_0x57179f)) : (_0x223a16 = new ol[(_0xc11a('0x65e'))](_0x57179f),
                _0x223a16['set'](_0xc11a('0x408'), _0x3574d4),
                _0xe13a9a = this[_0xc11a('0x668')](this[_0xc11a('0x64c')](_0x3574d4), _0x217cb1['get']('course'), _0x3574d4['get']('category')),
                _0xe13a9a[_0xc11a('0x64f')]()[_0xc11a('0x650')](_0x3574d4['get']('name')),
                _0x223a16['setStyle'](_0xe13a9a),
                _0x223a16[_0xc11a('0x663')](_0x3574d4['get']('id')),
                this[_0xc11a('0x63b')][_0x32cd2b] = _0x223a16,
                this[_0xc11a('0x664')](_0x3574d4) && this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x66a')](_0x223a16));
        _0x223a16 === this[_0xc11a('0x66b')] && this['lookupReference']('deviceFollowButton')[_0xc11a('0x5c0')] && this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x65c')](_0x223a16['getGeometry']()['getCoordinates']());
    },
    'updateLiveRoute': function (_0x5d536b, _0x333a52) {
        var _0x261f4d, _0x586257;
        _0x261f4d = _0x5d536b['get']('deviceId');
        if (_0x261f4d in this[_0xc11a('0x63e')]) {
            if (_0x333a52 = this[_0xc11a('0x63e')][_0x261f4d][_0xc11a('0x65b')]()['getCoordinates'](),
                _0x586257 = _0x333a52[_0x333a52['length'] - 0x1],
                _0x5d536b = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x5d536b['get']('longitude'), _0x5d536b['get']('latitude')]),
                _0x586257[0x0] !== _0x5d536b[0x0] || _0x586257[0x1] !== _0x5d536b[0x1])
                _0x333a52['length'] >= this[_0xc11a('0x63f')] && _0x333a52[_0xc11a('0x66c')](),
                    _0x333a52['push'](_0x5d536b),
                    this[_0xc11a('0x63e')][_0x261f4d][_0xc11a('0x65b')]()[_0xc11a('0x66d')](_0x333a52);
        } else
            _0x5d536b = new ol[(_0xc11a('0x65e'))]({
                'geometry': new ol['geom'][(_0xc11a('0x117'))]([ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x5d536b['get']('longitude'), _0x5d536b['get']('latitude')])])
            }),
                _0x5d536b[_0xc11a('0x660')](this[_0xc11a('0x66e')](_0x261f4d)),
                _0x5d536b[_0xc11a('0x663')](_0x261f4d),
                this[_0xc11a('0x63e')][_0x261f4d] = _0x5d536b,
                this[_0xc11a('0x664')](_0x333a52) && this['getView']()[_0xc11a('0x669')]()['addFeature'](_0x5d536b);
    },
    'loadReport': function (_0x175b86, _0x165034) {
        var _0x46dd8d, _0x9dea10;
        if (_0x165034)
            for (this[_0xc11a('0x638')](_0x175b86, _0x165034),
                _0x9dea10 = this['getView']()[_0xc11a('0x66f')](),
                this['reportRoute'] = [],
                _0x175b86 = 0x0; _0x175b86 < _0x165034['length']; _0x175b86++) {
                _0x46dd8d = _0x165034[_0x175b86];
                _0x46dd8d = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x46dd8d['get']('longitude'), _0x46dd8d['get']('latitude')]);
                if (0x0 === _0x175b86 || _0x165034[_0x175b86]['get']('deviceId') !== _0x165034[_0x175b86 - 0x1]['get']('deviceId'))
                    this['reportRoute']['push'](new ol[(_0xc11a('0x65e'))]({
                        'geometry': new ol['geom']['LineString']([])
                    })),
                        this['reportRoute'][this['reportRoute']['length'] - 0x1][_0xc11a('0x660')](this[_0xc11a('0x66e')](_0x165034[_0x175b86]['get']('deviceId'))),
                        _0x9dea10['addFeature'](this['reportRoute'][this['reportRoute']['length'] - 0x1]);
                this['reportRoute'][this['reportRoute']['length'] - 0x1][_0xc11a('0x65b')]()[_0xc11a('0x670')](_0x46dd8d);
            }
    },
    'addReportMarker': function (_0x5afe8a) {
        var _0x3aa234;
        _0x3aa234 = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x5afe8a['get']('longitude'), _0x5afe8a['get']('latitude')]);
        _0x3aa234 = new ol[(_0xc11a('0x65f'))][(_0xc11a('0x671'))](_0x3aa234);
        _0x3aa234 = new ol[(_0xc11a('0x65e'))](_0x3aa234);
        _0x3aa234['set'](_0xc11a('0x408'), _0x5afe8a);
        _0x5afe8a = this[_0xc11a('0x672')](_0x5afe8a['get']('deviceId'), _0x5afe8a['get']('course'));
        _0x3aa234[_0xc11a('0x660')](_0x5afe8a);
        this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x66a')](_0x3aa234);
        return _0x3aa234;
    },
    'addReportMarkers': function (_0x286928, _0x1ecd38) {
        var _0x37d794;
        this['clearReport']();
        for (_0x37d794 = 0x0; _0x37d794 < _0x1ecd38['length']; _0x37d794++)
            _0x286928[_0xc11a('0x55c')] && (this[_0xc11a('0x63c')][_0x1ecd38[_0x37d794]['get']('id')] = this['addReportMarker'](_0x1ecd38[_0x37d794]));
        this[_0xc11a('0x673')](_0x1ecd38);
    },
    'clearReport': function () {
        var _0x10fac4, _0x16ad08, _0x26bb35;
        _0x26bb35 = this['getView']()[_0xc11a('0x66f')]();
        if (this['reportRoute']) {
            for (_0x16ad08 = 0x0; _0x16ad08 < this['reportRoute']['length']; _0x16ad08++)
                _0x26bb35['removeFeature'](this['reportRoute'][_0x16ad08]);
            this['reportRoute'] = null;
        }
        if (this['reportMarkers']) {
            _0x16ad08 = this['getView']()[_0xc11a('0x669')]();
            for (_0x10fac4 in this[_0xc11a('0x63c')])
                this[_0xc11a('0x63c')]['hasOwnProperty'](_0x10fac4) && _0x16ad08[_0xc11a('0x652')](this['reportMarkers'][_0x10fac4]);
            this[_0xc11a('0x63c')] = {};
        }
        this[_0xc11a('0x66b')] && !this[_0xc11a('0x66b')]['get'](_0xc11a('0x2c6')) && this[_0xc11a('0x66b')]['get'](_0xc11a('0x408')) instanceof Traccar['model']['Position'] && (this[_0xc11a('0x66b')] = null);
    },
    'clearEvent': function () {
        this[_0xc11a('0x66b')] && this[_0xc11a('0x66b')]['get'](_0xc11a('0x2c6')) && this[_0xc11a('0x674')](null, !0x1);
    },
    'getRouteStyle': function (_0x53fd36) {
        return new ol[(_0xc11a('0x3c5'))][('Style')]({
            'stroke': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x643'))]({
                'color': Traccar['app']['getReportColor'](_0x53fd36),
                'width': Traccar['Style'][_0xc11a('0x675')]
            })
        });
    },
    'getMarkerStyle': function (_0x2d3c85, _0x8082dc, _0x5a4e44, _0x496c8b) {
        _0x2d3c85 = Traccar['DeviceImages'][_0xc11a('0x676')](_0x8082dc, _0x2d3c85, _0x5a4e44, _0x496c8b);
        return new ol[(_0xc11a('0x3c5'))][('Style')]({
            'image': _0x2d3c85,
            'text': new ol['style'][(_0xc11a('0x645'))]({
                'textBaseline': _0xc11a('0x5b6'),
                'fill': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x642'))]({
                    'color': Traccar['Style']['mapTextColor']
                }),
                'stroke': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x643'))]({
                    'color': Traccar['Style'][_0xc11a('0x677')],
                    'width': Traccar['Style'][_0xc11a('0x647')]
                }),
                'offsetY': -_0x2d3c85[_0xc11a('0x678')]()[0x1] / 0x2 - Traccar['Style'][_0xc11a('0x679')],
                'font': Traccar['Style'][_0xc11a('0x67a')]
            })
        });
    },
    'getLatestMarker': function (_0x4b7c6f, _0x99cecd, _0x54c688) {
        return this['getMarkerStyle'](!0x1, _0x4b7c6f, _0x99cecd, _0x54c688);
    },
    'getReportMarker': function (_0x5a34f1, _0x2997c0) {
        return this[_0xc11a('0x67b')](!0x1, Traccar['app'][_0xc11a('0x67c')](_0x5a34f1), _0x2997c0, 'arrow');
    },
    'resizeMarker': function (_0x2c4d50, _0x8083) {
        var _0x3b4a92;
        _0x8083 = Traccar[_0xc11a('0x470')]['getImageIcon'](_0x2c4d50[_0xc11a('0x64b')]()[_0xc11a('0x622')], _0x8083, _0x2c4d50['getImage']()[_0xc11a('0x631')], _0x2c4d50[_0xc11a('0x64b')]()['category']);
        _0x3b4a92 = _0x2c4d50[_0xc11a('0x64f')]();
        _0x3b4a92[_0xc11a('0x67d')](-_0x8083[_0xc11a('0x678')]()[0x1] / 0x2 - Traccar['Style'][_0xc11a('0x679')]);
        _0x2c4d50[_0xc11a('0x650')](_0x3b4a92);
        _0x2c4d50['setImage'](_0x8083);
    },
    'rotateMarker': function (_0x114864, _0x3e8211) {
        _0x114864[_0xc11a('0x67e')](Traccar[_0xc11a('0x470')][_0xc11a('0x676')](_0x114864['getImage']()[_0xc11a('0x622')], _0x114864['getImage']()['zoom'], _0x3e8211, _0x114864[_0xc11a('0x64b')]()['category']));
    },
    'updateDeviceMarker': function (_0x58348d, _0x42bfa0, _0xa20f08) {
        _0x42bfa0 = Traccar[_0xc11a('0x470')]['getImageIcon'](_0x42bfa0, _0x58348d['getImage']()['zoom'], _0x58348d[_0xc11a('0x64b')]()[_0xc11a('0x631')], _0xa20f08);
        _0xa20f08 = _0x58348d[_0xc11a('0x64f')]();
        _0xa20f08[_0xc11a('0x67d')](-_0x42bfa0['getSize']()[0x1] / 0x2 - Traccar['Style'][_0xc11a('0x679')]);
        _0x58348d[_0xc11a('0x650')](_0xa20f08);
        _0x58348d[_0xc11a('0x67e')](_0x42bfa0);
    },
    'selectMarker': function (_0x29439a, _0x42e78d) {
        this['selectedMarker'] && (this[_0xc11a('0x66b')]['get']('event') ? (this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x652')](this[_0xc11a('0x66b')]),
            _0x29439a && _0x29439a['get'](_0xc11a('0x2c6')) || this['fireEvent']('deselectevent')) : !Ext['getStore']('ReportRoute')[_0xc11a('0x55c')] && this[_0xc11a('0x66b')]['get'](_0xc11a('0x408')) instanceof Traccar['model']['Position'] ? (this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x652')](this[_0xc11a('0x66b')]),
                delete this[_0xc11a('0x63c')][this[_0xc11a('0x66b')]['get'](_0xc11a('0x408'))['get']('id')]) : (this[_0xc11a('0x67f')](this['selectedMarker'][_0xc11a('0x64a')](), !0x1),
                    this[_0xc11a('0x66b')][_0xc11a('0x64a')]()[_0xc11a('0x680')](0x0),
                    this[_0xc11a('0x66b')][_0xc11a('0x64e')]()));
        _0x29439a && (this[_0xc11a('0x67f')](_0x29439a[_0xc11a('0x64a')](), !0x0),
            _0x29439a['getStyle']()[_0xc11a('0x680')](0x1),
            _0x29439a[_0xc11a('0x64e')](),
            _0x42e78d && (this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x65c')](_0x29439a[_0xc11a('0x65b')]()['getCoordinates']()),
                0x0 !== this['selectZoom'] && this[_0xc11a('0x681')] > this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x682')]() && this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x683')](this['selectZoom'])));
        this[_0xc11a('0x66b')] = _0x29439a;
    },
    'selectDevice': function (_0x342396, _0x383abd) {
        this[_0xc11a('0x674')](this[_0xc11a('0x63b')][_0x342396['get']('id')], _0x383abd);
    },
    'selectReport': function (_0x4b7423, _0x33a2fd) {
        _0x4b7423 instanceof Traccar['model']['Position'] && (Ext['getStore'](_0xc11a('0x573'))[_0xc11a('0x55c')] || (this['reportMarkers'][_0x4b7423['get']('id')] = this[_0xc11a('0x684')](_0x4b7423)),
            this[_0xc11a('0x674')](this[_0xc11a('0x63c')][_0x4b7423['get']('id')], _0x33a2fd));
    },
    'selectEvent': function (_0x5af06c) {
        this['fireEvent']('deselectfeature');
        _0x5af06c ? (_0x5af06c = this[_0xc11a('0x684')](_0x5af06c),
            _0x5af06c['set'](_0xc11a('0x2c6'), !0x0),
            this['selectMarker'](_0x5af06c, !0x0)) : this['selectedMarker'] && this[_0xc11a('0x66b')]['get'](_0xc11a('0x2c6')) && this[_0xc11a('0x674')](null, !0x1);
    },
    'selectFeature': function (_0x2fa345) {
        (_0x2fa345 = _0x2fa345['get'](_0xc11a('0x408'))) && (_0x2fa345 instanceof Traccar['model']['Device'] ? this['fireEvent'](_0xc11a('0x486'), _0x2fa345, !0x1) : this['fireEvent'](_0xc11a('0x56c'), _0x2fa345, !0x1));
    },
    'deselectFeature': function () {
        this[_0xc11a('0x634')]();
        this['fireEvent'](_0xc11a('0x612'));
    },
    'deselectDevice': function () {
        this[_0xc11a('0x674')](null, !0x1);
    },
    'zoomToAllPositions': function (_0x59e05c) {
        var _0x156d12, _0x532b29, _0x37cd2d, _0x4b4171, _0x1694a8, _0x4ee21d;
        for (_0x156d12 = 0x0; _0x156d12 < _0x59e05c['length']; _0x156d12++)
            _0x532b29 = ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x59e05c[_0x156d12]['get']('longitude'), _0x59e05c[_0x156d12]['get']('latitude')]),
                0x0 === _0x156d12 ? (_0x37cd2d = _0x1694a8 = _0x532b29[0x0],
                    _0x4b4171 = _0x4ee21d = _0x532b29[0x1]) : (_0x37cd2d = Math[_0xc11a('0x685')](_0x532b29[0x0], _0x37cd2d),
                        _0x4b4171 = Math[_0xc11a('0x685')](_0x532b29[0x1], _0x4b4171),
                        _0x1694a8 = Math[_0xc11a('0x686')](_0x532b29[0x0], _0x1694a8),
                        _0x4ee21d = Math[_0xc11a('0x686')](_0x532b29[0x1], _0x4ee21d));
        _0x37cd2d !== _0x1694a8 || _0x4b4171 !== _0x4ee21d ? this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x3c1')]([_0x37cd2d, _0x4b4171, _0x1694a8, _0x4ee21d]) : _0x532b29 && this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x3c1')](new ol[(_0xc11a('0x65f'))][(_0xc11a('0x671'))](_0x532b29));
    },
    'updateVisibleDevices': function (_0x507f23, _0x34b531) {
        var _0x3ef583;
        Ext[_0xc11a('0x494')](_0x34b531) || (_0x34b531 = [_0x34b531]);
        for (_0x507f23 = 0x0; _0x507f23 < _0x34b531['length']; _0x507f23++)
            _0x3ef583 = _0x34b531[_0x507f23],
                _0x3ef583['get']('id') in this[_0xc11a('0x63b')] && this[_0xc11a('0x687')](_0x3ef583);
    },
    'isDeviceVisible': function (_0x2e50e2) {
        return Ext['getStore']('VisibleDevices')[_0xc11a('0x688')](_0x2e50e2);
    },
    'updateDeviceVisibility': function (_0x328d68) {
        var _0x2ee54f, _0x1f679c, _0x3a63fd;
        _0x2ee54f = _0x328d68['get']('id');
        _0x3a63fd = this[_0xc11a('0x63b')][_0x2ee54f];
        _0x1f679c = this[_0xc11a('0x63d')][_0x2ee54f];
        _0x2ee54f = this[_0xc11a('0x63e')][_0x2ee54f];
        this[_0xc11a('0x664')](_0x328d68) ? (_0x3a63fd && !this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x651')](_0x3a63fd[_0xc11a('0x43b')]()) && this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x66a')](_0x3a63fd),
            _0x1f679c && !this['getView']()[_0xc11a('0x665')]()[_0xc11a('0x651')](_0x1f679c[_0xc11a('0x43b')]()) && this['getView']()['getAccuracySource']()[_0xc11a('0x66a')](_0x1f679c),
            _0x2ee54f && !this['getView']()[_0xc11a('0x689')]()[_0xc11a('0x651')](_0x2ee54f[_0xc11a('0x43b')]()) && this['getView']()['getLiveRouteSource']()[_0xc11a('0x66a')](_0x2ee54f)) : (_0x3a63fd && this['getView']()['getMarkersSource']()[_0xc11a('0x651')](_0x3a63fd[_0xc11a('0x43b')]()) && this['getView']()[_0xc11a('0x669')]()[_0xc11a('0x652')](_0x3a63fd),
                _0x1f679c && this['getView']()[_0xc11a('0x665')]()[_0xc11a('0x651')](_0x1f679c['getId']()) && this['getView']()[_0xc11a('0x665')]()[_0xc11a('0x652')](_0x1f679c),
                _0x2ee54f && this['getView']()[_0xc11a('0x689')]()[_0xc11a('0x651')](_0x2ee54f[_0xc11a('0x43b')]()) && this['getView']()[_0xc11a('0x689')]()[_0xc11a('0x652')](_0x2ee54f));
    },
    'filterDevices': function () {
        Ext['getStore']('Devices')[_0xc11a('0x4ee')](this[_0xc11a('0x687')], this, !0x1);
    }
});
Ext['define'](_0xc11a('0x68a'), {
    'singleton': !0x0,
    'wktToGeometry': function (_0x38a580, _0x52820d) {
        var _0x46037e, _0x7149cf = [], _0xc5cb7e, _0x1deed9;
        if (0x0 === _0x52820d[_0xc11a('0x68b')](_0xc11a('0x68c'), 0x0)) {
            if (_0x52820d = _0x52820d['match'](/\([^()]+\)/),
                null !== _0x52820d && (_0x52820d = _0x52820d[0x0][_0xc11a('0x554')](/-?\d+\.?\d*/g),
                    null !== _0x52820d)) {
                _0x46037e = _0x38a580[_0xc11a('0x657')]();
                for (_0x38a580 = 0x0; _0x38a580 < _0x52820d['length']; _0x38a580 += 0x2)
                    _0xc5cb7e = Number(_0x52820d[_0x38a580]),
                        _0x1deed9 = Number(_0x52820d[_0x38a580 + 0x1]),
                        _0x7149cf['push'](ol[_0xc11a('0x5f5')][_0xc11a('0x626')]([_0x1deed9, _0xc5cb7e], _0xc11a('0x5ec'), _0x46037e));
                _0x46037e = new ol[(_0xc11a('0x65f'))][(_0xc11a('0x113'))]([_0x7149cf]);
            }
        } else if (0x0 === _0x52820d[_0xc11a('0x68b')]('CIRCLE', 0x0))
            _0x52820d = _0x52820d[_0xc11a('0x554')](/\([^()]+\)/),
                null !== _0x52820d && (_0x52820d = _0x52820d[0x0][_0xc11a('0x554')](/-?\d+\.?\d*/g),
                    null !== _0x52820d && (_0x46037e = _0x38a580[_0xc11a('0x657')](),
                        _0x7149cf = ol['proj'][_0xc11a('0x626')]([Number(_0x52820d[0x1]), Number(_0x52820d[0x0])], _0xc11a('0x5ec'), _0x46037e),
                        _0x38a580 = _0x38a580['getResolution'](),
                        _0x46037e = ol['proj'][_0xc11a('0x658')](_0x46037e, _0x38a580, _0x7149cf),
                        _0x52820d = Number(_0x52820d[0x2]) / ol['proj'][_0xc11a('0x659')]['m'] * (_0x38a580 / _0x46037e),
                        _0x46037e = new ol[(_0xc11a('0x65f'))][(_0xc11a('0x115'))](_0x7149cf, _0x52820d)));
        else if (0x0 === _0x52820d['lastIndexOf']('LINESTRING', 0x0) && (_0x52820d = _0x52820d[_0xc11a('0x554')](/\([^()]+\)/),
            null !== _0x52820d && (_0x52820d = _0x52820d[0x0][_0xc11a('0x554')](/-?\d+\.?\d*/g),
                null !== _0x52820d))) {
            _0x46037e = _0x38a580[_0xc11a('0x657')]();
            for (_0x38a580 = 0x0; _0x38a580 < _0x52820d['length']; _0x38a580 += 0x2)
                _0xc5cb7e = Number(_0x52820d[_0x38a580]),
                    _0x1deed9 = Number(_0x52820d[_0x38a580 + 0x1]),
                    _0x7149cf['push'](ol['proj'][_0xc11a('0x626')]([_0x1deed9, _0xc5cb7e], _0xc11a('0x5ec'), _0x46037e));
            _0x46037e = new ol['geom']['LineString'](_0x7149cf);
        }
        return _0x46037e;
    },
    'geometryToWkt': function (_0x5dad79, _0x4ef340) {
        var _0x3a5852, _0x472556;
        if (_0x4ef340 instanceof ol[_0xc11a('0x65f')][_0xc11a('0x115')])
            _0x3a5852 = _0x4ef340[_0xc11a('0x68d')](),
                _0x4ef340 = _0x4ef340[_0xc11a('0x68e')](),
                _0x4ef340 = [_0x3a5852[0x0] + _0x4ef340, _0x3a5852[0x1]],
                _0x3a5852 = ol[_0xc11a('0x5f5')]['transform'](_0x3a5852, _0x5dad79, _0xc11a('0x5ec')),
                _0x472556 = new ol['Sphere'](0x615299),
                _0x5dad79 = _0x472556[_0xc11a('0x68f')](_0x3a5852, ol[_0xc11a('0x5f5')][_0xc11a('0x626')](_0x4ef340, _0x5dad79, 'EPSG:4326')),
                _0x3a5852 = _0xc11a('0x690') + (_0x3a5852[0x1] + '\x20' + _0x3a5852[0x0] + ',\x20'),
                _0x3a5852 += _0x5dad79['toFixed'](0x1) + ')';
        else if (_0x4ef340 instanceof ol[_0xc11a('0x65f')][_0xc11a('0x113')]) {
            _0x4ef340[_0xc11a('0x626')](_0x5dad79, _0xc11a('0x5ec'));
            _0x4ef340 = _0x4ef340['getCoordinates']();
            _0x3a5852 = _0xc11a('0x691');
            for (_0x5dad79 = 0x0; _0x5dad79 < _0x4ef340[0x0]['length']; _0x5dad79 += 0x1)
                _0x3a5852 += _0x4ef340[0x0][_0x5dad79][0x1] + '\x20' + _0x4ef340[0x0][_0x5dad79][0x0] + ',\x20';
            _0x3a5852 = _0x3a5852['substring'](0x0, _0x3a5852['length'] - 0x2) + '))';
        } else if (_0x4ef340 instanceof ol[_0xc11a('0x65f')][_0xc11a('0x117')]) {
            _0x4ef340[_0xc11a('0x626')](_0x5dad79, 'EPSG:4326');
            _0x4ef340 = _0x4ef340[_0xc11a('0x692')]();
            _0x3a5852 = _0xc11a('0x693');
            for (_0x5dad79 = 0x0; _0x5dad79 < _0x4ef340['length']; _0x5dad79 += 0x1)
                _0x3a5852 += _0x4ef340[_0x5dad79][0x1] + '\x20' + _0x4ef340[_0x5dad79][0x0] + ',\x20';
            _0x3a5852 = _0x3a5852[substring](0x0, _0x3a5852['length'] - 0x2) + ')';
        }
        return _0x3a5852;
    }
});
var container, content, closer;
Ext['define']('Traccar.view.map.MapController', {
    'extend': Traccar['view']['map']['MapMarkerController'],
    'alias': _0xc11a('0x694'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'mapstaterequest': _0xc11a('0x695'),
                    'zoomtoalldevices': _0xc11a('0x696')
                }
            },
            'store': {
                '#Geofences': {
                    'load': _0xc11a('0x697'),
                    'add': _0xc11a('0x697'),
                    'update': 'updateGeofences',
                    'remove': _0xc11a('0x697')
                }
            }
        }
    },
    'init': function () {
        this[_0xc11a('0x3c7')]();
        this['lookupReference'](_0xc11a('0x698'))['setVisible'](Traccar['app'][_0xc11a('0x57f')]());
        this['lookupReference'](_0xc11a('0x699'))['setVisible'](!Traccar['app']['isMobile']());
        this['lookupReference']('contactWhats')['setVisible'](!Traccar['app'][_0xc11a('0x57f')]() && !Traccar['app']['getBooleanAttributePreference']('ui.disableWhats'));
        this['lookupReference'](_0xc11a('0x69a'))['setVisible'](!Traccar['app'][_0xc11a('0x57f')]() && !Traccar['app']['getBooleanAttributePreference']('ui.disablepagamentoML'));
    },
    'onFollowClick': function (_0x58736a, _0x2e65e4) {
        _0x2e65e4 && this[_0xc11a('0x66b')] && this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x65c')](this[_0xc11a('0x66b')][_0xc11a('0x65b')]()[_0xc11a('0x692')]());
    },
    'pgClick': function () {
        var _0x1cd0ee = window[_0xc11a('0x69b')]('', _0xc11a('0x69c'));
        $['ajax']({
            'url': _0xc11a('0x69d'),
            'dataType': 'json',
            'success': function (_0x574cf1) {
                _0x1cd0ee[location] = _0x574cf1['url'][_0xc11a('0x69e')];
            }
        });
    },
    'contactClick': function () {
        var _0xfc84bf = window[_0xc11a('0x69b')]('', _0xc11a('0x69c'));
        $['ajax']({
            'url': _0xc11a('0x69d'),
            'dataType': 'json',
            'success': function (_0x3f4a51) {
                _0xfc84bf[location] = _0x3f4a51[_0xc11a('0x56a')][_0xc11a('0x69f')];
            }
        });
    },
    'openStreetView': function (_0x5bf888, _0xa03336) {
        _0xa03336 ? (null == pressedDevice && (pressedDevice = this['selectedMarker']['get'](_0xc11a('0x408'))['get']('id')),
            _0x5bf888 = Ext['getStore']('LatestPositions')['findRecord']('deviceId', pressedDevice, 0x0, !0x1, !0x1, !0x0),
            null == panorama ? (panorama = new google[(_0xc11a('0x6a0'))]['StreetViewPanorama'](document['getElementById']('street-view'), {
                'position': {
                    'lat': _0x5bf888['get']('latitude'),
                    'lng': _0x5bf888['get']('longitude')
                },
                'pov': {
                    'heading': _0x5bf888['get']('course'),
                    'pitch': 0x0
                },
                'visible': !0x0,
                'motionTracking': !0x1,
                'motionTrackingControl': !0x1,
                'linksControl': !0x1,
                'panControl': !0x1,
                'enableCloseButton': !0x1
            }),
                document['getElementById'](_0xc11a('0x6a1'))[_0xc11a('0x3c5')][_0xc11a('0x4ff')] = _0xc11a('0x6a2'),
                document['getElementById'](_0xc11a('0x6a1'))[_0xc11a('0x3c5')]['right'] = _0xc11a('0x6a3'),
                document['getElementById']('street-view')[_0xc11a('0x3c5')][_0xc11a('0x5b6')] = _0xc11a('0x6a3'),
                document['getElementById'](_0xc11a('0x6a1'))[_0xc11a('0x3c5')][_0xc11a('0x6a4')] = _0xc11a('0x6a5'),
                document['getElementById']('street-view')[_0xc11a('0x3c5')]['marginRight'] = _0xc11a('0x6a6'),
                document['getElementById']('street-view')[_0xc11a('0x3c5')]['marginBottom'] = _0xc11a('0x6a6')) : (panorama[_0xc11a('0x48b')]({
                    'lat': _0x5bf888['get']('latitude'),
                    'lng': _0x5bf888['get']('longitude')
                }),
                    panorama[_0xc11a('0x48c')]({
                        'heading': _0x5bf888['get']('course'),
                        'pitch': 0x0
                    })),
            document['getElementById']('street-view')[_0xc11a('0x3c5')][_0xc11a('0x6a7')] = _0xc11a('0x392')) : document['getElementById'](_0xc11a('0x6a1'))['style'][_0xc11a('0x6a7')] = _0xc11a('0x6a8');
    },
    'showLiveRoutes': function (_0x3fbcef) {
        this['getView']()[_0xc11a('0x6a9')]()['setVisible'](_0x3fbcef[_0xc11a('0x5c0')]);
    },
    'getMapState': function () {
        var _0x2e30e2, _0x4a9e19;
        _0x2e30e2 = this['getView']()[_0xc11a('0x656')]()['getProjection']();
        _0x4a9e19 = ol[_0xc11a('0x5f5')][_0xc11a('0x626')](this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x68d')](), _0x2e30e2, _0xc11a('0x5ec'));
        _0x2e30e2 = this['getView']()['getMapView']()[_0xc11a('0x682')]();
        this['fireEvent']('mapstate', _0x4a9e19[0x1], _0x4a9e19[0x0], _0x2e30e2);
    },
    'updateGeofences': function () {
        this['getView']()['getGeofencesSource']()[_0xc11a('0x37d')]();
        this['lookupReference'](_0xc11a('0x6aa'))['pressed'] && Ext['getStore']('Geofences')[_0xc11a('0x4ee')](function (_0x4d399) {
            var _0x5f27d5 = new ol[(_0xc11a('0x65e'))](Traccar['GeofenceConverter'][_0xc11a('0x6ab')](this['getView']()[_0xc11a('0x656')](), _0x4d399['get']('area')));
            _0x5f27d5[_0xc11a('0x660')](this[_0xc11a('0x661')](_0x4d399['get']('name'), _0x4d399['get']('attributes') ? _0x4d399['get']('attributes')['color'] : null));
            this['getView']()[_0xc11a('0x6ac')]()['addFeature'](_0x5f27d5);
            return !0x0;
        }, this);
    },
    'zoomToAllDevices': function () {
        this[_0xc11a('0x673')](Ext['getStore'](_0xc11a('0x48a'))['getData']()[_0xc11a('0x3e5')]);
    }
});
Ext['define']('Traccar.view.dialog.MapPickerController', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': _0xc11a('0x6ae'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'mapstate': _0xc11a('0x6af')
                }
            }
        }
    },
    'getMapState': function () {
        this['fireEvent'](_0xc11a('0x6b0'));
    },
    'setMapState': function (_0x2411ac, _0x32a268, _0x47196a) {
        this['lookupReference']('latitude')[_0xc11a('0x365')](_0x2411ac);
        this['lookupReference']('longitude')[_0xc11a('0x365')](_0x32a268);
        this['lookupReference']('zoom')[_0xc11a('0x365')](_0x47196a);
    }
});
Ext['define']('Traccar.view.dialog.UserController', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x6b1')],
    'alias': _0xc11a('0x6b2'),
    'init': function () {
        Traccar['app']['getUser']()['get']('administrator') && (this['lookupReference'](_0xc11a('0x6b3'))['setDisabled'](!0x1),
            this['lookupReference'](_0xc11a('0x6b4'))['setDisabled'](!0x1),
            this['lookupReference'](_0xc11a('0x6b5'))['setDisabled'](!0x1));
        if (Traccar['app']['getUser']()['get']('administrator') || !this['getView']()[_0xc11a('0x6b6')])
            this['lookupReference'](_0xc11a('0x6b7'))['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x465'))['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x6b8'))['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x6b9'))['setDisabled'](!0x1),
                this['lookupReference'](_0xc11a('0x6ba'))['setDisabled'](!0x1);
        Traccar['app']['getUser']()['get']('administrator') || (this['lookupReference']('editNome')['setDisabled'](!0x0),
            this['lookupReference'](_0xc11a('0x6bb'))['setDisabled'](!0x0));
    },
    'symbols': _0xc11a('0x6bc'),
    'generateToken': function () {
        var _0x17a2b9, _0x15841b = '';
        for (_0x17a2b9 = 0x0; 0x20 > _0x17a2b9; _0x17a2b9++)
            _0x15841b += this['symbols']['charAt'](Math['floor'](Math['random']() * this[_0xc11a('0x6bd')]['length']));
        this['lookupReference'](_0xc11a('0x6be'))[_0xc11a('0x365')](_0x15841b);
    },
    'testNotification': function () {
        Ext['Ajax']['request']({
            'url': 'api/notifications/test',
            'method': 'POST',
            'failure': function (_0x29f11f) {
                Traccar['app']['showError'](_0x29f11f);
            }
        });
    },
    'onSaveClick': function (_0x41e423) {
        var _0x2c2ba4, _0x340873;
        _0x2c2ba4 = _0x41e423['up']('window')[_0xc11a('0x3b0')]('form');
        _0x2c2ba4['updateRecord']();
        _0x2c2ba4 = _0x2c2ba4[_0xc11a('0x3cb')]();
        _0x2c2ba4 === Traccar['app']['getUser']() ? _0x2c2ba4['save']() : (_0x340873 = Ext['getStore'](_0xc11a('0x6bf')),
            _0x2c2ba4[_0xc11a('0x3cc')] && _0x340873['add'](_0x2c2ba4),
            _0x340873[_0xc11a('0x3ba')]({
                'failure': function (_0x41e423) {
                    _0x340873[_0xc11a('0x3bb')]();
                    Traccar['app']['showError'](_0x41e423[_0xc11a('0x3bc')][0x0][_0xc11a('0x3cd')]()[_0xc11a('0x3ce')]);
                }
            }));
        _0x41e423['up']('window')['close']();
    }
});
Ext['define'](_0xc11a('0x6c0'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': 'user',
    'title': Strings[_0xc11a('0x6c1')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'name',
                'reference': _0xc11a('0x6c2'),
                'fieldLabel': Strings[_0xc11a('0x357')]
            }, {
                'xtype': _0xc11a('0x356'),
                'name': _0xc11a('0x358'),
                'reference': _0xc11a('0x6bb'),
                'fieldLabel': Strings[_0xc11a('0x359')],
                'allowBlank': !0x1
            }, {
                'xtype': 'textfield',
                'name': _0xc11a('0x35d'),
                'fieldLabel': Strings[_0xc11a('0x35e')],
                'inputType': _0xc11a('0x35d'),
                'allowBlank': !0x1
            }]
        }, {
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x6c3')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'phone',
                'fieldLabel': Strings[_0xc11a('0x46e')]
            }, {
                'xtype': 'clearableComboBox',
                'name': 'map',
                'fieldLabel': Strings[_0xc11a('0x6c4')],
                'store': _0xc11a('0x6c5'),
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': _0xc11a('0x6c6'),
                'reference': 'latitude',
                'name': 'latitude',
                'fieldLabel': Strings[_0xc11a('0x594')],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': 'numberfield',
                'reference': 'longitude',
                'name': 'longitude',
                'fieldLabel': Strings['positionLongitude'],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': 'numberfield',
                'reference': 'zoom',
                'name': 'zoom',
                'fieldLabel': Strings[_0xc11a('0x6c7')]
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'twelveHourFormat',
                'fieldLabel': Strings[_0xc11a('0x6c8')]
            }, {
                'xtype': _0xc11a('0x46b'),
                'name': 'coordinateFormat',
                'fieldLabel': Strings[_0xc11a('0x6c9')],
                'store': 'CoordinateFormats',
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': 'textfield',
                'name': 'poiLayer',
                'fieldLabel': Strings[_0xc11a('0x6ca')]
            }]
        }, {
            'xtype': 'fieldset',
            'title': Strings['sharedPermissions'],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'disabled',
                'fieldLabel': Strings[_0xc11a('0x4f2')],
                'disabled': !0x0,
                'reference': _0xc11a('0x465')
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'administrator',
                'fieldLabel': Strings[_0xc11a('0x6cb')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b3')
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'readonly',
                'fieldLabel': Strings[_0xc11a('0x6cc')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b7')
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'deviceReadonly',
                'fieldLabel': Strings[_0xc11a('0x6cd')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b9')
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'limitCommands',
                'fieldLabel': Strings[_0xc11a('0x6ce')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6ba')
            }, {
                'xtype': _0xc11a('0x548'),
                'name': 'expirationTime',
                'fieldLabel': Strings[_0xc11a('0x6cf')],
                'disabled': !0x0,
                'reference': 'expirationTimeField',
                'startDay': Traccar['Style'][_0xc11a('0x543')],
                'format': Traccar['Style'][_0xc11a('0x544')]
            }, {
                'xtype': _0xc11a('0x6c6'),
                'name': 'deviceLimit',
                'fieldLabel': Strings[_0xc11a('0x6d0')],
                'disabled': !0x0,
                'reference': _0xc11a('0x6b4')
            }, {
                'xtype': _0xc11a('0x6c6'),
                'name': _0xc11a('0x4c5'),
                'fieldLabel': Strings['userUserLimit'],
                'disabled': !0x0,
                'reference': 'userLimitField'
            }, {
                'xtype': 'textfield',
                'name': 'token',
                'reference': _0xc11a('0x6be'),
                'fieldLabel': Strings[_0xc11a('0x6d1')],
                'triggers': {
                    'generate': {
                        'cls': _0xc11a('0x6d2'),
                        'handler': _0xc11a('0x6d3')
                    }
                }
            }]
        }]
    },
    'buttons': [{
        'text': Strings[_0xc11a('0x429')],
        'handler': _0xc11a('0x45f')
    }, {
        'glyph': _0xc11a('0x6d4'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x695'),
        'tooltip': Strings[_0xc11a('0x6d5')],
        'tooltipType': _0xc11a('0x401')
    }, {
        'glyph': _0xc11a('0x4d8'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x6d6'),
        'hidden': !0x0,
        'reference': _0xc11a('0x6d7'),
        'tooltip': Strings[_0xc11a('0x6d8')],
        'tooltipType': 'title'
    }, {
        'xtype': _0xc11a('0x45c')
    }, {
        'glyph': _0xc11a('0x3fe'),
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x3ff')
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define']('Traccar.view.dialog.Server', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': _0xc11a('0x6d9'),
    'title': Strings[_0xc11a('0x6da')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x6c3')],
            'items': [{
                'xtype': _0xc11a('0x46b'),
                'name': 'map',
                'fieldLabel': Strings[_0xc11a('0x6c4')],
                'store': 'MapTypes',
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': _0xc11a('0x356'),
                'name': 'bingKey',
                'fieldLabel': Strings[_0xc11a('0x6db')]
            }, {
                'xtype': 'textfield',
                'name': 'mapUrl',
                'fieldLabel': Strings['mapCustom']
            }, {
                'xtype': 'numberfield',
                'reference': 'latitude',
                'name': 'latitude',
                'fieldLabel': Strings[_0xc11a('0x594')],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': _0xc11a('0x6c6'),
                'reference': 'longitude',
                'name': 'longitude',
                'fieldLabel': Strings[_0xc11a('0x595')],
                'decimalPrecision': Traccar['Style']['coordinatePrecision']
            }, {
                'xtype': 'numberfield',
                'reference': 'zoom',
                'name': 'zoom',
                'fieldLabel': Strings[_0xc11a('0x6c7')]
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'twelveHourFormat',
                'fieldLabel': Strings[_0xc11a('0x6c8')]
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'forceSettings',
                'fieldLabel': Strings[_0xc11a('0x6dc')]
            }, {
                'xtype': _0xc11a('0x46b'),
                'name': 'coordinateFormat',
                'fieldLabel': Strings[_0xc11a('0x6c9')],
                'store': 'CoordinateFormats',
                'displayField': 'name',
                'valueField': 'key'
            }, {
                'xtype': _0xc11a('0x356'),
                'name': 'poiLayer',
                'fieldLabel': Strings[_0xc11a('0x6ca')]
            }]
        }, {
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x6dd')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': _0xc11a('0x6de'),
                'fieldLabel': Strings[_0xc11a('0x6df')]
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'readonly',
                'fieldLabel': Strings[_0xc11a('0x6cc')]
            }, {
                'xtype': 'checkboxfield',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'deviceReadonly',
                'fieldLabel': Strings[_0xc11a('0x6cd')]
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'limitCommands',
                'fieldLabel': Strings[_0xc11a('0x6ce')]
            }]
        }]
    },
    'buttons': [{
        'text': Strings[_0xc11a('0x429')],
        'handler': _0xc11a('0x45f')
    }, {
        'glyph': _0xc11a('0x6d4'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x695'),
        'tooltip': Strings[_0xc11a('0x6d5')],
        'tooltipType': _0xc11a('0x401')
    }, {
        'xtype': 'tbfill'
    }, {
        'glyph': 'xf00c@FontAwesome',
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x6e0'), {
    'extend': Traccar['view'][_0xc11a('0x473')][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x6e1'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x469')],
            'dataIndex': 'uniqueId',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x46e')],
            'dataIndex': 'phone',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings['deviceModel'],
            'dataIndex': 'model',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings['deviceContact'],
            'dataIndex': 'contact',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x4f2')],
            'dataIndex': 'disabled',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'renderer': Traccar['AttributeFormatter']['getFormatter']('disabled'),
            'hidden': !0x0,
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6e2')],
            'dataIndex': 'groupId',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'AllGroups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }]
    }
});
Ext['define'](_0xc11a('0x6e3'), {
    'extend': Traccar['view']['permissions'][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x6e4'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x6e2')],
            'dataIndex': 'groupId',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'AllGroups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }]
    }
});
Ext['define'](_0xc11a('0x6e5'), {
    'extend': Traccar['view']['permissions'][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x6e6'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')],
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x6e7'), {
    'extend': Traccar['view'][_0xc11a('0x473')][_0xc11a('0x38c')],
    'xtype': _0xc11a('0x6e8'),
    'columns': {
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal'],
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x6e9'), {
    'extend': Traccar['view'][_0xc11a('0x403')][_0xc11a('0x4b1')],
    'alias': _0xc11a('0x6ea'),
    'objectModel': _0xc11a('0x6eb'),
    'objectDialog': 'Traccar.view.dialog.User',
    'removeTitle': Strings['settingsUser'],
    'init': function () {
        Ext['getStore'](_0xc11a('0x6bf'))['load']();
        this['lookupReference'](_0xc11a('0x6ec'))[_0xc11a('0x3a4')](!Traccar['app']['getUser']()['get']('administrator'));
        this['lookupReference']('userDriversButton')[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers'));
        this['lookupReference'](_0xc11a('0x6ed'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference'](_0xc11a('0x6ee'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference'](_0xc11a('0x6ef')));
        this['lookupReference'](_0xc11a('0x6f0'))[_0xc11a('0x3a4')](Traccar['app']['getPreference']('limitCommands', !0x1));
        this['lookupReference'](_0xc11a('0x6f1'))[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
    },
    'onEditClick': function () {
        var _0x268af7, _0x4f40ab = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        _0x268af7 = Ext['create'](_0xc11a('0x6c0'), {
            'selfEdit': _0x4f40ab['get']('id') === Traccar['app']['getUser']()['get']('id')
        });
        _0x268af7['down']('form')[_0xc11a('0x3b1')](_0x4f40ab);
        _0x268af7[_0xc11a('0x38a')]();
    },
    'onAddClick': function () {
        var _0x54c478, _0x73523f;
        _0x54c478 = Ext['create'](_0xc11a('0x6eb'));
        Traccar['app']['getUser']()['get']('administrator') && _0x54c478['set']('deviceLimit', -0x1);
        Traccar['app']['getUser']()['get']('expirationTime') && _0x54c478['set']('expirationTime', Traccar['app']['getUser']()['get']('expirationTime'));
        _0x73523f = Ext['create'](_0xc11a('0x6c0'));
        _0x73523f['down']('form')[_0xc11a('0x3b1')](_0x54c478);
        _0x73523f[_0xc11a('0x38a')]();
    },
    'onDevicesClick': function () {
        var _0x5596fa = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['getStore']('AllGroups')['load']();
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings['deviceTitle'],
            'items': {
                'xtype': 'linkDevicesView',
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'deviceId',
                'storeName': 'AllDevices',
                'linkStoreName': 'Devices',
                'baseObject': _0x5596fa[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onGroupsClick': function () {
        var _0x3eba11 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x6f3')],
            'items': {
                'xtype': _0xc11a('0x6e4'),
                'baseObjectName': 'userId',
                'linkObjectName': 'groupId',
                'storeName': 'AllGroups',
                'linkStoreName': 'Groups',
                'baseObject': _0x3eba11[_0xc11a('0x43b')]()
            }
        })['show']();
    },
    'onGeofencesClick': function () {
        var _0x596a84 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d6')],
            'items': {
                'xtype': 'linkGeofencesView',
                'baseObjectName': 'userId',
                'linkObjectName': 'geofenceId',
                'storeName': 'AllGeofences',
                'linkStoreName': 'Geofences',
                'baseObject': _0x596a84['getId']()
            }
        })['show']();
    },
    'onNotificationsClick': function () {
        var _0x42ebe6 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x4c8')],
            'items': {
                'xtype': _0xc11a('0x496'),
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': _0xc11a('0x4c9'),
                'storeName': _0xc11a('0x6f4'),
                'linkStoreName': _0xc11a('0x6f5'),
                'baseObject': _0x42ebe6[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onCalendarsClick': function () {
        var _0x4c58d9 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedCalendars'],
            'items': {
                'xtype': 'linkCalendarsView',
                'baseObjectName': 'userId',
                'linkObjectName': 'calendarId',
                'storeName': 'AllCalendars',
                'linkStoreName': 'Calendars',
                'baseObject': _0x4c58d9[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onUsersClick': function () {
        var _0x44ff01 = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x6f6')],
            'items': {
                'xtype': _0xc11a('0x6e8'),
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': _0xc11a('0x6f7'),
                'storeName': 'Users',
                'baseObject': _0x44ff01['getId']()
            }
        })[_0xc11a('0x38a')]();
    },
    'onAttributesClick': function () {
        var _0x73d37b = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': _0xc11a('0x477'),
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'attributeId',
                'storeName': _0xc11a('0x6f8'),
                'linkStoreName': 'ComputedAttributes',
                'baseObject': _0x73d37b[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onDriversClick': function () {
        var _0x4a0bbc = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4ca')],
            'items': {
                'xtype': _0xc11a('0x4cb'),
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'driverId',
                'storeName': 'AllDrivers',
                'linkStoreName': 'Drivers',
                'baseObject': _0x4a0bbc[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onCommandsClick': function () {
        var _0x1cd4fc = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4cd')],
            'items': {
                'xtype': 'linkSavedCommandsView',
                'baseObjectName': 'userId',
                'linkObjectName': 'commandId',
                'storeName': _0xc11a('0x6f9'),
                'linkStoreName': 'Commands',
                'baseObject': _0x1cd4fc[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onMaintenancesClick': function () {
        var _0x58f5cb = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d0')],
            'items': {
                'xtype': _0xc11a('0x4b9'),
                'baseObjectName': _0xc11a('0x6f2'),
                'linkObjectName': 'maintenanceId',
                'storeName': 'AllMaintenances',
                'linkStoreName': 'Maintenances',
                'baseObject': _0x58f5cb['getId']()
            }
        })[_0xc11a('0x38a')]();
    },
    'onSelectionChange': function (_0x2c709c, _0x49426a) {
        var _0x1417e9 = 0x0 === _0x49426a['length'];
        this['lookupReference']('userDevicesButton')['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fa'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fb'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fc'))['setDisabled'](_0x1417e9);
        this['lookupReference']('userCalendarsButton')['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6ed'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6fd'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6f0'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6f1'))['setDisabled'](_0x1417e9);
        this['lookupReference'](_0xc11a('0x6ec'))['setDisabled'](_0x1417e9 || 0x0 === _0x49426a[0x0]['get'](_0xc11a('0x4c5')));
        this[_0xc11a('0x3c7')](arguments);
    }
});
Ext['define'](_0xc11a('0x6fe'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x6ff'),
    'controller': _0xc11a('0x700'),
    'store': 'Users',
    'tbar': {
        'xtype': _0xc11a('0x41b'),
        'scrollable': !0x0,
        'items': [{
            'disabled': !0x0,
            'handler': _0xc11a('0x4d7'),
            'reference': 'userGeofencesButton',
            'glyph': _0xc11a('0x701'),
            'tooltip': Strings[_0xc11a('0x4d6')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x702'),
            'reference': _0xc11a('0x703'),
            'glyph': _0xc11a('0x704'),
            'tooltip': Strings['deviceTitle'],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': 'onGroupsClick',
            'reference': 'userGroupsButton',
            'glyph': 'xf247@FontAwesome',
            'tooltip': Strings[_0xc11a('0x6f3')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': 'onUsersClick',
            'reference': _0xc11a('0x6ec'),
            'glyph': _0xc11a('0x705'),
            'tooltip': Strings[_0xc11a('0x6f6')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x706'),
            'reference': _0xc11a('0x6fc'),
            'glyph': _0xc11a('0x4d8'),
            'tooltip': Strings[_0xc11a('0x4c8')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x707'),
            'reference': _0xc11a('0x6ee'),
            'glyph': _0xc11a('0x708'),
            'tooltip': Strings[_0xc11a('0x709')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x70a'),
            'reference': 'userAttributesButton',
            'glyph': _0xc11a('0x4db'),
            'tooltip': Strings['sharedComputedAttributes'],
            'tooltipType': _0xc11a('0x401')
        }, {
            'disabled': !0x0,
            'handler': _0xc11a('0x70b'),
            'reference': _0xc11a('0x6fd'),
            'glyph': _0xc11a('0x4d5'),
            'tooltip': Strings[_0xc11a('0x4ca')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': _0xc11a('0x70c'),
            'reference': _0xc11a('0x6f0'),
            'glyph': _0xc11a('0x45d'),
            'tooltip': Strings['sharedSavedCommands'],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': 'onMaintenancesClick',
            'reference': _0xc11a('0x6f1'),
            'glyph': _0xc11a('0x4dd'),
            'tooltip': Strings[_0xc11a('0x4d0')],
            'tooltipType': 'title'
        }]
    },
    'bbar': [{
        'xtype': _0xc11a('0x4e6'),
        'html': _0xc11a('0x4ec')
    }, {
        'xtype': _0xc11a('0x356'),
        'flex': !0x0,
        'listeners': {
            'change': function () {
                this['up']('grid')[_0xc11a('0x3ad')]['clearFilter']();
                var _0x1dbb00 = RegExp(this['getValue'](), 'i');
                this['up']('grid')[_0xc11a('0x3ad')]['filter'](new Ext[('util')][(_0xc11a('0x70d'))]({
                    'filterFn': function (_0x1538f4) {
                        var _0x1156f7 = !0x1;
                        Ext['Object'][_0xc11a('0x4ee')](_0x1538f4['data'], function (_0x1538f4, _0x56c980) {
                            _0x1156f7 = _0x1156f7 || _0x1dbb00[_0xc11a('0x35a')](String(_0x56c980));
                        });
                        return _0x1156f7;
                    }
                }));
            }
        }
    }],
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x359')],
            'dataIndex': _0xc11a('0x358'),
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x6cb')],
            'dataIndex': 'administrator',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('administrator'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6cc')],
            'dataIndex': 'readonly',
            'hidden': !0x0,
            'renderer': Traccar['AttributeFormatter']['getFormatter']('readonly'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6cd')],
            'dataIndex': 'deviceReadonly',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('deviceReadonly'),
            'hidden': !0x0,
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x4f2')],
            'dataIndex': 'disabled',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('disabled'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x6cf')],
            'dataIndex': 'expirationTime',
            'hidden': !0x0,
            'renderer': Traccar['AttributeFormatter']['getFormatter']('expirationTime'),
            'filter': 'date'
        }]
    }
});
Ext['define'](_0xc11a('0x70e'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'title': Strings[_0xc11a('0x6e2')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': 'fieldset',
            'title': Strings[_0xc11a('0x468')],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'fieldLabel': Strings[_0xc11a('0x357')],
                'allowBlank': !0x1
            }]
        }, {
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x46a')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': _0xc11a('0x46b'),
                'name': 'groupId',
                'fieldLabel': Strings['groupParent'],
                'store': 'Groups',
                'queryMode': 'local',
                'displayField': 'name',
                'valueField': 'id'
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x70f'), {
    'extend': Traccar['view'][_0xc11a('0x403')]['ToolbarController'],
    'alias': 'controller.groups',
    'objectModel': 'Traccar.model.Group',
    'objectDialog': _0xc11a('0x70e'),
    'removeTitle': Strings[_0xc11a('0x6e2')],
    'init': function () {
        this['lookupReference'](_0xc11a('0x710'))[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers'));
        this['lookupReference']('toolbarAttributesButton')[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference'](_0xc11a('0x711'))[_0xc11a('0x3a4')](Traccar['app']['getPreference']('limitCommands', !0x1));
        this['lookupReference'](_0xc11a('0x712'))[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
    },
    'onGeofencesClick': function () {
        var _0x513eb3 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x4d6')],
            'items': {
                'xtype': _0xc11a('0x474'),
                'baseObjectName': 'groupId',
                'linkObjectName': 'geofenceId',
                'storeName': 'Geofences',
                'baseObject': _0x513eb3['getId']()
            }
        })[_0xc11a('0x38a')]();
    },
    'onAttributesClick': function () {
        var _0x171c4a = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': _0xc11a('0x477'),
                'baseObjectName': 'groupId',
                'linkObjectName': _0xc11a('0x713'),
                'storeName': 'ComputedAttributes',
                'baseObject': _0x171c4a[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onDriversClick': function () {
        var _0x28ef23 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4ca')],
            'items': {
                'xtype': _0xc11a('0x4cb'),
                'baseObjectName': 'groupId',
                'linkObjectName': _0xc11a('0x4cc'),
                'storeName': 'Drivers',
                'baseObject': _0x28ef23[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onCommandsClick': function () {
        var _0x36fe28 = this['getView']()[_0xc11a('0x3b3')]()[_0xc11a('0x3b2')]()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4cd')],
            'items': {
                'xtype': _0xc11a('0x443'),
                'baseObjectName': 'groupId',
                'linkObjectName': _0xc11a('0x4ce'),
                'storeName': 'Commands',
                'baseObject': _0x36fe28['getId']()
            }
        })[_0xc11a('0x38a')]();
    },
    'onNotificationsClick': function () {
        var _0x26fc5d = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0];
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4c8')],
            'items': {
                'xtype': _0xc11a('0x496'),
                'baseObjectName': 'groupId',
                'linkObjectName': 'notificationId',
                'storeName': _0xc11a('0x6f5'),
                'baseObject': _0x26fc5d[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onMaintenancesClick': function () {
        var _0x5ad79c = this['getView']()[_0xc11a('0x3b3')]()['getSelection']()[0x0];
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x4d0')],
            'items': {
                'xtype': _0xc11a('0x4b9'),
                'baseObjectName': 'groupId',
                'linkObjectName': 'maintenanceId',
                'storeName': 'Maintenances',
                'baseObject': _0x5ad79c[_0xc11a('0x43b')]()
            }
        })[_0xc11a('0x38a')]();
    },
    'onSelectionChange': function (_0x4cee09, _0x5691f1) {
        var _0x13d49a = 0x0 === _0x5691f1['length'];
        this['lookupReference'](_0xc11a('0x714'))['setDisabled'](_0x13d49a);
        this['lookupReference']('toolbarAttributesButton')['setDisabled'](_0x13d49a);
        this['lookupReference'](_0xc11a('0x710'))['setDisabled'](_0x13d49a);
        this['lookupReference'](_0xc11a('0x711'))['setDisabled'](_0x13d49a);
        this['lookupReference']('toolbarNotificationsButton')['setDisabled'](_0x13d49a);
        this['lookupReference'](_0xc11a('0x712'))['setDisabled'](_0x13d49a);
        this[_0xc11a('0x3c7')](arguments);
    }
});
Ext['define']('Traccar.view.edit.Groups', {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': 'groupsView',
    'controller': _0xc11a('0x715'),
    'store': 'Groups',
    'tbar': {
        'xtype': _0xc11a('0x41b'),
        'items': [{
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': _0xc11a('0x4d7'),
            'reference': _0xc11a('0x714'),
            'glyph': 'xf21d@FontAwesome',
            'tooltip': Strings['sharedGeofences'],
            'tooltipType': 'title'
        }, {
            'xtype': 'button',
            'disabled': !0x0,
            'handler': _0xc11a('0x70a'),
            'reference': _0xc11a('0x716'),
            'glyph': 'xf0ae@FontAwesome',
            'tooltip': Strings['sharedComputedAttributes'],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': _0xc11a('0x70b'),
            'reference': 'toolbarDriversButton',
            'glyph': _0xc11a('0x4d5'),
            'tooltip': Strings[_0xc11a('0x4ca')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': _0xc11a('0x70c'),
            'reference': _0xc11a('0x711'),
            'glyph': _0xc11a('0x45d'),
            'tooltip': Strings[_0xc11a('0x4cd')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': 'onNotificationsClick',
            'reference': _0xc11a('0x717'),
            'glyph': _0xc11a('0x4d8'),
            'tooltip': Strings[_0xc11a('0x4c8')],
            'tooltipType': _0xc11a('0x401')
        }, {
            'xtype': _0xc11a('0x41c'),
            'disabled': !0x0,
            'handler': _0xc11a('0x4de'),
            'reference': _0xc11a('0x712'),
            'glyph': _0xc11a('0x4dd'),
            'tooltip': Strings[_0xc11a('0x4d0')],
            'tooltipType': _0xc11a('0x401')
        }]
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings['sharedName'],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x6e2')],
            'dataIndex': 'groupId',
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'AllGroups'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('groupId')
        }]
    }
});
Ext['define'](_0xc11a('0x718'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x719'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'mapstate': _0xc11a('0x6af')
                }
            }
        }
    },
    'onSaveClick': function (_0x4da2ab) {
        var _0x14df84, _0x5fe82f;
        0x0 < this['getView']()[_0xc11a('0x71a')]()[_0xc11a('0x71b')]() && (_0x14df84 = this['getView']()[_0xc11a('0x71a')]()[_0xc11a('0x71c')]()[_0xc11a('0x65b')](),
            _0x5fe82f = this['getView']()[_0xc11a('0x656')]()['getProjection'](),
            this['fireEvent'](_0xc11a('0x71d'), Traccar[_0xc11a('0x71e')]['geometryToWkt'](_0x5fe82f, _0x14df84)),
            _0x4da2ab['up']('window')['close']());
    },
    'onCancelClick': function (_0xd8c9f6) {
        _0xd8c9f6['up']('window')['close']();
    },
    'onTypeSelect': function (_0x170a6c) {
        this['getView']()['removeInteraction']();
        this['getView']()[_0xc11a('0x71f')](_0x170a6c['getValue']());
    },
    'setMapState': function (_0x1ee2f9, _0x4662aa, _0x3ba32c) {
        this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x65c')](ol[_0xc11a('0x5f5')][_0xc11a('0x5f6')]([_0x4662aa, _0x1ee2f9]));
        this['getView']()[_0xc11a('0x656')]()[_0xc11a('0x683')](_0x3ba32c);
    }
});
Ext['define']('Traccar.view.map.GeofenceMap', {
    'extend': Traccar['view']['map'][_0xc11a('0x720')],
    'xtype': 'geofenceMapView',
    'controller': _0xc11a('0x721'),
    'bodyBorder': !0x0,
    'tbar': {
        'items': [{
            'xtype': _0xc11a('0x394'),
            'store': _0xc11a('0x722'),
            'valueField': 'key',
            'displayField': 'name',
            'editable': !0x1,
            'listeners': {
                'select': _0xc11a('0x723')
            }
        }, {
            'xtype': 'tbfill'
        }, {
            'glyph': _0xc11a('0x3fe'),
            'tooltip': Strings[_0xc11a('0x35f')],
            'tooltipType': 'title',
            'minWidth': 0x0,
            'handler': _0xc11a('0x3ff')
        }, {
            'glyph': _0xc11a('0x400'),
            'tooltip': Strings[_0xc11a('0x361')],
            'tooltipType': _0xc11a('0x401'),
            'minWidth': 0x0,
            'handler': _0xc11a('0x724')
        }]
    },
    'getFeatures': function () {
        return this['features'];
    },
    'initMap': function () {
        var _0x2a9ba7, _0xa6e81a;
        this[_0xc11a('0x3c7')]();
        _0x2a9ba7 = this['map'];
        this[_0xc11a('0x725')] = new ol[(_0xc11a('0x726'))]();
        this['area'] ? (_0xa6e81a = Traccar[_0xc11a('0x71e')][_0xc11a('0x6ab')](this['mapView'], this['area']),
            this[_0xc11a('0x725')]['push'](new ol[(_0xc11a('0x65e'))](_0xa6e81a)),
            this[_0xc11a('0x5f4')][_0xc11a('0x3c1')](_0xa6e81a)) : this[_0xc11a('0x727')]['fireEvent'](_0xc11a('0x6b0'));
        _0xa6e81a = ol['color'][_0xc11a('0x640')](Traccar['Style'][_0xc11a('0x641')]);
        _0xa6e81a[0x3] = Traccar['Style']['mapGeofenceOverlayOpacity'];
        new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x728'))]({
            'source': new ol['source'][(_0xc11a('0x728'))]({
                'features': this['features']
            }),
            'style': new ol[(_0xc11a('0x3c5'))][('Style')]({
                'fill': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x642'))]({
                    'color': _0xa6e81a
                }),
                'stroke': new ol['style'][(_0xc11a('0x643'))]({
                    'color': Traccar['Style'][_0xc11a('0x641')],
                    'width': Traccar['Style']['mapGeofenceWidth']
                }),
                'image': new ol['style'][(_0xc11a('0x115'))]({
                    'radius': Traccar['Style']['mapGeofenceRadius'],
                    'fill': new ol[(_0xc11a('0x3c5'))][(_0xc11a('0x642'))]({
                        'color': Traccar['Style']['mapGeofenceColor']
                    })
                })
            })
        })[_0xc11a('0x729')](_0x2a9ba7);
        _0x2a9ba7[_0xc11a('0x71f')](new ol['interaction']['Modify']({
            'features': this[_0xc11a('0x725')],
            'deleteCondition': function (_0x2a9ba7) {
                return ol['events'][_0xc11a('0x72a')][_0xc11a('0x72b')](_0x2a9ba7) && ol['events'][_0xc11a('0x72a')]['singleClick'](_0x2a9ba7);
            }
        }));
    },
    'addInteraction': function (_0x165ce6) {
        this[_0xc11a('0x72c')] = new ol[(_0xc11a('0x72d'))]['Draw']({
            'features': this[_0xc11a('0x725')],
            'type': _0x165ce6
        });
        this[_0xc11a('0x72c')]['on'](_0xc11a('0x72e'), function () {
            this[_0xc11a('0x725')][_0xc11a('0x37d')]();
        }, this);
        this['map']['addInteraction'](this[_0xc11a('0x72c')]);
    },
    'removeInteraction': function () {
        this['draw'] && (this['map'][_0xc11a('0x72f')](this[_0xc11a('0x72c')]),
            this[_0xc11a('0x72c')] = null);
    }
});
Ext['define'](_0xc11a('0x730'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': _0xc11a('0x731'),
    'config': {
        'listen': {
            'controller': {
                '*': {
                    'savearea': _0xc11a('0x732')
                }
            }
        }
    },
    'init': function () {
        this['lookupReference'](_0xc11a('0x733'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference'](_0xc11a('0x6ef')));
    },
    'saveArea': function (_0x77d5b3) {
        this['lookupReference'](_0xc11a('0x734'))[_0xc11a('0x365')](_0x77d5b3);
    },
    'onAreaClick': function (_0xaaae40) {
        _0xaaae40 = _0xaaae40['up']('window')[_0xc11a('0x3b0')]('form')[_0xc11a('0x3cb')]();
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x735')],
            'items': {
                'xtype': _0xc11a('0x736'),
                'area': _0xaaae40['get']('area')
            }
        })[_0xc11a('0x38a')]();
    }
});
Ext['define'](_0xc11a('0x737'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': _0xc11a('0x2f3'),
    'title': Strings[_0xc11a('0x2f4')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'name',
                'fieldLabel': Strings['sharedName']
            }]
        }, {
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x46a')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'description',
                'fieldLabel': Strings[_0xc11a('0x478')]
            }, {
                'xtype': 'clearableComboBox',
                'reference': _0xc11a('0x733'),
                'name': 'calendarId',
                'store': 'Calendars',
                'queryMode': _0xc11a('0x3e0'),
                'displayField': 'name',
                'valueField': 'id',
                'fieldLabel': Strings[_0xc11a('0x475')]
            }, {
                'xtype': 'hiddenfield',
                'name': 'area',
                'allowBlank': !0x1,
                'reference': _0xc11a('0x734')
            }]
        }]
    },
    'buttons': [{
        'text': Strings[_0xc11a('0x735')],
        'glyph': _0xc11a('0x701'),
        'handler': _0xc11a('0x738')
    }, {
        'text': Strings[_0xc11a('0x429')],
        'handler': _0xc11a('0x45f')
    }, {
        'xtype': _0xc11a('0x45c')
    }, {
        'glyph': _0xc11a('0x3fe'),
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x739'), {
    'extend': Traccar['view']['edit'][_0xc11a('0x4b1')],
    'alias': 'controller.geofences',
    'objectModel': 'Traccar.model.Geofence',
    'objectDialog': 'Traccar.view.dialog.Geofence',
    'removeTitle': Strings[_0xc11a('0x2f4')]
});
Ext['define'](_0xc11a('0x73a'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x73b'),
    'controller': _0xc11a('0x73c'),
    'store': 'Geofences',
    'tbar': {
        'xtype': _0xc11a('0x41b')
    },
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x478')],
            'dataIndex': 'description',
            'filter': 'string'
        }, {
            'text': Strings['sharedCalendar'],
            'dataIndex': 'calendarId',
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define']('Traccar.view.dialog.Driver', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'title': Strings['sharedDriver'],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings['sharedRequired'],
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'name',
                'fieldLabel': Strings[_0xc11a('0x357')],
                'allowBlank': !0x1
            }, {
                'xtype': _0xc11a('0x356'),
                'name': 'uniqueId',
                'fieldLabel': Strings[_0xc11a('0x469')],
                'allowBlank': !0x1
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x73d'), {
    'extend': Traccar['view'][_0xc11a('0x403')][_0xc11a('0x4b1')],
    'alias': 'controller.drivers',
    'objectModel': 'Traccar.model.Driver',
    'objectDialog': _0xc11a('0x73e'),
    'removeTitle': Strings[_0xc11a('0x5a5')]
});
Ext['define'](_0xc11a('0x73f'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x740'),
    'controller': _0xc11a('0x741'),
    'store': 'Drivers',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x478')],
            'dataIndex': 'uniqueId',
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x742'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': _0xc11a('0x743'),
    'init': function () {
        this['lookupReference'](_0xc11a('0x733'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableCalendars'));
    }
});
Ext['define'](_0xc11a('0x744'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': _0xc11a('0x745'),
    'title': Strings[_0xc11a('0x746')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x468')],
            'items': [{
                'xtype': _0xc11a('0x394'),
                'name': 'type',
                'fieldLabel': Strings['sharedType'],
                'store': 'AllNotificationTypes',
                'queryMode': _0xc11a('0x3e0'),
                'displayField': 'name',
                'valueField': 'type',
                'editable': !0x1,
                'allowBlank': !0x1
            }, {
                'xtype': _0xc11a('0x39a'),
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'name': 'always',
                'fieldLabel': Strings[_0xc11a('0x499')]
            }, {
                'fieldLabel': Strings['notificationNotificators'],
                'xtype': _0xc11a('0x537'),
                'name': 'notificators',
                'maxWidth': Traccar['Style'][_0xc11a('0x539')],
                'store': 'AllNotificators',
                'valueField': 'type',
                'displayField': 'name',
                'queryMode': _0xc11a('0x3e0')
            }]
        }, {
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x46a')],
            'collapsible': !0x0,
            'collapsed': !0x0,
            'items': [{
                'xtype': _0xc11a('0x46b'),
                'reference': 'calendarCombo',
                'name': 'calendarId',
                'store': 'Calendars',
                'queryMode': _0xc11a('0x3e0'),
                'displayField': 'name',
                'valueField': 'id',
                'fieldLabel': Strings[_0xc11a('0x475')]
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x747'), {
    'extend': Traccar['view'][_0xc11a('0x403')][_0xc11a('0x4b1')],
    'alias': 'controller.notifications',
    'objectModel': 'Traccar.model.Notification',
    'objectDialog': _0xc11a('0x744'),
    'removeTitle': Strings[_0xc11a('0x746')]
});
Ext['define'](_0xc11a('0x748'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x749'),
    'controller': _0xc11a('0x74a'),
    'store': _0xc11a('0x6f5'),
    'tbar': {
        'xtype': _0xc11a('0x41b')
    },
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x497')],
            'dataIndex': 'type',
            'flex': 0x2,
            'renderer': function (_0x33d235) {
                return Traccar['app']['getEventString'](_0x33d235);
            },
            'filter': {
                'type': _0xc11a('0x445'),
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllNotificationTypes'
            }
        }, {
            'text': Strings[_0xc11a('0x499')],
            'dataIndex': 'always',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('always'),
            'filter': 'boolean'
        }, {
            'text': Strings[_0xc11a('0x49a')],
            'dataIndex': 'notificators',
            'flex': 0x2,
            'filter': {
                'type': _0xc11a('0x492'),
                'idField': 'type',
                'labelField': 'name',
                'store': _0xc11a('0x74b')
            },
            'renderer': function (_0x4faaf2) {
                var _0x3e21b = '', _0x16fd11;
                if (_0x4faaf2)
                    for (_0x16fd11 = _0x4faaf2['split'](/[ ,]+/)['filter'](Boolean),
                        _0x4faaf2 = 0x0; _0x4faaf2 < _0x16fd11['length']; _0x4faaf2++)
                        _0x3e21b += Traccar['app'][_0xc11a('0x49b')](_0x16fd11[_0x4faaf2]) + (_0x4faaf2 < _0x16fd11['length'] - 0x1 ? ',\x20' : '');
                return _0x3e21b;
            }
        }, {
            'text': Strings[_0xc11a('0x475')],
            'dataIndex': 'calendarId',
            'hidden': !0x0,
            'filter': {
                'type': _0xc11a('0x445'),
                'labelField': 'name',
                'store': 'AllCalendars'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('calendarId')
        }]
    }
});
Ext['define'](_0xc11a('0x74c'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x74d'),
    'onShowClick': function () {
        Ext['getStore'](_0xc11a('0x74e'))['load']({
            'params': {
                'from': this['lookupReference'](_0xc11a('0x51f'))['getValue']()[_0xc11a('0x569')](),
                'to': this['lookupReference']('toDateField')['getValue']()[_0xc11a('0x569')]()
            }
        });
    }
});
Ext['define'](_0xc11a('0x74f'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x750'),
    'controller': _0xc11a('0x751'),
    'store': 'Statistics',
    'tbar': {
        'scrollable': !0x0,
        'items': [{
            'xtype': 'tbtext',
            'html': Strings[_0xc11a('0x752')]
        }, {
            'xtype': _0xc11a('0x548'),
            'reference': _0xc11a('0x51f'),
            'startDay': Traccar['Style']['weekStartDay'],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date(new Date()[_0xc11a('0x545')]() - 0x5265c00)
        }, '-', {
            'xtype': _0xc11a('0x4e6'),
            'html': Strings[_0xc11a('0x547')]
        }, {
            'xtype': _0xc11a('0x548'),
            'reference': _0xc11a('0x522'),
            'startDay': Traccar['Style'][_0xc11a('0x543')],
            'format': Traccar['Style'][_0xc11a('0x544')],
            'value': new Date()
        }, '-', {
            'text': Strings[_0xc11a('0x5ae')],
            'handler': 'onShowClick'
        }]
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x753')],
            'dataIndex': _0xc11a('0x754'),
            'xtype': _0xc11a('0x59a'),
            'renderer': Traccar['AttributeFormatter']['defaultFormatter']()
        }, {
            'text': Strings[_0xc11a('0x755')],
            'dataIndex': _0xc11a('0x13a')
        }, {
            'text': Strings[_0xc11a('0x756')],
            'dataIndex': _0xc11a('0x13b')
        }, {
            'text': Strings[_0xc11a('0x757')],
            'dataIndex': 'requests'
        }, {
            'text': Strings[_0xc11a('0x758')],
            'dataIndex': _0xc11a('0x13d')
        }, {
            'text': Strings['statisticsMessagesStored'],
            'dataIndex': _0xc11a('0x759')
        }, {
            'text': Strings['notificationMail'],
            'dataIndex': _0xc11a('0x13e')
        }, {
            'text': Strings[_0xc11a('0x447')],
            'dataIndex': 'smsSent'
        }, {
            'text': Strings[_0xc11a('0x75a')],
            'dataIndex': _0xc11a('0x75b')
        }, {
            'text': Strings[_0xc11a('0x75c')],
            'dataIndex': 'geolocationRequests'
        }]
    }
});
Ext['define']('Traccar.view.dialog.DeviceDistanceController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x75d'),
    'onSetClick': function () {
        var _0x3bae2c = {
            'deviceId': this['getView']()['deviceId'],
            'totalDistance': this['lookupReference']('totalDistance')['getValue']()
        };
        Ext['Ajax']['request']({
            'scope': this,
            'method': 'PUT',
            'url': _0xc11a('0x75e') + _0x3bae2c['deviceId'] + _0xc11a('0x75f'),
            'jsonData': Ext['util'][_0xc11a('0x43d')]['encode'](_0x3bae2c),
            'callback': function (_0x3bae2c, _0x5db22e, _0x18165f) {
                _0x5db22e || Traccar['app']['showError'](_0x18165f);
            }
        });
        this[_0xc11a('0x34e')]();
    }
});
Ext['define'](_0xc11a('0x4d1'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x38c')],
    'controller': _0xc11a('0x760'),
    'title': Strings[_0xc11a('0x4df')],
    'items': [{
        'xtype': _0xc11a('0x3d8'),
        'dataType': 'distance',
        'reference': _0xc11a('0x2e6'),
        'fieldLabel': Strings[_0xc11a('0x2e7')]
    }],
    'buttons': [{
        'reference': _0xc11a('0x761'),
        'glyph': _0xc11a('0x3fe'),
        'tooltip': Strings[_0xc11a('0x762')],
        'tooltipType': 'title',
        'minWidth': 0x0,
        'handler': _0xc11a('0x763')
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': _0xc11a('0x34e')
    }]
});
Ext['define'](_0xc11a('0x764'), {
    'extend': Traccar['view']['dialog']['BaseEditController'],
    'alias': _0xc11a('0x765'),
    'onFileChange': function (_0x413ca3) {
        var _0x355ce3;
        0x0 < _0x413ca3['fileInputEl'][_0xc11a('0x5fc')][_0xc11a('0x766')]['length'] && (_0x355ce3 = new FileReader(),
            _0x355ce3[_0xc11a('0x767')] = function (_0x355ce3) {
                _0x413ca3['up']('window')['lookupReference'](_0xc11a('0x768'))['setValue'](_0x355ce3[_0xc11a('0x769')]['result']['substr'](_0x355ce3[_0xc11a('0x769')]['result'][indexOf](',') + 0x1));
            }
            ,
            _0x355ce3[_0xc11a('0x76a')] = function (_0x413ca3) {
                Traccar['app']['showError'](_0x413ca3['target'][_0xc11a('0x76b')]);
            }
            ,
            _0x355ce3['readAsDataURL'](_0x413ca3[_0xc11a('0x76c')][_0xc11a('0x5fc')][_0xc11a('0x766')][0x0]));
    }
});
Ext['define'](_0xc11a('0x76d'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': _0xc11a('0x76e'),
    'title': Strings[_0xc11a('0x475')],
    'items': {
        'xtype': 'form',
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x468')],
            'items': [{
                'xtype': 'textfield',
                'name': 'name',
                'fieldLabel': Strings['sharedName'],
                'allowBlank': !0x1
            }, {
                'xtype': _0xc11a('0x76f'),
                'name': _0xc11a('0x770'),
                'fieldLabel': Strings[_0xc11a('0x771')],
                'allowBlank': !0x1,
                'buttonConfig': {
                    'glyph': _0xc11a('0x45d'),
                    'text': '',
                    'tooltip': Strings[_0xc11a('0x772')],
                    'tooltipType': 'title',
                    'minWidth': 0x0
                },
                'listeners': {
                    'change': _0xc11a('0x773')
                }
            }]
        }, {
            'xtype': 'hiddenfield',
            'name': 'data',
            'allowBlank': !0x1,
            'reference': 'dataField'
        }]
    }
});
Ext['define'](_0xc11a('0x774'), {
    'extend': Traccar['view'][_0xc11a('0x403')][_0xc11a('0x4b1')],
    'alias': _0xc11a('0x775'),
    'objectModel': 'Traccar.model.Calendar',
    'objectDialog': 'Traccar.view.dialog.Calendar',
    'removeTitle': Strings[_0xc11a('0x475')]
});
Ext['define'](_0xc11a('0x776'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x777'),
    'controller': _0xc11a('0x778'),
    'store': 'Calendars',
    'tbar': {
        'xtype': 'editToolbar'
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string'
        }]
    }
});
Ext['define'](_0xc11a('0x779'), {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': _0xc11a('0x77a'),
    'title': Strings[_0xc11a('0x77b')],
    'items': [{
        'xtype': 'form',
        'listeners': {
            'validitychange': _0xc11a('0x3fc')
        },
        'items': [{
            'xtype': _0xc11a('0x457'),
            'title': Strings[_0xc11a('0x468')],
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'description',
                'fieldLabel': Strings[_0xc11a('0x478')]
            }, {
                'xtype': 'checkboxfield',
                'name': 'textChannel',
                'inputValue': !0x0,
                'uncheckedValue': !0x1,
                'fieldLabel': Strings['notificationSms']
            }, {
                'xtype': _0xc11a('0x394'),
                'name': 'type',
                'reference': 'commandType',
                'fieldLabel': Strings['sharedType'],
                'store': 'AllCommandTypes',
                'queryMode': _0xc11a('0x3e0'),
                'displayField': 'name',
                'valueField': 'type',
                'editable': !0x1,
                'allowBlank': !0x1,
                'listeners': {
                    'change': _0xc11a('0x44f')
                }
            }, {
                'xtype': _0xc11a('0x45b'),
                'reference': 'parameters'
            }]
        }]
    }],
    'buttons': [{
        'glyph': _0xc11a('0x3fe'),
        'reference': 'saveButton',
        'tooltip': Strings[_0xc11a('0x35f')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'disabled': !0x0,
        'handler': 'onSaveClick'
    }, {
        'glyph': _0xc11a('0x400'),
        'tooltip': Strings[_0xc11a('0x361')],
        'tooltipType': _0xc11a('0x401'),
        'minWidth': 0x0,
        'handler': 'closeView'
    }]
});
Ext['define'](_0xc11a('0x77c'), {
    'extend': Traccar['view'][_0xc11a('0x403')]['ToolbarController'],
    'alias': _0xc11a('0x77d'),
    'objectModel': 'Traccar.model.Command',
    'objectDialog': _0xc11a('0x779'),
    'removeTitle': Strings[_0xc11a('0x77b')]
});
Ext['define'](_0xc11a('0x77e'), {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x77f'),
    'controller': _0xc11a('0x780'),
    'store': 'Commands',
    'tbar': {
        'xtype': _0xc11a('0x41b')
    },
    'listeners': {
        'selectionchange': 'onSelectionChange'
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style']['columnWidthNormal']
        },
        'items': [{
            'text': Strings[_0xc11a('0x478')],
            'dataIndex': 'description',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x2de')],
            'dataIndex': 'type',
            'filter': {
                'type': 'list',
                'idField': 'type',
                'labelField': 'name',
                'store': 'AllCommandTypes'
            },
            'renderer': Traccar['AttributeFormatter']['getFormatter']('commandType')
        }, {
            'text': Strings['notificationSms'],
            'dataIndex': 'textChannel',
            'renderer': Traccar['AttributeFormatter']['getFormatter']('textChannel'),
            'filter': 'boolean'
        }]
    }
});
Ext['define']('Traccar.view.dialog.MaintenanceController', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x42b')],
    'alias': 'controller.maintenance',
    'init': function () {
        this['startConfig'] = Ext['clone'](this['lookupReference'](_0xc11a('0x781'))[_0xc11a('0x782')]);
        this[_0xc11a('0x783')][_0xc11a('0x3d2')] = 0x0;
        this[_0xc11a('0x784')] = Ext[_0xc11a('0x3d5')](this['lookupReference'](_0xc11a('0x525'))[_0xc11a('0x782')]);
        this[_0xc11a('0x784')][_0xc11a('0x3d2')] = 0x0;
        this['lookupReference']('saveButton')['setDisabled'](!0x0);
    },
    'onValidityChange': function (_0x3efec3, _0x4ec5c4) {
        this['lookupReference']('saveButton')['setDisabled'](!_0x4ec5c4);
    },
    'updateFieldConfig': function (_0x58e740, _0x2d73d8, _0x376567) {
        var _0xdf2f01 = this['lookupReference'](_0x58e740);
        _0xdf2f01['hoursConverter'] !== _0x376567['dataType'] ? (this['getView']()[_0xc11a('0x3b0')](_0xc11a('0x457'))[_0xc11a('0x3e4')](this['getView']()[_0xc11a('0x3b0')]('fieldset')[_0xc11a('0x3e5')][indexOf](_0xdf2f01), Ext[_0xc11a('0x785')]({}, _0x2d73d8, _0x376567)),
            this['getView']()[_0xc11a('0x3b0')](_0xc11a('0x457'))['remove'](_0xdf2f01),
            this['lookupReference'](_0x58e740)[_0xc11a('0x3e7')]()) : (_0xdf2f01[_0xc11a('0x3e6')](_0x376567),
                _0xdf2f01[_0xc11a('0x3e7')]());
    },
    'onNameChange': function (_0x558d16, _0x200e98) {
        var _0x31cd7e = {};
        if (_0x558d16 = _0x558d16['getStore']()['getById'](_0x200e98))
            void 0x0 !== _0x558d16['get'](_0xc11a('0x3d9')) ? _0x31cd7e[_0xc11a('0x3d9')] = _0x558d16['get'](_0xc11a('0x3d9')) : _0x31cd7e[_0xc11a('0x3d9')] = !0x0,
                _0x31cd7e['hoursConverter'] = _0x558d16['get']('dataType'),
                _0x31cd7e[_0xc11a('0x3da')] = _0x558d16['get'](_0xc11a('0x3da')),
                _0x31cd7e[_0xc11a('0x3db')] = _0x558d16['get']('minValue');
        this[_0xc11a('0x786')](_0xc11a('0x781'), this[_0xc11a('0x783')], _0x31cd7e);
        this[_0xc11a('0x786')]('periodField', this[_0xc11a('0x784')], _0x31cd7e);
    }
});
Ext['define']('Traccar.view.dialog.Maintenance', {
    'extend': Traccar['view']['dialog'][_0xc11a('0x467')],
    'controller': 'maintenance',
    'title': Strings[_0xc11a('0x59b')],
    'items': {
        'xtype': 'form',
        'listeners': {
            'validitychange': _0xc11a('0x3fc')
        },
        'items': [{
            'xtype': 'fieldset',
            'title': Strings[_0xc11a('0x468')],
            'items': [{
                'xtype': _0xc11a('0x356'),
                'name': 'name',
                'fieldLabel': Strings[_0xc11a('0x357')],
                'allowBlank': !0x1
            }, {
                'xtype': _0xc11a('0x394'),
                'name': 'type',
                'reference': _0xc11a('0x4a7'),
                'fieldLabel': Strings[_0xc11a('0x2de')],
                'displayField': 'name',
                'valueField': 'key',
                'allowBlank': !0x1,
                'queryMode': _0xc11a('0x3e0'),
                'store': 'MaintenanceTypes',
                'listeners': {
                    'change': _0xc11a('0x787')
                }
            }, {
                'xtype': 'customNumberField',
                'name': 'start',
                'reference': _0xc11a('0x781'),
                'fieldLabel': Strings[_0xc11a('0x4bb')]
            }, {
                'xtype': _0xc11a('0x3d8'),
                'name': _0xc11a('0x4bd'),
                'reference': _0xc11a('0x525'),
                'allowBlank': !0x1,
                'fieldLabel': Strings[_0xc11a('0x4bc')],
                'validator': function (_0x3be20c) {
                    return 0x0 !== this[_0xc11a('0x3f8')](_0x3be20c) ? !0x0 : Strings['errorZero'];
                }
            }]
        }]
    }
});
Ext['define'](_0xc11a('0x788'), {
    'extend': Traccar['view']['edit']['ToolbarController'],
    'alias': _0xc11a('0x789'),
    'objectModel': 'Traccar.model.Maintenance',
    'objectDialog': 'Traccar.view.dialog.Maintenance',
    'removeTitle': Strings[_0xc11a('0x59b')]
});
Ext['define']('Traccar.view.edit.Maintenances', {
    'extend': Traccar['view'][_0xc11a('0x424')],
    'xtype': _0xc11a('0x78a'),
    'controller': _0xc11a('0x78b'),
    'store': 'Maintenances',
    'tbar': {
        'xtype': _0xc11a('0x41b')
    },
    'listeners': {
        'selectionchange': _0xc11a('0x425')
    },
    'columns': {
        'defaults': {
            'flex': 0x1,
            'minWidth': Traccar['Style'][_0xc11a('0x444')]
        },
        'items': [{
            'text': Strings[_0xc11a('0x357')],
            'dataIndex': 'name',
            'filter': 'string'
        }, {
            'text': Strings[_0xc11a('0x2de')],
            'dataIndex': 'type',
            'filter': {
                'type': _0xc11a('0x445'),
                'idField': 'key',
                'labelField': 'name',
                'store': 'MaintenanceTypes'
            },
            'renderer': function (_0x217797) {
                var _0xdff3b0 = Ext['getStore']('MaintenanceTypes')['getById'](_0x217797);
                return _0xdff3b0 && _0xdff3b0['get']('name') || _0x217797;
            }
        }, {
            'text': Strings[_0xc11a('0x4bb')],
            'dataIndex': 'start',
            'renderer': function (_0x4d22d2, _0x3c0907, _0x57a484) {
                return Traccar['AttributeFormatter']['renderAttribute'](_0x4d22d2, Ext['getStore']('MaintenanceTypes')['getById'](_0x57a484['get']('type')));
            }
        }, {
            'text': Strings[_0xc11a('0x4bc')],
            'dataIndex': _0xc11a('0x4bd'),
            'renderer': function (_0x2b7ad5, _0x411e53, _0xcbaf9e) {
                return Traccar['AttributeFormatter'][_0xc11a('0x4be')](_0x2b7ad5, Ext['getStore']('MaintenanceTypes')['getById'](_0xcbaf9e['get']('type')));
            }
        }]
    }
});
Ext['define']('Traccar.view.SettingsMenuController', {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x78c'),
    'init': function () {
        var _0x19c161, _0x235c13, _0x5c9b47, _0x2f4e85;
        _0x19c161 = Traccar['app']['getUser']()['get']('administrator');
        _0x235c13 = 0x0 !== Traccar['app']['getUser']()['get'](_0xc11a('0x4c5'));
        _0x5c9b47 = Traccar['app']['getPreference']('readonly', !0x1);
        _0x2f4e85 = Traccar['app']['getUser']()['get']('deviceReadonly');
        _0x19c161 && (this['lookupReference'](_0xc11a('0x78d'))[_0xc11a('0x3a4')](!0x1),
            this['lookupReference']('settingsStatisticsButton')[_0xc11a('0x3a4')](!0x1));
        (_0x19c161 || _0x235c13) && this['lookupReference'](_0xc11a('0x78e'))[_0xc11a('0x3a4')](!0x1);
        if (_0x19c161 || !_0x5c9b47)
            this['lookupReference'](_0xc11a('0x78f'))[_0xc11a('0x3a4')](!0x1),
                this['lookupReference'](_0xc11a('0x790'))[_0xc11a('0x3a4')](!0x1),
                this['lookupReference'](_0xc11a('0x791'))[_0xc11a('0x3a4')](!0x1),
                this['lookupReference'](_0xc11a('0x792'))[_0xc11a('0x3a4')](!0x1),
                this['lookupReference']('settingsCalendarsButton')[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableCalendars')),
                this['lookupReference'](_0xc11a('0x793'))['setHidden'](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers')),
                this['lookupReference'](_0xc11a('0x794'))[_0xc11a('0x3a4')](Traccar['app']['getPreference']('limitCommands', !0x1)),
                this['lookupReference']('settingsMaintenancesButton')['setHidden'](Traccar['app']['getVehicleFeaturesDisabled']() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
        (_0x19c161 || !_0x2f4e85 && !_0x5c9b47) && this['lookupReference'](_0xc11a('0x795'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
    },
    'onUserClick': function () {
        var _0x52e8c0 = Ext['create'](_0xc11a('0x6c0'), {
            'selfEdit': !0x0
        });
        _0x52e8c0[_0xc11a('0x3b0')]('form')['loadRecord'](Traccar['app']['getUser']());
        _0x52e8c0['lookupReference'](_0xc11a('0x6d7'))[_0xc11a('0x3a4')](!0x1);
        _0x52e8c0[_0xc11a('0x38a')]();
    },
    'onGroupsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x6f3')],
            'items': {
                'xtype': _0xc11a('0x796')
            }
        })[_0xc11a('0x38a')]();
    },
    'onGeofencesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d6')],
            'items': {
                'xtype': _0xc11a('0x73b')
            }
        })['show']();
    },
    'onServerClick': function () {
        var _0x3f484e = Ext['create'](_0xc11a('0x797'));
        _0x3f484e[_0xc11a('0x3b0')]('form')[_0xc11a('0x3b1')](Traccar['app'][_0xc11a('0x798')]());
        _0x3f484e[_0xc11a('0x38a')]();
    },
    'onUsersClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x6f6')],
            'items': {
                'xtype': _0xc11a('0x6ff')
            }
        })[_0xc11a('0x38a')]();
    },
    'onNotificationsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4c8')],
            'items': {
                'xtype': _0xc11a('0x749')
            }
        })['show']();
    },
    'onComputedAttributesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': 'computedAttributesView'
            }
        })[_0xc11a('0x38a')]();
    },
    'onStatisticsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['statisticsTitle'],
            'items': {
                'xtype': 'statisticsView'
            }
        })['show']();
    },
    'onCalendarsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedCalendars'],
            'items': {
                'xtype': _0xc11a('0x777')
            }
        })[_0xc11a('0x38a')]();
    },
    'onDriversClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4ca')],
            'items': {
                'xtype': _0xc11a('0x740')
            }
        })[_0xc11a('0x38a')]();
    },
    'onCommandsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedSavedCommands'],
            'items': {
                'xtype': _0xc11a('0x77f')
            }
        })[_0xc11a('0x38a')]();
    },
    'onMaintenancesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d0')],
            'items': {
                'xtype': _0xc11a('0x78a')
            }
        })[_0xc11a('0x38a')]();
    },
    'onLogoutClick': function () {
        Ext['create']('Traccar.view.dialog.LoginController')[_0xc11a('0x799')]();
    }
});
Ext['define'](_0xc11a('0x79a'), {
    'extend': Ext[_0xc11a('0x41c')][_0xc11a('0x4d2')],
    'xtype': _0xc11a('0x79b'),
    'glyph': 'xf013@FontAwesome',
    'tooltip': Strings[_0xc11a('0x4d4')],
    'tooltipType': _0xc11a('0x401'),
    'menu': {
        'controller': _0xc11a('0x79c'),
        'items': [{
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x6c1')],
            'glyph': _0xc11a('0x79d'),
            'handler': 'onUserClick',
            'reference': _0xc11a('0x78f')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x6f3')],
            'glyph': 'xf247@FontAwesome',
            'handler': _0xc11a('0x79e'),
            'reference': _0xc11a('0x790')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4ca')],
            'glyph': _0xc11a('0x4d5'),
            'handler': _0xc11a('0x70b'),
            'reference': _0xc11a('0x793')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4d6')],
            'glyph': _0xc11a('0x701'),
            'handler': _0xc11a('0x4d7'),
            'reference': _0xc11a('0x791')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x79f')],
            'glyph': _0xc11a('0x7a0'),
            'handler': 'onServerClick',
            'reference': _0xc11a('0x78d')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x6f6')],
            'glyph': _0xc11a('0x705'),
            'handler': _0xc11a('0x7a1'),
            'reference': _0xc11a('0x78e')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4c8')],
            'glyph': _0xc11a('0x4d8'),
            'handler': 'onNotificationsClick',
            'reference': 'settingsNotificationsButton'
        }, {
            'hidden': !0x0,
            'text': Strings['sharedComputedAttributes'],
            'glyph': _0xc11a('0x4db'),
            'handler': _0xc11a('0x4dc'),
            'reference': 'settingsComputedAttributesButton'
        }, {
            'hidden': !0x0,
            'text': Strings['statisticsTitle'],
            'glyph': _0xc11a('0x7a2'),
            'handler': _0xc11a('0x7a3'),
            'reference': _0xc11a('0x7a4')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x709')],
            'glyph': _0xc11a('0x708'),
            'handler': _0xc11a('0x707'),
            'reference': 'settingsCalendarsButton'
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4cd')],
            'glyph': 'xf093@FontAwesome',
            'handler': _0xc11a('0x70c'),
            'reference': _0xc11a('0x794')
        }, {
            'hidden': !0x0,
            'text': Strings['sharedMaintenances'],
            'glyph': _0xc11a('0x4dd'),
            'handler': _0xc11a('0x4de'),
            'reference': _0xc11a('0x7a5')
        }, {
            'text': Strings[_0xc11a('0x7a6')],
            'glyph': _0xc11a('0x7a7'),
            'handler': 'onLogoutClick'
        }]
    }
});
Ext['define'](_0xc11a('0x7a8'), {
    'extend': Ext['app']['ViewController'],
    'alias': _0xc11a('0x7a9'),
    'init': function () {
        var _0x140748, _0xa6611a, _0xc2e867, _0x72ea01;
        _0x140748 = Traccar['app']['getUser']()['get']('administrator');
        _0xa6611a = 0x0 !== Traccar['app']['getUser']()['get'](_0xc11a('0x4c5'));
        _0xc2e867 = Traccar['app']['getPreference']('readonly', !0x1);
        _0x72ea01 = Traccar['app']['getUser']()['get']('deviceReadonly');
        _0x140748 && (this['lookupReference'](_0xc11a('0x78d'))[_0xc11a('0x3a4')](!0x1),
            this['lookupReference'](_0xc11a('0x7a4'))[_0xc11a('0x3a4')](!0x1));
        (_0x140748 || _0xa6611a) && this['lookupReference']('settingsUsersButton')[_0xc11a('0x3a4')](!0x1);
        if (_0x140748 || !_0xc2e867)
            this['lookupReference'](_0xc11a('0x78f'))[_0xc11a('0x3a4')](!0x1),
                this['lookupReference'](_0xc11a('0x790'))['setHidden'](!0x1),
                this['lookupReference'](_0xc11a('0x791'))[_0xc11a('0x3a4')](!0x1),
                this['lookupReference']('settingsNotificationsButton')[_0xc11a('0x3a4')](!0x1),
                this['lookupReference'](_0xc11a('0x7aa'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference'](_0xc11a('0x6ef'))),
                this['lookupReference'](_0xc11a('0x793'))[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableDrivers')),
                this['lookupReference'](_0xc11a('0x794'))[_0xc11a('0x3a4')](Traccar['app']['getPreference']('limitCommands', !0x1)),
                this['lookupReference'](_0xc11a('0x7a5'))[_0xc11a('0x3a4')](Traccar['app'][_0xc11a('0x4c2')]() || Traccar['app']['getBooleanAttributePreference']('ui.disableMaintenances'));
        (_0x140748 || !_0x72ea01 && !_0xc2e867) && this['lookupReference'](_0xc11a('0x795'))[_0xc11a('0x3a4')](Traccar['app']['getBooleanAttributePreference']('ui.disableComputedAttributes'));
        this['lookupReference'](_0xc11a('0x7ab'))[_0xc11a('0x3a4')](!0x1);
        this['lookupReference'](_0xc11a('0x7ac'))['setVisible'](Traccar['app'][_0xc11a('0x57f')]() && !Traccar['app']['getBooleanAttributePreference']('ui.disableReport'));
        this['lookupReference'](_0xc11a('0x7ad'))['setVisible'](Traccar['app'][_0xc11a('0x57f')]() && !Traccar['app']['getBooleanAttributePreference'](_0xc11a('0x7ae')));
    },
    'onUserClick': function () {
        var _0x57e342 = Ext['create'](_0xc11a('0x6c0'), {
            'selfEdit': !0x0
        });
        _0x57e342[_0xc11a('0x3b0')]('form')['loadRecord'](Traccar['app']['getUser']());
        _0x57e342['lookupReference'](_0xc11a('0x6d7'))[_0xc11a('0x3a4')](!0x1);
        _0x57e342[_0xc11a('0x38a')]();
    },
    'onGroupsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x6f3')],
            'items': {
                'xtype': _0xc11a('0x796')
            }
        })[_0xc11a('0x38a')]();
    },
    'onGeofencesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d6')],
            'items': {
                'xtype': _0xc11a('0x73b')
            }
        })[_0xc11a('0x38a')]();
    },
    'onServerClick': function () {
        var _0x4f00a8 = Ext['create'](_0xc11a('0x797'));
        _0x4f00a8[_0xc11a('0x3b0')]('form')[_0xc11a('0x3b1')](Traccar['app'][_0xc11a('0x798')]());
        _0x4f00a8[_0xc11a('0x38a')]();
    },
    'onUsersClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x6f6')],
            'items': {
                'xtype': _0xc11a('0x6ff')
            }
        })[_0xc11a('0x38a')]();
    },
    'onNotificationsClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4c8')],
            'items': {
                'xtype': 'notificationsView'
            }
        })['show']();
    },
    'onComputedAttributesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings['sharedComputedAttributes'],
            'items': {
                'xtype': 'computedAttributesView'
            }
        })[_0xc11a('0x38a')]();
    },
    'onStatisticsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x7af')],
            'items': {
                'xtype': 'statisticsView'
            }
        })['show']();
    },
    'onCalendarsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x709')],
            'items': {
                'xtype': _0xc11a('0x777')
            }
        })[_0xc11a('0x38a')]();
    },
    'onDriversClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4ca')],
            'items': {
                'xtype': _0xc11a('0x740')
            }
        })[_0xc11a('0x38a')]();
    },
    'onCommandsClick': function () {
        Ext['create']('Traccar.view.BaseWindow', {
            'title': Strings[_0xc11a('0x4cd')],
            'items': {
                'xtype': _0xc11a('0x77f')
            }
        })[_0xc11a('0x38a')]();
    },
    'onMaintenancesClick': function () {
        Ext['create'](_0xc11a('0x428'), {
            'title': Strings[_0xc11a('0x4d0')],
            'items': {
                'xtype': _0xc11a('0x78a')
            }
        })[_0xc11a('0x38a')]();
    },
    'onLogoutClick': function () {
        Ext['create']('Traccar.view.dialog.LoginController')['logout']();
    },
    'showReports': function () {
        Traccar['app'][_0xc11a('0x54e')](!0x0);
    },
    'showEvents': function () {
        Traccar['app'][_0xc11a('0x7b0')](!0x0);
    },
    'onPagamento': function () {
        var _0x139a3d = window['open']('', _0xc11a('0x69c'));
        $['ajax']({
            'url': _0xc11a('0x7b1'),
            'dataType': 'json',
            'success': function (_0x43e47a) {
                _0x139a3d[location] = _0x43e47a[_0xc11a('0x56a')][_0xc11a('0x69e')];
            }
        });
    },
    'contactClickMenu': function () {
        var _0x2ce345 = window[_0xc11a('0x69b')]('', _0xc11a('0x69c'));
        $['ajax']({
            'url': '../../config/config.json',
            'dataType': 'json',
            'success': function (_0x5358f3) {
                _0x2ce345['location'] = _0x5358f3[_0xc11a('0x56a')][_0xc11a('0x69f')];
            }
        });
    }
});
Ext['define'](_0xc11a('0x7b2'), {
    'extend': Ext['button']['Button'],
    'xtype': 'megaMenu',
    'glyph': 'xf0c9@FontAwesome',
    'tooltip': _0xc11a('0x7b3'),
    'tooltipType': _0xc11a('0x401'),
    'menu': {
        'controller': _0xc11a('0x7b4'),
        'items': [{
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x5a9')],
            'glyph': _0xc11a('0x7b5'),
            'handler': 'showReports',
            'reference': _0xc11a('0x7ac')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x5c7')],
            'glyph': _0xc11a('0x7b6'),
            'handler': _0xc11a('0x7b0'),
            'reference': _0xc11a('0x7ad')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x6c1')],
            'glyph': _0xc11a('0x79d'),
            'handler': 'onUserClick',
            'reference': _0xc11a('0x78f')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x6f3')],
            'glyph': _0xc11a('0x7b7'),
            'handler': _0xc11a('0x79e'),
            'reference': _0xc11a('0x790')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4ca')],
            'glyph': 'xf1b9@FontAwesome',
            'handler': 'onDriversClick',
            'reference': _0xc11a('0x793')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4d6')],
            'glyph': _0xc11a('0x701'),
            'handler': _0xc11a('0x4d7'),
            'reference': 'settingsGeofencesButton'
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x79f')],
            'glyph': _0xc11a('0x7a0'),
            'handler': _0xc11a('0x7b8'),
            'reference': _0xc11a('0x78d')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x6f6')],
            'glyph': _0xc11a('0x705'),
            'handler': _0xc11a('0x7a1'),
            'reference': _0xc11a('0x78e')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4c8')],
            'glyph': _0xc11a('0x4d8'),
            'handler': _0xc11a('0x706'),
            'reference': _0xc11a('0x792')
        }, {
            'hidden': !0x0,
            'text': Strings['sharedComputedAttributes'],
            'glyph': _0xc11a('0x4db'),
            'handler': _0xc11a('0x4dc'),
            'reference': _0xc11a('0x795')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x7af')],
            'glyph': _0xc11a('0x7a2'),
            'handler': _0xc11a('0x7a3'),
            'reference': 'settingsStatisticsButton'
        }, {
            'hidden': !0x0,
            'text': Strings['sharedCalendars'],
            'glyph': _0xc11a('0x708'),
            'handler': _0xc11a('0x707'),
            'reference': _0xc11a('0x7aa')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4cd')],
            'glyph': 'xf093@FontAwesome',
            'handler': _0xc11a('0x70c'),
            'reference': _0xc11a('0x794')
        }, {
            'hidden': !0x0,
            'text': Strings[_0xc11a('0x4d0')],
            'glyph': 'xf0ad@FontAwesome',
            'handler': _0xc11a('0x4de'),
            'reference': _0xc11a('0x7a5')
        }, {
            'text': _0xc11a('0x7b9'),
            'glyph': _0xc11a('0x7ba'),
            'handler': 'onPagamento',
            'reference': _0xc11a('0x7bb')
        }, {
            'hidden': !0x0,
            'text': _0xc11a('0x7bc'),
            'glyph': _0xc11a('0x7bd'),
            'handler': 'contactClickMenu',
            'reference': 'contactWhatsMegaMenu'
        }, {
            'text': Strings[_0xc11a('0x7a6')],
            'glyph': _0xc11a('0x7a7'),
            'handler': _0xc11a('0x7be')
        }]
    }
});
Ext['define'](_0xc11a('0x7bf'), {
    'extend': Traccar['view']['map'][_0xc11a('0x720')],
    'xtype': _0xc11a('0x5f4'),
    'controller': 'map',
    'title': Strings[_0xc11a('0x7c0')],
    'tbar': {
        'componentCls': _0xc11a('0x50a'),
        'defaults': {
            'xtype': _0xc11a('0x41c'),
            'tooltipType': 'title',
            'stateEvents': [_0xc11a('0x7c1')],
            'enableToggle': !0x0,
            'stateful': {
                'pressed': !0x0
            }
        },
        'items': [{
            'xtype': 'tbtext',
            'html': Strings[_0xc11a('0x7c0')],
            'baseCls': _0xc11a('0x4e8')
        }, {
            'xtype': _0xc11a('0x45c')
        }, {
            'handler': _0xc11a('0x697'),
            'reference': _0xc11a('0x6aa'),
            'glyph': _0xc11a('0x701'),
            'pressed': !0x0,
            'stateId': _0xc11a('0x7c2'),
            'tooltip': Strings[_0xc11a('0x4d6')]
        }, {
            'handler': _0xc11a('0x7c3'),
            'reference': _0xc11a('0x7c3'),
            'glyph': _0xc11a('0x7c4'),
            'stateId': _0xc11a('0x7c5'),
            'tooltip': Strings['mapLiveRoutes']
        }, {
            'reference': _0xc11a('0x7c6'),
            'glyph': _0xc11a('0x7c7'),
            'tooltip': Strings[_0xc11a('0x7c8')],
            'stateId': _0xc11a('0x7c9'),
            'toggleHandler': 'onFollowClick'
        }, {
            'reference': _0xc11a('0x7ca'),
            'glyph': 'xf018@FontAwesome',
            'tooltip': 'Street\x20View',
            'stateId': _0xc11a('0x7cb'),
            'toggleHandler': 'openStreetView'
        }, {
            'reference': _0xc11a('0x7cc'),
            'glyph': _0xc11a('0x7bd'),
            'tooltip': _0xc11a('0x7bc'),
            'stateId': _0xc11a('0x7cd'),
            'enableToggle': !0x1,
            'handler': _0xc11a('0x7ce')
        }, {
            'reference': _0xc11a('0x69a'),
            'glyph': _0xc11a('0x7ba'),
            'tooltip': _0xc11a('0x7b9'),
            'stateId': _0xc11a('0x7cf'),
            'enableToggle': !0x1,
            'handler': _0xc11a('0x7d0')
        }, {
            'xtype': _0xc11a('0x7d1'),
            'reference': _0xc11a('0x698'),
            'enableToggle': !0x1
        }, {
            'xtype': _0xc11a('0x79b'),
            'reference': _0xc11a('0x699'),
            'enableToggle': !0x1
        }]
    },
    'getMarkersSource': function () {
        return this[_0xc11a('0x7d2')];
    },
    'getAccuracySource': function () {
        return this[_0xc11a('0x7d3')];
    },
    'getRouteSource': function () {
        return this[_0xc11a('0x7d4')];
    },
    'getGeofencesSource': function () {
        return this[_0xc11a('0x7d5')];
    },
    'getLiveRouteSource': function () {
        return this[_0xc11a('0x7d6')];
    },
    'getLiveRouteLayer': function () {
        return this['liveRouteLayer'];
    },
    'initMap': function () {
        this[_0xc11a('0x3c7')]();
        this[_0xc11a('0x7d5')] = new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x728'))]({});
        this['map'][_0xc11a('0x7d7')](new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x728'))]({
            'name': _0xc11a('0x7d8'),
            'source': this[_0xc11a('0x7d5')]
        }));
        this[_0xc11a('0x7d6')] = new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x728'))]({});
        this[_0xc11a('0x7d9')] = new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x728'))]({
            'source': this['liveRouteSource'],
            'visible': this['lookupReference'](_0xc11a('0x7c3'))[_0xc11a('0x5c0')]
        });
        this['map']['addLayer'](this[_0xc11a('0x7d9')]);
        this[_0xc11a('0x7d4')] = new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x728'))]({});
        this['map'][_0xc11a('0x7d7')](new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x728'))]({
            'source': this['routeSource']
        }));
        this[_0xc11a('0x7d3')] = new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x728'))]({});
        this['map']['addLayer'](new ol[(_0xc11a('0x5e1'))][(_0xc11a('0x728'))]({
            'name': accuracyLayer,
            'source': this['accuracySource']
        }));
        this['markersSource'] = new ol[(_0xc11a('0x5d6'))][(_0xc11a('0x728'))]({});
        this['map'][_0xc11a('0x7d7')](new ol[(_0xc11a('0x5e1'))]['Vector']({
            'source': this['markersSource']
        }));
    }
});
Ext['define'](Traccar.view.Main, {
    'extend': Ext['container']['Viewport'],
    'alias': 'widget.main',
    'controller': _0xc11a('0x7df'),
    'layout': _0xc11a('0x7e0'),
    'defaults': {
        'header': !0x1,
        'collapsible': !0x0,
        'split': !0x0
    },
    'items': [{
        'region': 'west',
        'layout': _0xc11a('0x7e0'),
        'width': Traccar['Style'][_0xc11a('0x7e1')],
        'title': Strings['devicesAndState'],
        'titleCollapse': !0x0,
        'floatable': !0x1,
        'stateful': !0x0,
        'stateId': 'devices-and-state-panel',
        'defaults': {
            'split': !0x0,
            'flex': 0x1
        },
        'items': [{
            'region': 'center',
            'xtype': 'devicesView'
        }, {
            'region': 'south',
            'xtype': 'stateView'
        }]
    }, {
        'region': 'south',
        'xtype': _0xc11a('0x3a3'),
        'reference': _0xc11a('0x3a3'),
        'height': Traccar['Style']['reportHeight'],
        'collapsed': !0x0,
        'titleCollapse': !0x0,
        'floatable': !0x1
    }, {
        'region': 'center',
        'xtype': 'mapView',
        'collapsible': !0x1
    }, {
        'region': 'east',
        'xtype': 'eventsView',
        'reference': 'eventsView',
        'width': Traccar['Style'][_0xc11a('0x7e1')],
        'collapsed': !0x0,
        'titleCollapse': !0x0,
        'floatable': !0x1
    }]
});
Ext.define('Traccar.view.MainMobile', {
    extend: Ext.container.Viewport, alias: 'widget.mainMobile', id: 'rootPanel', layout: 'card', items: [{
        layout: 'border', defaults: { header: !1, collapsible: !0, split: !0 },
         items: [{ region: 'east', xtype: 'stateView',
          title: Strings.stateTitle, flex: 4, collapsed: !0,
           collapseMode: 'mini', titleCollapse: !0, floatable: !1, stateId: 'mobile-state-grid' },
          { region: 'center', xtype: 'mapView', collapsible: !1, flex: 2 },
           {region: 'south', xtype: 'devicesView', title: Strings.deviceTitle, flex: 1, collapsed: !0, titleCollapse: !0,
            floatable: !1, stateId: 'mobile-devices-grid'
        }]
    }, { xtype: 'reportView' }, { xtype: 'eventsView' }]
});

      
  
var panorama, pressedDevice, overlay;
Ext.define('Traccar.controller.Root', {
    extend: Ext.app.Controller, alias: 'controller.root', init: function () {

        container = document['getElementById']('popup');
        content = document['getElementById']('popup-content');
        closer = document['getElementById']('popup-closer');
        commandsButtons = document['getElementById']('commands-buttons');
        overlay = new ol['Overlay']({
            'element': document['getElementById']('popup'),
            'autoPan': !0x0,
            'autoPanAnimation': {
                'duration': 0xfa
            }
        });
        closer['onclick'] = function () {
            overlay['setPosition'](void 0x0);
            closer['blur']();
            return !0x1;
        }
            ;
            var i, data, attribute, chartTypesStore, maintenanceTypesStore; chartTypesStore = Ext.getStore('ReportChartTypes');
             maintenanceTypesStore = Ext.getStore('MaintenanceTypes');
             Ext.state.Manager.setProvider(new Ext.state.CookieProvider);
             data = Ext.getStore('PositionAttributes').getData().items;
             for (i = 0; i < data.length; i++)attribute = data[i], Traccar.model.Position.addFields([{
                name: 'attribute.' + attribute.get('key'),            
                attributeKey: attribute.get('key'), calculate: this.calculateAttribute, persist: !1
            }]), 'number' === attribute.get('valueType') && (chartTypesStore.add({ key: 'attribute.' + attribute.get('key'), 
            name: attribute.get('name') }), maintenanceTypesStore.add(attribute))
        },
                
                    
                    
    'calculateAttribute': function (_0x3711c7) {
        _0x3711c7 = _0x3711c7['attributes'][this['attributeKey']];
        return void 0x0 !== _0x3711c7 ? Traccar['AttributeFormatter'][_0xc11a('0x7f7')](this[_0xc11a('0x7f8')])(_0x3711c7) : _0x3711c7;
    },
    'onLaunch': function () {
        Ext['Ajax']['request']({
            'scope': this,
            'url': 'api/server',
            'callback': this['onServerReturn']
        });
    },
    'onServerReturn': function (_0x25ec2f, _0x5073b5, _0x41752c) {
        _0x25ec2f = {};
        if (_0x5073b5) {
            Traccar['app'][_0xc11a('0x7f9')](Ext[_0xc11a('0x379')](_0x41752c['responseText']));
            if (_0x5073b5 = Ext[_0xc11a('0x4ed')]['fromQueryString'](window[location]['search'])['token'])
                _0x25ec2f['token'] = _0x5073b5;
            Ext['Ajax']['request']({
                'scope': this,
                'url': 'api/session',
                'method': _0xc11a('0x505'),
                'params': _0x25ec2f,
                'callback': this[_0xc11a('0x7fb')]
            });
        } else
            Traccar['app']['showError'](_0x41752c);
    },
    'onSessionReturn': function (_0x2f7d57, _0x593144, _0x176f87) {
        Ext['get']('spinner-two')['setVisible'](!0x1);
        _0x593144 ? (Traccar['app'][_0xc11a('0x378')](Ext[_0xc11a('0x379')](_0x176f87['responseText'])),
            this['loadApp']()) : (this['login'] = Ext['create'](_0xc11a('0x38d'), {
                'listeners': {
                    'scope': this,
                    'login': this[_0xc11a('0x7fc')]
                }
            }),
                this['login'][_0xc11a('0x38a')]());
    },onLogin: function () { this.login.close(); this.loadApp() }, loadApp: function () {
        var attribution;
        //testando isso aqui comentario
        /*window.webkit && window.webkit.messageHandlers.appInterface && window.webkit.messageHandlers.appInterface.postMessage('login'); 
        window.appInterface && window.appInterface.postMessage('login'); */

        Ext.getStore('Groups').load(); 
        Ext.getStore('Drivers').load(); 
        Ext.getStore('Geofences').load(); 
        Ext.getStore('Calendars').load();
        Ext.getStore('Maintenances').load(); 
        Ext.getStore('ComputedAttributes').load();
         Ext.getStore('AllCommandTypes').load(); 
         Ext.getStore('Commands').load();
        Ext.getStore('AllNotificationTypes').load({ callback: function (records, operation, success) { operation = Ext.getStore('ReportEventTypes');
           success && (operation.add({ type: Traccar.store.ReportEventTypes.allEvents, name: Strings.eventAll }), operation.loadData(records, !0)) } });

        Ext['getStore'](_0xc11a('0x74b'))['load']();
        Ext['getStore']('Notifications')['load']();
        Ext['getStore'](_0xc11a('0x414'))['loadData'](Ext['getStore'](_0xc11a('0x7ff'))['getData']()['items'], !0x0);
        Ext['getStore'](_0xc11a('0x414'))[_0xc11a('0x800')](Ext['getStore'](_0xc11a('0x801'))['getData']()[_0xc11a('0x3e5')], !0x0);
        Ext['getStore'](_0xc11a('0x802'))[_0xc11a('0x800')](Ext['getStore'](_0xc11a('0x801'))['getData']()[_0xc11a('0x3e5')], !0x0);
        Ext['getStore'](_0xc11a('0x410'))[_0xc11a('0x800')](Ext['getStore'](_0xc11a('0x7ff'))['getData']()['items'], !0x0);
        Ext['getStore'](_0xc11a('0x413'))['loadData'](Ext['getStore'](_0xc11a('0x7ff'))['getData']()[_0xc11a('0x3e5')], !0x0);
        Ext['getStore']('Devices')['load']({
            'scope': this,
            'callback': function () { this.asyncUpdate(!0) }
        });
        (attribution = Ext.get('attribution')) &&
        attribution.remove(); Traccar.app.isMobile() ? Ext.create('widget.mainMobile') : Ext.create('widget.main');
                     if (attribution = Ext.Object.fromQueryString(window.location.search).eventId) 
                     this.fireEvent('showsingleevent', attribution), this.removeUrlParameter('eventId')
        },
    'beep': function () {
        this[_0xc11a('0x806')] || (this[_0xc11a('0x806')] = new Audio(_0xc11a('0x807')));
        this[_0xc11a('0x806')][_0xc11a('0x808')]();
    },
    'soundPressed': function () {
        var _0x1a3dc6 = Ext[_0xc11a('0x809')](_0xc11a('0x5cb'));
        return _0x1a3dc6 && _0x1a3dc6['pressed'];
    },
    'removeUrlParameter': function (_0x4b4961) {
        var _0x58cefc = Ext[_0xc11a('0x4ed')]['fromQueryString'](window['location'][_0xc11a('0x80a')]);
        delete _0x58cefc[_0x4b4961];
        Ext[_0xc11a('0x4ed')][_0xc11a('0x80b')](_0x58cefc) ? window[_0xc11a('0x80c')]['pushState'](null, null, window[location]['pathname']) : window['history'][_0xc11a('0x80d')](null, null, window[location][_0xc11a('0x80e')] + '?' + Ext['Object'][_0xc11a('0x80f')](_0x58cefc));
    },
    'asyncUpdate': function (_0x2d4a82) {
        var _0x447b38 = this, _0x2219ac, _0x1c5cda;
        _0x2219ac = _0xc11a('0x810') === window['location'][_0xc11a('0x811')] ? _0xc11a('0x812') : _0xc11a('0x813');
        _0x1c5cda = window[location][_0xc11a('0x80e')][substring](0x0, window[location][_0xc11a('0x80e')][_0xc11a('0x68b')]('/') + 0x1);
        _0x2219ac = new WebSocket(_0x2219ac + '//' + window[location][_0xc11a('0x814')] + _0x1c5cda + _0xc11a('0x815'));
        _0x2219ac['onclose'] = function () {
            Traccar['app']['showToast'](Strings[_0xc11a('0x816')], Strings[_0xc11a('0x817')]);
            Ext['Ajax']['request']({
                'url': 'api/devices',
                'success': function (_0x2d4a82) {
                    _0x447b38[_0xc11a('0x818')](Ext[_0xc11a('0x379')](_0x2d4a82['responseText']));
                },
                'failure': function (_0x2d4a82) {
                    0x191 === _0x2d4a82['status'] && window[location]['reload']();
                }
            });
            Ext['Ajax']['request']({
                'url': 'api/positions',
                'headers': {
                    'Accept': 'application/json'
                },
                'success': function (_0x2d4a82) {
                    _0x447b38[_0xc11a('0x819')](Ext[_0xc11a('0x379')](_0x2d4a82['responseText']));
                }
            });
            setTimeout(function () {
                _0x447b38['asyncUpdate'](!0x1);
            }, Traccar['Style'][_0xc11a('0x81a')]);
        }
            ;
        _0x2219ac[_0xc11a('0x81b')] = function (_0x2219ac) {
            _0x2219ac = Ext['decode'](_0x2219ac['data']);
            _0x2219ac[_0xc11a('0x4e4')] && _0x447b38[_0xc11a('0x818')](_0x2219ac['devices']);
            _0x2219ac['positions'] && (_0x447b38[_0xc11a('0x819')](_0x2219ac[_0xc11a('0x81c')], _0x2d4a82),
                _0x2d4a82 = !0x1);
            _0x2219ac['events'] && _0x447b38[_0xc11a('0x81d')](_0x2219ac['events']);
        }
            ;
    },
    'updateDevices': function (_0x2c8536) {
        var _0x512ae8, _0x29af0b, _0x517981;
        _0x29af0b = Ext['getStore']('Devices');
        for (_0x512ae8 = 0x0; _0x512ae8 < _0x2c8536['length']; _0x512ae8++)
            (_0x517981 = _0x29af0b['getById'](_0x2c8536[_0x512ae8]['id'])) && _0x517981['set']({
                'status': _0x2c8536[_0x512ae8]['status'],
                'lastUpdate': _0x2c8536[_0x512ae8]['lastUpdate'],
                'geofenceIds': _0x2c8536[_0x512ae8]['geofenceIds']
            }, {
                'dirty': !0x1
            });
    },
    'updatePositions': function (_0x54ceae, _0x5191cf) {
        var _0x250598, _0x23faf4, _0x7d987, _0x502f42;
        _0x23faf4 = Ext['getStore'](_0xc11a('0x48a'));
        for (_0x250598 = 0x0; _0x250598 < _0x54ceae['length']; _0x250598++)
            (_0x7d987 = _0x23faf4['findRecord']('deviceId', _0x54ceae[_0x250598]['deviceId'], 0x0, !0x1, !0x1, !0x0)) ? _0x7d987['set'](_0x54ceae[_0x250598]) : _0x23faf4['add'](Ext['create']('Traccar.model.Position', _0x54ceae[_0x250598])),
                Ext['getStore'](_0xc11a('0x57d'))['findRecord']('positionId', _0x54ceae[_0x250598]['id'], 0x0, !0x1, !0x1, !0x0) && Ext['getStore'](_0xc11a('0x5be'))['add'](Ext['create']('Traccar.model.Position', _0x54ceae[_0x250598]));
        _0x5191cf && ((_0x54ceae = Ext[_0xc11a('0x4ed')]['fromQueryString'](window[location]['search'])['deviceId']) && (_0x502f42 = Ext['getStore'](_0xc11a('0x81e'))['findRecord']('id', _0x54ceae, 0x0, !0x1, !0x0, !0x0)) && this['fireEvent'](_0xc11a('0x486'), _0x502f42, !0x0),
            _0x502f42 || this[_0xc11a('0x696')]());
    },
    'updateEvents': function (_0x2df31e) {
        var _0x323f30, _0xef4911, _0x492847;
        _0xef4911 = Ext['getStore'](_0xc11a('0x57d'));
        for (_0x323f30 = 0x0; _0x323f30 < _0x2df31e['length']; _0x323f30++)
            _0xef4911['add'](_0x2df31e[_0x323f30]),
                (_0x492847 = Ext['getStore']('Devices')['getById'](_0x2df31e[_0x323f30]['deviceId'])) ? (this[_0xc11a('0x81f')]() && this[_0xc11a('0x820')](),
                    Traccar['app']['showToast'](_0x2df31e[_0x323f30]['text'], _0x492847['get']('name'))) : Traccar['app'][_0xc11a('0x34f')](_0x2df31e[_0x323f30]['text']);
    },
    'zoomToAllDevices': function () {
        var _0x7dcd50, _0x3fc6f5, _0x2bd912;
        _0x7dcd50 = Traccar['app']['getPreference']('latitude', 0x0);
        _0x3fc6f5 = Traccar['app']['getPreference']('longitude', 0x0);
        _0x2bd912 = Traccar['app']['getPreference']('zoom', 0x0);
        0x0 === _0x7dcd50 && 0x0 === _0x3fc6f5 && 0x0 === _0x2bd912 && this['fireEvent']('zoomtoalldevices');
    }
});
Ext['define'](_0xc11a('0x821'), {
    'extend': Ext['app'][_0xc11a('0x822')],
    'name': _0xc11a('0x823'),
    'models': 'Server\x20User\x20Group\x20Device\x20Position\x20Attribute\x20Command\x20Event\x20Geofence\x20Notification\x20ReportSummary\x20ReportTrip\x20ReportStop\x20Calendar\x20KnownAttribute\x20Driver\x20KnownCommand\x20KnownNotification\x20Maintenance'['split']('\x20'),
    'stores': _0xc11a('0x824')['split']('\x20'),
    'controllers': [_0xc11a('0x825')],
    'isMobile': function () {
        return window[_0xc11a('0x826')] && window['matchMedia'](_0xc11a('0x827'))[_0xc11a('0x828')];
    },
    'getVehicleFeaturesDisabled': function () {
        return this['getBooleanAttributePreference']('ui.disableVehicleFetures');
    },
    'getEventString': function (_0x20ffe8) {
        _0x20ffe8 = _0xc11a('0x2c6') + _0x20ffe8['charAt'](0x0)['toUpperCase']() + _0x20ffe8['slice'](0x1);
        return Strings[_0x20ffe8] || _0x20ffe8;
    },
    'getNotificatorString': function (_0x1e91f8) {
        _0x1e91f8 = _0xc11a('0x829') + _0x1e91f8['charAt'](0x0)['toUpperCase']() + _0x1e91f8['slice'](0x1);
        return Strings[_0x1e91f8] || _0x1e91f8;
    },
    'showReports': function (_0x56c57f) {
        var _0x4abe69 = Ext[_0xc11a('0x809')](_0xc11a('0x7e7'));
        _0x4abe69 && _0x4abe69[_0xc11a('0x58c')](_0x56c57f ? 0x1 : 0x0);
    },
    'showEvents': function (_0x5d366b) {
        var _0x841548 = Ext['getCmp'](_0xc11a('0x7e7'));
        _0x841548 && _0x841548[_0xc11a('0x58c')](_0x5d366b ? 0x2 : 0x0);
    },
    'setUser': function (_0x247b40) {
        this['user'] = Ext['create'](_0xc11a('0x82a'), {
            'model': _0xc11a('0x6eb')
        })['readRecords'](_0x247b40)[_0xc11a('0x82b')]()[0x0];
    },
    'getUser': function () {
        return this['user'];
    },
    'setServer': function (_0x425b41) {
        this[_0xc11a('0x31f')] = Ext['create'](_0xc11a('0x82a'), {
            'model': 'Traccar.model.Server'
        })[_0xc11a('0x82c')](_0x425b41)[_0xc11a('0x82b')]()[0x0];
    },
    'getServer': function () {
        return this['server'];
    },
    'getPreference': function (_0x51f40e, _0x2d6f6c) {
        return this['getServer']()['get']('forceSettings') ? this['getServer']()['get'](_0x51f40e) || this['getUser']()['get'](_0x51f40e) || _0x2d6f6c : this['getUser']()['get'](_0x51f40e) || this[_0xc11a('0x798')]()['get'](_0x51f40e) || _0x2d6f6c;
    },
    'getAttributePreference': function (_0x6bdedb, _0x8121cc) {
        return this[_0xc11a('0x798')]()['get']('forceSettings') ? this[_0xc11a('0x798')]()['get']('attributes')[_0x6bdedb] || this['getUser']()['get']('attributes')[_0x6bdedb] || _0x8121cc : this['getUser']()['get']('attributes')[_0x6bdedb] || this[_0xc11a('0x798')]()['get']('attributes')[_0x6bdedb] || _0x8121cc;
    },
    'getBooleanAttributePreference': function (_0x3ff229) {
        return _0xc11a('0x82d') === this['getAttributePreference'](_0x3ff229, !0x1)[_0xc11a('0x82e')]();
    },
    'getReportColor': function (_0x25118c) {
        var _0x328fbf, _0x3bae2a = Ext['getStore']('Devices')['getById'](_0x25118c);
        _0x3bae2a && (_0x328fbf = _0x3bae2a['get']('attributes')[_0xc11a('0x82f')]);
        if (_0x328fbf)
            return _0x328fbf;
        _0x328fbf = 0x0;
        void 0x0 !== _0x25118c && (_0x328fbf = _0x25118c % Traccar['Style']['mapRouteColor']['length']);
        return Traccar['Style'][_0xc11a('0x830')][_0x328fbf];
    },
    'showError': function (_0x56f284) {
        Ext[_0xc11a('0x831')](_0x56f284) ? Ext['Msg'][_0xc11a('0x832')](Strings[_0xc11a('0x817')], _0x56f284) : _0x56f284['responseText'] ? Ext['Msg'][_0xc11a('0x832')](Strings[_0xc11a('0x817')], Strings[_0xc11a('0x833')] + _0xc11a('0x834') + _0x56f284['responseText'] + _0xc11a('0x835')) : _0x56f284['statusText'] ? Ext['Msg'][_0xc11a('0x832')](Strings[_0xc11a('0x817')], _0x56f284['statusText']) : Ext['Msg'][_0xc11a('0x832')](Strings[_0xc11a('0x817')], Strings['errorConnection']);
    },
    'showToast': function (_0x219975, _0x136751) {
        Ext[_0xc11a('0x836')]({
            'html': _0x219975,
            'title': _0x136751,
            'width': Traccar['Style'][_0xc11a('0x837')],
            'align': 'br'
        });
    },
    'showOverlay': function (_0x2f0112, _0x3803a0, _0x63ffdd) {
        _0x2f0112['addOverlay'](overlay);
        _0x2f0112 = _0x63ffdd[_0xc11a('0x60d')];
        _0x63ffdd = Ext['getStore']('Devices')['getById'](_0x3803a0['get']('id'));
        var _0x495111 = Ext['getStore']('Groups')['getById'](_0x3803a0['get']('groupId'))
            , _0x56df07 = Ext['getStore'](_0xc11a('0x48a'))['findRecord']('deviceId', _0x3803a0['get']('id'), 0x0, !0x1, !0x1, !0x0)
            , _0x1d8216 = _0x56df07['get']('attributes')
            , _0x1d8216 = null != _0x1d8216[_0xc11a('0x2df')] ? 0x1 == _0x1d8216[_0xc11a('0x2df')] ? Strings[_0xc11a('0x838')] : Strings[_0xc11a('0x839')] : '-'
            , _0x52dbf2 = 'online' == _0x63ffdd['get']('status') ? Strings['deviceStatusOnline'] : _0xc11a('0x273') == _0x63ffdd['get']('status') ? Strings[_0xc11a('0x274')] : Strings[_0xc11a('0x83a')]
            , _0x495111 = null == _0x495111 ? _0xc11a('0x83b') : _0x495111['get']('name');
        content[_0xc11a('0x83c')] = _0xc11a('0x83d') + _0x63ffdd['get']('name') + _0xc11a('0x83e') + _0x495111 + '</span></div></br><div\x20class=\x22title\x22>Ignição\x20:\x20<span>' + _0x1d8216 + _0xc11a('0x83f') + Traccar['AttributeFormatter']['getFormatter']('fixTime')(_0x56df07['get']('fixTime')) + '</span></div></br><div\x20class=\x22title\x22>' + Strings[_0xc11a('0x4f3')] + _0xc11a('0x840') + _0x52dbf2 + _0xc11a('0x841') + Traccar['AttributeFormatter']['getFormatter']('speed')(_0x56df07['get']('speed')) + _0xc11a('0x842') + _0x56df07['get']('address') + _0xc11a('0x843');
        0x1 == Traccar['app']['getPreference']('limitCommands', !0x1);
        container[_0xc11a('0x3c5')][_0xc11a('0x6a7')] = _0xc11a('0x392');
        overlay[_0xc11a('0x48b')](_0x2f0112);
        document['getElementById'](_0xc11a('0x844'))['onclick'] = function () {
            swal({
                'title': _0xc11a('0x845'),
                'text': _0xc11a('0x846'),
                'type': _0xc11a('0x847'),
                'showCancelButton': !0x0,
                'confirmButtonClass': _0xc11a('0x848'),
                'confirmButtonText': _0xc11a('0x849'),
                'cancelButtonText': _0xc11a('0x84a'),
                'closeOnConfirm': !0x0
            }, function () {
                var _0x2f0112 = {
                    'deviceId': _0x3803a0['get']('id'),
                    'type': _0xc11a('0x84b')
                };
                Ext['Ajax']['request']({
                    'url': _0xc11a('0x339'),
                    'jsonData': Ext['encode'](_0x2f0112),
                    'success': function (_0x2f0112) {
                        Traccar['app'][_0xc11a('0x34f')](0xca === _0x2f0112['status'] ? Strings[_0xc11a('0x451')] : Strings[_0xc11a('0x452')]);
                    },
                    'failure': function (_0x2f0112) { }
                });
            });
        }
            ;
        document['getElementById'](_0xc11a('0x84c'))['onclick'] = function () {
            swal({
                'title': _0xc11a('0x84d'),
                'text': _0xc11a('0x84e'),
                'type': _0xc11a('0x60c'),
                'showCancelButton': !0x0,
                'confirmButtonClass': _0xc11a('0x84f'),
                'confirmButtonText': _0xc11a('0x849'),
                'cancelButtonText': _0xc11a('0x84a'),
                'closeOnConfirm': !0x0
            }, function () {
                var _0x2f0112 = {
                    'deviceId': _0x3803a0['get']('id'),
                    'type': _0xc11a('0x850')
                };
                Ext['Ajax']['request']({
                    'url': _0xc11a('0x339'),
                    'jsonData': Ext['encode'](_0x2f0112),
                    'success': function (_0x2f0112) {
                        Traccar['app'][_0xc11a('0x34f')](0xca === _0x2f0112['status'] ? Strings[_0xc11a('0x451')] : Strings['commandSent']);
                    },
                    'failure': function (_0x2f0112) { }
                });
            });
        }
            ;
        document['getElementById'](_0xc11a('0x3e0'))['onclick'] = function () {
            window[_0xc11a('0x69b')](_0xc11a('0x851') + _0x56df07['get']('latitude') + ',' + _0x56df07['get']('longitude') + '/@' + _0x56df07['get']('latitude') + ',' + _0x56df07['get']('longitude') + ',17z/data=!3m1!4b1!4m5!3m4!1s0x0:0x0!8m2!3d' + _0x56df07['get']('latitude') + _0xc11a('0x852') + _0x56df07['get']('longitude') + _0xc11a('0x853'));
        }
            ;
    }
});
Ext[_0xc11a('0x854')]({
    'name': _0xc11a('0x823'),
    'extend': Traccar[_0xc11a('0x822')]
});
